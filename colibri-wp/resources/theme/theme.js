/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 90);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj8wY2I4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJqUXVlcnlcIlxuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (name, definition) {\n\n  if (true) {\n    module.exports = definition();\n  } else if (typeof define == 'function' && _typeof(define.amd) == 'object') {\n    define(definition);\n  } else {\n    this[name] = definition();\n  }\n})('Colibri', function () {\n  var $ = jQuery;\n  if (typeof jQuery === 'undefined') {\n    throw new Error('Colibri requires jQuery');\n  }\n\n  ;(function ($) {\n    var version = $.fn.jquery.split('.');\n    if (version[0] === 1 && version[1] < 8) {\n      throw new Error('Colibri requires at least jQuery v1.8');\n    }\n  })(jQuery);\n\n  var _Colibri;\n\n  var lib_prefix = \"colibri.\";\n\n  ;(function () {\n    // Inherits\n    Function.prototype.inherits = function (parent) {\n      var F = function F() {};\n      F.prototype = parent.prototype;\n      var f = new F();\n\n      for (var prop in this.prototype) {\n        f[prop] = this.prototype[prop];\n      }\n      this.prototype = f;\n      this.prototype.super = parent.prototype;\n    };\n\n    // Core Class\n    _Colibri = function Colibri(element, options) {\n      options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};\n\n      this.$element = $(element);\n      var instanceId = this.$element.data('colibri-id');\n\n      var instanceData = _Colibri.getData(instanceId);\n      this.instance = instanceId;\n\n      var elementData = this.$element.data();\n\n      this.opts = $.extend(true, {}, this.defaults, $.fn[lib_prefix + this.namespace].options, elementData, instanceData, options);\n      this.$target = typeof this.opts.target === 'string' ? $(this.opts.target) : null;\n    };\n\n    _Colibri.getData = function (id) {\n      if (window.colibriData && window.colibriData[id]) {\n        return window.colibriData[id];\n      }\n\n      return {};\n    };\n\n    _Colibri.isCustomizerPreview = function () {\n      return !!window.colibriCustomizerPreviewData;\n    };\n    // Core Functionality\n    _Colibri.prototype = {\n      updateOpts: function updateOpts(updatedData) {\n        var instanceId = this.instance;\n        var instanceData = $.extend(true, {}, this.defaults, _Colibri.getData(instanceId));\n        var updatedDataWithDefault = updatedData ? updatedData : {};\n        this.opts = $.extend(true, this.opts, instanceData, updatedDataWithDefault);\n      },\n      getInstance: function getInstance() {\n        return this.$element.data('fn.' + this.namespace);\n      },\n      hasTarget: function hasTarget() {\n        return !(this.$target === null);\n      },\n      callback: function callback(type) {\n        var args = [].slice.call(arguments).splice(1);\n\n        // on element callback\n        if (this.$element) {\n          args = this._fireCallback($._data(this.$element[0], 'events'), type, this.namespace, args);\n        }\n\n        // on target callback\n        if (this.$target) {\n          args = this._fireCallback($._data(this.$target[0], 'events'), type, this.namespace, args);\n        }\n\n        // opts callback\n        if (this.opts && this.opts.callbacks && $.isFunction(this.opts.callbacks[type])) {\n          return this.opts.callbacks[type].apply(this, args);\n        }\n\n        return args;\n      },\n      _fireCallback: function _fireCallback(events, type, eventNamespace, args) {\n        if (events && typeof events[type] !== 'undefined') {\n          var len = events[type].length;\n          for (var i = 0; i < len; i++) {\n            var namespace = events[type][i].namespace;\n            if (namespace === eventNamespace) {\n              var value = events[type][i].handler.apply(this, args);\n            }\n          }\n        }\n\n        return typeof value === 'undefined' ? args : value;\n      }\n    };\n  })();\n\n  (function (Colibri) {\n    Colibri.Plugin = {\n      create: function create(classname, pluginname) {\n        pluginname = typeof pluginname === 'undefined' ? classname.toLowerCase() : pluginname;\n        pluginname = lib_prefix + pluginname;\n\n        $.fn[pluginname] = function (method, options) {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var name = 'fn.' + pluginname;\n          var val = [];\n\n          this.each(function () {\n            var $this = $(this),\n                data = $this.data(name);\n            options = (typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' ? method : options;\n\n            if (!data) {\n              // Initialization\n              $this.data(name, {});\n              data = new Colibri[classname](this, options);\n              $this.data(name, data);\n            }\n\n            // Call methods\n            if (typeof method === 'string') {\n              if ($.isFunction(data[method])) {\n                var methodVal = data[method].apply(data, args);\n                if (methodVal !== undefined) {\n                  val.push(methodVal);\n                }\n              } else {\n                $.error('No such method \"' + method + '\" for ' + classname);\n              }\n            }\n          });\n\n          return val.length === 0 || val.length === 1 ? val.length === 0 ? this : val[0] : val;\n        };\n\n        $.fn[pluginname].options = {};\n\n        return this;\n      },\n      autoload: function autoload(pluginname) {\n        var arr = pluginname.split(',');\n        var len = arr.length;\n\n        for (var i = 0; i < len; i++) {\n          var name = arr[i].toLowerCase().split(',').map(function (s) {\n            return lib_prefix + s.trim();\n          }).join(',');\n          this.autoloadQueue.push(name);\n        }\n\n        return this;\n      },\n      autoloadQueue: [],\n      startAutoload: function startAutoload() {\n        if (!window.MutationObserver || this.autoloadQueue.length === 0) {\n          return;\n        }\n\n        var self = this;\n        var observer = new MutationObserver(function (mutations) {\n          mutations.forEach(function (mutation) {\n            var newNodes = mutation.addedNodes;\n            if (newNodes.length === 0 || newNodes.length === 1 && newNodes.nodeType === 3) {\n              return;\n            }\n\n            self.startAutoloadOnce();\n          });\n        });\n\n        // pass in the target node, as well as the observer options\n        observer.observe(document, {\n          subtree: true,\n          childList: true\n        });\n      },\n\n      startAutoloadOnce: function startAutoloadOnce() {\n        var self = this;\n        var $nodes = $('[data-colibri-component]').not('[data-loaded]').not('[data-disabled]');\n        $nodes.each(function () {\n          var $el = $(this);\n          var pluginname = lib_prefix + $el.data('colibri-component');\n\n          if (self.autoloadQueue.indexOf(pluginname) !== -1) {\n            $el.attr('data-loaded', true);\n            try {\n              $el[pluginname]();\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        });\n      },\n      watch: function watch() {\n        Colibri.Plugin.startAutoloadOnce();\n        Colibri.Plugin.startAutoload();\n      }\n    };\n\n    $(window).on('load', function () {\n      Colibri.Plugin.watch();\n    });\n  })(_Colibri);\n\n  (function (Colibri) {\n    Colibri.Animation = function (element, effect, callback) {\n      this.namespace = 'animation';\n      this.defaults = {};\n\n      // Parent Constructor\n      Colibri.apply(this, arguments);\n\n      // Initialization\n      this.effect = effect;\n      this.completeCallback = typeof callback === 'undefined' ? false : callback;\n      this.prefixes = ['', '-moz-', '-o-animation-', '-webkit-'];\n      this.queue = [];\n\n      this.start();\n    };\n\n    Colibri.Animation.prototype = {\n      start: function start() {\n        if (this.isSlideEffect()) {\n          this.setElementHeight();\n        }\n\n        this.addToQueue();\n        this.clean();\n        this.animate();\n      },\n      addToQueue: function addToQueue() {\n        this.queue.push(this.effect);\n      },\n      setElementHeight: function setElementHeight() {\n        this.$element.height(this.$element.outerHeight());\n      },\n      removeElementHeight: function removeElementHeight() {\n        this.$element.css('height', '');\n      },\n      isSlideEffect: function isSlideEffect() {\n        return this.effect === 'slideDown' || this.effect === 'slideUp';\n      },\n      isHideableEffect: function isHideableEffect() {\n        var effects = ['fadeOut', 'slideUp', 'flipOut', 'zoomOut', 'slideOutUp', 'slideOutRight', 'slideOutLeft'];\n\n        return $.inArray(this.effect, effects) !== -1;\n      },\n      isToggleEffect: function isToggleEffect() {\n        return this.effect === 'show' || this.effect === 'hide';\n      },\n      storeHideClasses: function storeHideClasses() {\n        if (this.$element.hasClass('hide-sm')) {\n          this.$element.data('hide-sm-class', true);\n        } else if (this.$element.hasClass('hide-md')) {\n          this.$element.data('hide-md-class', true);\n        }\n      },\n      revertHideClasses: function revertHideClasses() {\n        if (this.$element.data('hide-sm-class')) {\n          this.$element.addClass('hide-sm').removeData('hide-sm-class');\n        } else if (this.$element.data('hide-md-class')) {\n          this.$element.addClass('hide-md').removeData('hide-md-class');\n        } else {\n          this.$element.addClass('hide');\n        }\n      },\n      removeHideClass: function removeHideClass() {\n        if (this.$element.data('hide-sm-class')) {\n          this.$element.removeClass('hide-sm');\n        } else {\n          if (this.$element.data('hide-md-class')) {\n            this.$element.removeClass('hide-md');\n          } else {\n            this.$element.removeClass('hide');\n            this.$element.removeClass('force-hide');\n          }\n        }\n      },\n      animate: function animate() {\n        this.storeHideClasses();\n        if (this.isToggleEffect()) {\n          return this.makeSimpleEffects();\n        }\n\n        this.$element.addClass('colibri-animated');\n        this.$element.addClass(this.queue[0]);\n        this.removeHideClass();\n\n        var _callback = this.queue.length > 1 ? null : this.completeCallback;\n        this.complete('AnimationEnd', $.proxy(this.makeComplete, this), _callback);\n      },\n      makeSimpleEffects: function makeSimpleEffects() {\n        if (this.effect === 'show') {\n          this.removeHideClass();\n        } else if (this.effect === 'hide') {\n          this.revertHideClasses();\n        }\n\n        if (typeof this.completeCallback === 'function') {\n          this.completeCallback(this);\n        }\n      },\n      makeComplete: function makeComplete() {\n        if (this.$element.hasClass(this.queue[0])) {\n          this.clean();\n          this.queue.shift();\n\n          if (this.queue.length) {\n            this.animate();\n          }\n        }\n      },\n      complete: function complete(type, make, callback) {\n        var events = type.split(' ').map(function (type) {\n          return type.toLowerCase() + ' webkit' + type + ' o' + type + ' MS' + type;\n        });\n\n        this.$element.one(events.join(' '), $.proxy(function () {\n          if (typeof make === 'function') {\n            make();\n          }\n          if (this.isHideableEffect()) {\n            this.revertHideClasses();\n          }\n          if (this.isSlideEffect()) {\n            this.removeElementHeight();\n          }\n          if (typeof callback === 'function') {\n            callback(this);\n          }\n\n          this.$element.off(event);\n        }, this));\n      },\n      clean: function clean() {\n        this.$element.removeClass('colibri-animated').removeClass(this.queue[0]);\n      }\n    };\n\n    // Inheritance\n    Colibri.Animation.inherits(Colibri);\n  })(_Colibri);\n\n  (function ($) {\n    var animationName = lib_prefix + 'animation';\n    $.fn[animationName] = function (effect, callback) {\n      var name = 'fn.animation';\n\n      return this.each(function () {\n        var $this = $(this),\n            data = $this.data(name);\n\n        $this.data(name, {});\n        $this.data(name, data = new _Colibri.Animation(this, effect, callback));\n      });\n    };\n\n    $.fn[animationName].options = {};\n\n    _Colibri.animate = function ($target, effect, callback) {\n      $target[animationName](effect, callback);\n      return $target;\n    };\n  })(jQuery);\n\n  (function (Colibri) {\n    Colibri.Detect = function () {};\n\n    Colibri.Detect.prototype = {\n      isMobile: function isMobile() {\n        return (/(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent)\n        );\n      },\n      isDesktop: function isDesktop() {\n        return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent);\n      },\n      isMobileScreen: function isMobileScreen() {\n        return $(window).width() <= 768;\n      },\n      isTabletScreen: function isTabletScreen() {\n        return $(window).width() >= 768 && $(window).width() <= 1024;\n      },\n      isDesktopScreen: function isDesktopScreen() {\n        return $(window).width() > 1024;\n      }\n    };\n  })(_Colibri);\n\n  (function (Colibri) {\n    Colibri.Utils = function () {};\n\n    Colibri.Utils.prototype = {\n      disableBodyScroll: function disableBodyScroll() {\n        var $body = $('html');\n        var windowWidth = window.innerWidth;\n\n        if (!windowWidth) {\n          var documentElementRect = document.documentElement.getBoundingClientRect();\n          windowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n        }\n\n        var isOverflowing = document.body.clientWidth < windowWidth;\n        var scrollbarWidth = this.measureScrollbar();\n\n        $body.css('overflow', 'hidden');\n        if (isOverflowing) {\n          $body.css('padding-right', scrollbarWidth);\n        }\n      },\n      measureScrollbar: function measureScrollbar() {\n        var $body = $('body');\n        var scrollDiv = document.createElement('div');\n        scrollDiv.className = 'scrollbar-measure';\n\n        $body.append(scrollDiv);\n        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        $body[0].removeChild(scrollDiv);\n        return scrollbarWidth;\n      },\n      enableBodyScroll: function enableBodyScroll() {\n        $('html').css({ 'overflow': '', 'padding-right': '' });\n      }\n    };\n  })(_Colibri);\n\n  return _Colibri;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */
/***/ (function(module, exports) {

eval("(function ($) {\n  function inCustomizer() {\n    return Colibri.isCustomizerPreview();\n  }\n\n  if (window.location.hash === '#page-top') {\n    changeUrlHash('', 5);\n  }\n\n  var __toCheckOnScroll = {\n    items: {},\n    eachCategory: function eachCategory(callback) {\n      for (var id in this.items) {\n        if (!this.items.hasOwnProperty(id)) {\n          continue;\n        }\n\n        callback(this.items[id]);\n      }\n    },\n    addItem: function addItem(id, item) {\n      if (!this.items[id]) {\n        this.items[id] = [];\n      }\n\n      this.items[id].push(item);\n    },\n    all: function all() {\n      var result = [];\n\n      for (var id in this.items) {\n        if (!this.items.hasOwnProperty(id)) {\n          continue;\n        }\n\n        result = result.concat(this.items[id]);\n      }\n\n      return result;\n    }\n  };\n  var __alreadyScrolling = false;\n\n  function getScrollToValue(elData) {\n    var offset = !isNaN(parseFloat(elData.options.offset)) ? elData.options.offset : elData.options.offset.call(elData.target);\n    var scrollToValue = elData.target.offset().top - offset - $('body').offset().top;\n\n    return scrollToValue;\n  }\n\n  function changeUrlHash(hash, timeout) {\n    if (hash === location.hash.replace('#', '') || hash === 'page-top' && '' === location.hash.replace('#', '')) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (hash) {\n        if (hash === 'page-top') {\n          hash = ' ';\n        } else {\n          hash = '#' + hash;\n        }\n      } else {\n        hash = ' ';\n      }\n      if (history && history.replaceState) {\n        history.replaceState({}, '', hash);\n      }\n    }, timeout || 100);\n    /* safari issue fixed by throtteling the event */\n  }\n\n  function scrollItem(elData) {\n    if (__alreadyScrolling) {\n      return;\n    }\n\n    __alreadyScrolling = true;\n    var scrollToValue = getScrollToValue(elData);\n\n    $('html, body').animate({ scrollTop: scrollToValue }, {\n      easing: 'linear',\n      complete: function complete() {\n        // check for any updates\n        var scrollToValue = getScrollToValue(elData);\n        $('html, body').animate({ scrollTop: scrollToValue }, {\n          easing: 'linear',\n          duration: 100,\n          complete: function complete() {\n            __alreadyScrolling = false;\n            changeUrlHash(elData.id, 5);\n          }\n        });\n      }\n    });\n  }\n\n  function getPageBaseUrl() {\n    return [location.protocol, '//', location.host, location.pathname].join('');\n  }\n\n  function fallbackUrlParse(url) {\n    return url.split('?')[0].split('#')[0];\n  }\n\n  function getABaseUrl(element) {\n    var href = jQuery(element)[0].href || '';\n    var url = '#';\n\n    try {\n      var _url = new window.URL(href);\n      url = [_url.protocol, '//', _url.host, _url.pathname].join('');\n    } catch (e) {\n      url = fallbackUrlParse(href);\n    }\n\n    return url;\n  }\n\n  function getTargetForEl(element) {\n    var targetId = (element.attr('href') || '').split('#').pop(),\n        hrefBase = getABaseUrl(element),\n        target = null,\n        pageURL = getPageBaseUrl();\n\n    if (hrefBase.length && hrefBase !== pageURL) {\n      return target;\n    }\n\n    if (targetId.trim().length) {\n      try {\n        target = $('[id=\"' + targetId + '\"]');\n      } catch (e) {\n        console.log('error scrollSpy', e);\n      }\n    }\n\n    if (target && target.length) {\n      return target;\n    }\n\n    return null;\n  }\n\n  $.fn.smoothScrollAnchor = function (options) {\n    if (inCustomizer()) {\n      return;\n    }\n\n    var elements = $(this);\n\n    options = jQuery.extend({\n      offset: 0\n    }, options);\n\n    elements.each(function () {\n      var element = $(this);\n\n      var target = options.target || getTargetForEl(element);\n      if (target && target.length) {\n        var elData = {\n          element: element,\n          options: options,\n          target: target,\n          targetSel: options.targetSel || '[id=\"' + target.attr('id').trim() + '\"]',\n          id: (target.attr('id') || '').trim()\n        };\n\n        element.off('click.smooth-scroll tap.smooth-scroll').on('click.smooth-scroll tap.smooth-scroll', function (event) {\n          if ($(this).data('skip-smooth-scroll') || $(event.target).data('skip-smooth-scroll')) {\n            return;\n          }\n\n          event.preventDefault();\n\n          if (!$(this).data('allow-propagation')) {\n            event.stopPropagation();\n          }\n\n          scrollItem(elData);\n\n          if (elData.options.clickCallback) {\n            elData.options.clickCallback.call(this, event);\n          }\n        });\n      }\n    });\n  };\n\n  $.fn.scrollSpy = function (options) {\n    if (inCustomizer()) {\n      return;\n    }\n\n    var elements = $(this);\n    var id = 'spy-' + parseInt(Date.now() * Math.random());\n\n    elements.each(function () {\n      var element = $(this);\n      var settings = jQuery.extend({\n        onChange: function onChange() {},\n        onLeave: function onLeave() {},\n        clickCallback: function clickCallback() {},\n\n        smoothScrollAnchor: false,\n        offset: 0\n      }, options);\n\n      if (element.is('a') && (element.attr('href') || '').indexOf('#') !== -1) {\n        var target = getTargetForEl(element);\n\n        if (target) {\n          var elData = {\n            element: element,\n            options: settings,\n            target: target,\n            targetSel: '[id=\"' + target.attr('id').trim() + '\"]',\n            id: target.attr('id').trim()\n          };\n          __toCheckOnScroll.addItem(id, elData);\n          element.data('scrollSpy', elData);\n\n          if (options.smoothScrollAnchor) {\n            element.smoothScrollAnchor(options);\n          }\n        }\n      }\n    });\n  };\n\n  function update() {\n    __toCheckOnScroll.eachCategory(function (items) {\n      var ordered = items.sort(function (itemA, itemB) {\n        return itemA.target.offset().top - itemB.target.offset().top;\n      });\n      var lastItem = ordered.filter(function (item) {\n        var scrollY = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        return item.target.offset().top <= scrollY + window.innerHeight * 0.25;\n      }).pop();\n      ordered.forEach(function (item) {\n        if (lastItem && item.element.is(lastItem.element)) {\n          changeUrlHash(item.id, 5);\n          item.options.onChange.call(item.element);\n        } else {\n          item.options.onLeave.call(item.element);\n        }\n      });\n    });\n  }\n\n  function goToCurrentHash() {\n    var hash = window.location.hash.replace('#', '');\n    var currentItem = __toCheckOnScroll.all().filter(function (item) {\n      return item.targetSel === '[id=\"' + decodeURIComponent(hash).trim() + '\"]';\n    });\n\n    $(window).on('load', function () {\n      if (currentItem.length) {\n        scrollItem(currentItem[0]);\n      }\n      update();\n    });\n  }\n\n  if (!inCustomizer()) {\n    $(window).scroll(update);\n\n    $(window).bind('smoothscroll.update', update);\n\n    $(window).bind('smoothscroll.update', goToCurrentHash);\n\n    $(goToCurrentHash);\n  }\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9tZXNtZXJpemUtc21vb3Roc2Nyb2xsLmpzP2E0Y2YiXSwibmFtZXMiOlsiJCIsImluQ3VzdG9taXplciIsIkNvbGlicmkiLCJpc0N1c3RvbWl6ZXJQcmV2aWV3Iiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwiY2hhbmdlVXJsSGFzaCIsIl9fdG9DaGVja09uU2Nyb2xsIiwiaXRlbXMiLCJlYWNoQ2F0ZWdvcnkiLCJjYWxsYmFjayIsImlkIiwiaGFzT3duUHJvcGVydHkiLCJhZGRJdGVtIiwiaXRlbSIsInB1c2giLCJhbGwiLCJyZXN1bHQiLCJjb25jYXQiLCJfX2FscmVhZHlTY3JvbGxpbmciLCJnZXRTY3JvbGxUb1ZhbHVlIiwiZWxEYXRhIiwib2Zmc2V0IiwiaXNOYU4iLCJwYXJzZUZsb2F0Iiwib3B0aW9ucyIsImNhbGwiLCJ0YXJnZXQiLCJzY3JvbGxUb1ZhbHVlIiwidG9wIiwidGltZW91dCIsInJlcGxhY2UiLCJzZXRUaW1lb3V0IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInNjcm9sbEl0ZW0iLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiZWFzaW5nIiwiY29tcGxldGUiLCJkdXJhdGlvbiIsImdldFBhZ2VCYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwicGF0aG5hbWUiLCJqb2luIiwiZmFsbGJhY2tVcmxQYXJzZSIsInVybCIsInNwbGl0IiwiZ2V0QUJhc2VVcmwiLCJlbGVtZW50IiwiaHJlZiIsImpRdWVyeSIsIl91cmwiLCJVUkwiLCJlIiwiZ2V0VGFyZ2V0Rm9yRWwiLCJ0YXJnZXRJZCIsImF0dHIiLCJwb3AiLCJocmVmQmFzZSIsInBhZ2VVUkwiLCJsZW5ndGgiLCJ0cmltIiwiY29uc29sZSIsImxvZyIsImZuIiwic21vb3RoU2Nyb2xsQW5jaG9yIiwiZWxlbWVudHMiLCJleHRlbmQiLCJlYWNoIiwidGFyZ2V0U2VsIiwib2ZmIiwib24iLCJldmVudCIsImRhdGEiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNsaWNrQ2FsbGJhY2siLCJzY3JvbGxTcHkiLCJwYXJzZUludCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwic2V0dGluZ3MiLCJvbkNoYW5nZSIsIm9uTGVhdmUiLCJpcyIsImluZGV4T2YiLCJ1cGRhdGUiLCJvcmRlcmVkIiwic29ydCIsIml0ZW1BIiwiaXRlbUIiLCJsYXN0SXRlbSIsImZpbHRlciIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInVuZGVmaW5lZCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsInBhcmVudE5vZGUiLCJpbm5lckhlaWdodCIsImZvckVhY2giLCJnb1RvQ3VycmVudEhhc2giLCJjdXJyZW50SXRlbSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNjcm9sbCIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZO0FBQ1gsV0FBU0MsWUFBVCxHQUF3QjtBQUN0QixXQUFPQyxRQUFRQyxtQkFBUixFQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsT0FBT0MsUUFBUCxDQUFnQkMsSUFBaEIsS0FBeUIsV0FBN0IsRUFBMEM7QUFDeENDLGtCQUFjLEVBQWQsRUFBa0IsQ0FBbEI7QUFDRDs7QUFFRCxNQUFJQyxvQkFBb0I7QUFDdEJDLFdBQU8sRUFEZTtBQUV0QkMsZ0JBRnNCLHdCQUVUQyxRQUZTLEVBRUM7QUFDckIsV0FBSyxJQUFJQyxFQUFULElBQWUsS0FBS0gsS0FBcEIsRUFBMkI7QUFDekIsWUFBSSxDQUFDLEtBQUtBLEtBQUwsQ0FBV0ksY0FBWCxDQUEwQkQsRUFBMUIsQ0FBTCxFQUFvQztBQUNsQztBQUNEOztBQUVERCxpQkFBUyxLQUFLRixLQUFMLENBQVdHLEVBQVgsQ0FBVDtBQUNEO0FBQ0YsS0FWcUI7QUFXdEJFLFdBWHNCLG1CQVdkRixFQVhjLEVBV1ZHLElBWFUsRUFXSjtBQUNoQixVQUFJLENBQUMsS0FBS04sS0FBTCxD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QVg7QUFDRDtBQUNEakI7QUFDRCxLQUxEO0FBTUQ7O0FBRUQsTUFBSSxDQUFDMUYsY0FBTCxFQUFxQjtBQUNuQkQsTUFBRUksTUFBRixFQUFVMEcsTUFBVixDQUFpQm5CLE1BQWpCOztBQUVBM0YsTUFBRUksTUFBRixFQUFVMkcsSUFBVixDQUFlLHFCQUFmLEVBQXNDcEIsTUFBdEM7O0FBRUEzRixNQUFFSSxNQUFGLEVBQVUyRyxJQUFWLENBQWUscUJBQWYsRUFBc0NKLGVBQXRDOztBQUVBM0csTUFBRTJHLGVBQUY7QUFDRDtBQUNGLENBclRELEVBcVRHdEQsTUFyVEgiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJCkge1xuICBmdW5jdGlvbiBpbkN1c3RvbWl6ZXIoKSB7XG4gICAgcmV0dXJuIENvbGlicmkuaXNDdXN0b21pemVyUHJldmlldygpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAnI3BhZ2UtdG9wJykge1xuICAgIGNoYW5nZVVybEhhc2goJycsIDUpO1xuICB9XG5cbiAgdmFyIF9fdG9DaGVja09uU2Nyb2xsID0ge1xuICAgIGl0ZW1zOiB7fSxcbiAgICBlYWNoQ2F0ZWdvcnkoY2FsbGJhY2spIHtcbiAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sodGhpcy5pdGVtc1tpZF0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWRkSXRlbShpZCwgaXRlbSkge1xuICAgICAgaWYgKCF0aGlzLml0ZW1zW2lkXSkge1xuICAgICAgICB0aGlzLml0ZW1zW2lkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLml0ZW1zW2lkXS5wdXNoKGl0ZW0pO1xuICAgIH0sXG4gICAgYWxsKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5pdGVtc1tpZF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gIH07XG4gIHZhciBfX2FscmVhZHlTY3JvbGxpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnZXRTY3JvbGxUb1ZhbHVlKGVsRGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSAhaXNOYU4ocGFyc2VGbG9hdChlbERhdGEub3B0aW9ucy5vZmZzZXQpKVxuICAgICAgPyBlbERhdGEub3B0aW9ucy5vZmZzZXRcbiAgICAgIDogZWxEYXRhLm9wdGlvbnMub2Zmc2V0LmNhbGwoZWxEYXRhLnRhcmdldCk7XG4gICAgdmFyIHNjcm9sbFRvVmFsdWUgPVxuICAgICAgZWxEYXRhLnRhcmdldC5vZmZzZXQoKS50b3AgLSBvZmZzZXQgLSAkKCdib2R5Jykub2Zmc2V0KCkudG9wO1xuXG4gICAgcmV0dXJuIHNjcm9sbFRvVmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBjaGFuZ2VVcmxIYXNoKGhhc2gsIHRpbWVvdXQpIHtcbiAgICBpZiAoXG4gICAgICBoYXNoID09PSBsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJykgfHxcbiAgICAgIChoYXNoID09PSAncGFnZS10b3AnICYmICcnID09PSBsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJykpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgIGlmIChoYXNoID09PSAncGFnZS10b3AnKSB7XG4gICAgICAgICAgaGFzaCA9ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYXNoID0gJyMnICsgaGFzaDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzaCA9ICcgJztcbiAgICAgIH1cbiAgICAgIGlmIChoaXN0b3J5ICYmIGhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgaGFzaCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dCB8fCAxMDApO1xuICAgIC8qIHNhZmFyaSBpc3N1ZSBmaXhlZCBieSB0aHJvdHRlbGluZyB0aGUgZXZlbnQgKi9cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbEl0ZW0oZWxEYXRhKSB7XG4gICAgaWYgKF9fYWxyZWFkeVNjcm9sbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9fYWxyZWFkeVNjcm9sbGluZyA9IHRydWU7XG4gICAgdmFyIHNjcm9sbFRvVmFsdWUgPSBnZXRTY3JvbGxUb1ZhbHVlKGVsRGF0YSk7XG5cbiAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZShcbiAgICAgIHsgc2Nyb2xsVG9wOiBzY3JvbGxUb1ZhbHVlIH0sXG4gICAgICB7XG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGNvbXBsZXRlKCkge1xuICAgICAgICAgIC8vIGNoZWNrIGZvciBhbnkgdXBkYXRlc1xuICAgICAgICAgIHZhciBzY3JvbGxUb1ZhbHVlID0gZ2V0U2Nyb2xsVG9WYWx1ZShlbERhdGEpO1xuICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKFxuICAgICAgICAgICAgeyBzY3JvbGxUb3A6IHNjcm9sbFRvVmFsdWUgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgX19hbHJlYWR5U2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2hhbmdlVXJsSGFzaChlbERhdGEuaWQsIDUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZUJhc2VVcmwoKSB7XG4gICAgcmV0dXJuIFtsb2NhdGlvbi5wcm90b2NvbCwgJy8vJywgbG9jYXRpb24uaG9zdCwgbG9jYXRpb24ucGF0aG5hbWVdLmpvaW4oJycpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmFsbGJhY2tVcmxQYXJzZSh1cmwpIHtcbiAgICByZXR1cm4gdXJsLnNwbGl0KCc/JylbMF0uc3BsaXQoJyMnKVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFCYXNlVXJsKGVsZW1lbnQpIHtcbiAgICB2YXIgaHJlZiA9IGpRdWVyeShlbGVtZW50KVswXS5ocmVmIHx8ICcnO1xuICAgIHZhciB1cmwgPSAnIyc7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF91cmwgPSBuZXcgd2luZG93LlVSTChocmVmKTtcbiAgICAgIHVybCA9IFtfdXJsLnByb3RvY29sLCAnLy8nLCBfdXJsLmhvc3QsIF91cmwucGF0aG5hbWVdLmpvaW4oJycpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHVybCA9IGZhbGxiYWNrVXJsUGFyc2UoaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhcmdldEZvckVsKGVsZW1lbnQpIHtcbiAgICB2YXIgdGFyZ2V0SWQgPSAoZWxlbWVudC5hdHRyKCdocmVmJykgfHwgJycpLnNwbGl0KCcjJykucG9wKCksXG4gICAgICBocmVmQmFzZSA9IGdldEFCYXNlVXJsKGVsZW1lbnQpLFxuICAgICAgdGFyZ2V0ID0gbnVsbCxcbiAgICAgIHBhZ2VVUkwgPSBnZXRQYWdlQmFzZVVybCgpO1xuXG4gICAgaWYgKGhyZWZCYXNlLmxlbmd0aCAmJiBocmVmQmFzZSAhPT0gcGFnZVVSTCkge1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0SWQudHJpbSgpLmxlbmd0aCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGFyZ2V0ID0gJCgnW2lkPVwiJyArIHRhcmdldElkICsgJ1wiXScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc2Nyb2xsU3B5JywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgJC5mbi5zbW9vdGhTY3JvbGxBbmNob3IgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKGluQ3VzdG9taXplcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzID0gJCh0aGlzKTtcblxuICAgIG9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKFxuICAgICAge1xuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICB9LFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuXG4gICAgZWxlbWVudHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gJCh0aGlzKTtcblxuICAgICAgdmFyIHRhcmdldCA9IG9wdGlvbnMudGFyZ2V0IHx8IGdldFRhcmdldEZvckVsKGVsZW1lbnQpO1xuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbERhdGEgPSB7XG4gICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICB0YXJnZXRTZWw6XG4gICAgICAgICAgICBvcHRpb25zLnRhcmdldFNlbCB8fCAnW2lkPVwiJyArIHRhcmdldC5hdHRyKCdpZCcpLnRyaW0oKSArICdcIl0nLFxuICAgICAgICAgIGlkOiAodGFyZ2V0LmF0dHIoJ2lkJykgfHwgJycpLnRyaW0oKSxcbiAgICAgICAgfTtcblxuICAgICAgICBlbGVtZW50XG4gICAgICAgICAgLm9mZignY2xpY2suc21vb3RoLXNjcm9sbCB0YXAuc21vb3RoLXNjcm9sbCcpXG4gICAgICAgICAgLm9uKCdjbGljay5zbW9vdGgtc2Nyb2xsIHRhcC5zbW9vdGgtc2Nyb2xsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdza2lwLXNtb290aC1zY3JvbGwnKSB8fFxuICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuZGF0YSgnc2tpcC1zbW9vdGgtc2Nyb2xsJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmICghJCh0aGlzKS5kYXRhKCdhbGxvdy1wcm9wYWdhdGlvbicpKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY3JvbGxJdGVtKGVsRGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChlbERhdGEub3B0aW9ucy5jbGlja0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIGVsRGF0YS5vcHRpb25zLmNsaWNrQ2FsbGJhY2suY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgJC5mbi5zY3JvbGxTcHkgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKGluQ3VzdG9taXplcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzID0gJCh0aGlzKTtcbiAgICB2YXIgaWQgPSAnc3B5LScgKyBwYXJzZUludChEYXRlLm5vdygpICogTWF0aC5yYW5kb20oKSk7XG5cbiAgICBlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgbGV0IHNldHRpbmdzID0galF1ZXJ5LmV4dGVuZChcbiAgICAgICAge1xuICAgICAgICAgIG9uQ2hhbmdlKCkge30sXG4gICAgICAgICAgb25MZWF2ZSgpIHt9LFxuICAgICAgICAgIGNsaWNrQ2FsbGJhY2soKSB7fSxcbiAgICAgICAgICBzbW9vdGhTY3JvbGxBbmNob3I6IGZhbHNlLFxuICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChlbGVtZW50LmlzKCdhJykgJiYgKGVsZW1lbnQuYXR0cignaHJlZicpIHx8ICcnKS5pbmRleE9mKCcjJykgIT09IC0xKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXRGb3JFbChlbGVtZW50KTtcblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIGVsRGF0YSA9IHtcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBvcHRpb25zOiBzZXR0aW5ncyxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRhcmdldFNlbDogJ1tpZD1cIicgKyB0YXJnZXQuYXR0cignaWQnKS50cmltKCkgKyAnXCJdJyxcbiAgICAgICAgICAgIGlkOiB0YXJnZXQuYXR0cignaWQnKS50cmltKCksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBfX3RvQ2hlY2tPblNjcm9sbC5hZGRJdGVtKGlkLCBlbERhdGEpO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnc2Nyb2xsU3B5JywgZWxEYXRhKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLnNtb290aFNjcm9sbEFuY2hvcikge1xuICAgICAgICAgICAgZWxlbWVudC5zbW9vdGhTY3JvbGxBbmNob3Iob3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIF9fdG9DaGVja09uU2Nyb2xsLmVhY2hDYXRlZ29yeShmdW5jdGlvbihpdGVtcykge1xuICAgICAgdmFyIG9yZGVyZWQgPSBpdGVtcy5zb3J0KGZ1bmN0aW9uKGl0ZW1BLCBpdGVtQikge1xuICAgICAgICByZXR1cm4gaXRlbUEudGFyZ2V0Lm9mZnNldCgpLnRvcCAtIGl0ZW1CLnRhcmdldC5vZmZzZXQoKS50b3A7XG4gICAgICB9KTtcbiAgICAgIHZhciBsYXN0SXRlbSA9IG9yZGVyZWRcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbFkgPVxuICAgICAgICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgICAgOiAoXG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHxcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fFxuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgICkuc2Nyb2xsVG9wO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpdGVtLnRhcmdldC5vZmZzZXQoKS50b3AgPD0gc2Nyb2xsWSArIHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMjVcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAucG9wKCk7XG4gICAgICBvcmRlcmVkLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpZiAobGFzdEl0ZW0gJiYgaXRlbS5lbGVtZW50LmlzKGxhc3RJdGVtLmVsZW1lbnQpKSB7XG4gICAgICAgICAgY2hhbmdlVXJsSGFzaChpdGVtLmlkLCA1KTtcbiAgICAgICAgICBpdGVtLm9wdGlvbnMub25DaGFuZ2UuY2FsbChpdGVtLmVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0ub3B0aW9ucy5vbkxlYXZlLmNhbGwoaXRlbS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb1RvQ3VycmVudEhhc2goKSB7XG4gICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIHZhciBjdXJyZW50SXRlbSA9IF9fdG9DaGVja09uU2Nyb2xsLmFsbCgpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBpdGVtLnRhcmdldFNlbCA9PT0gJ1tpZD1cIicgKyBkZWNvZGVVUklDb21wb25lbnQoaGFzaCkudHJpbSgpICsgJ1wiXSdcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjdXJyZW50SXRlbS5sZW5ndGgpIHtcbiAgICAgICAgc2Nyb2xsSXRlbShjdXJyZW50SXRlbVswXSk7XG4gICAgICB9XG4gICAgICB1cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaW5DdXN0b21pemVyKCkpIHtcbiAgICAkKHdpbmRvdykuc2Nyb2xsKHVwZGF0ZSk7XG5cbiAgICAkKHdpbmRvdykuYmluZCgnc21vb3Roc2Nyb2xsLnVwZGF0ZScsIHVwZGF0ZSk7XG5cbiAgICAkKHdpbmRvdykuYmluZCgnc21vb3Roc2Nyb2xsLnVwZGF0ZScsIGdvVG9DdXJyZW50SGFzaCk7XG5cbiAgICAkKGdvVG9DdXJyZW50SGFzaCk7XG4gIH1cbn0pKGpRdWVyeSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9tZXNtZXJpemUtc21vb3Roc2Nyb2xsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_colibri__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__root_static_colibri__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__colibri_kube_component__ = __webpack_require__(96);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_1__colibri_kube_component__[\"a\"]; });\n\n\n\n__WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.registerPlugin = function (name, plugin, autoload) {\n  if (typeof name.componentName === 'function') {\n    autoload = plugin;\n    plugin = name;\n    name = plugin.componentName();\n  }\n\n  __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a[name] = plugin;\n  // Colibri[name].inherits(Colibri);\n  __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.Plugin.create(name);\n\n  if (autoload !== false) {\n    __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.Plugin.autoload(name);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvaW5kZXguanM/ZTEyMiJdLCJuYW1lcyI6WyJDb2xpYnJpIiwicmVnaXN0ZXJQbHVnaW4iLCJuYW1lIiwicGx1Z2luIiwiYXV0b2xvYWQiLCJjb21wb25lbnROYW1lIiwiUGx1Z2luIiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFFQUEsNERBQU9BLENBQUNDLGNBQVIsR0FBeUIsVUFBU0MsSUFBVCxFQUFlQyxNQUFmLEVBQXVCQyxRQUF2QixFQUFpQztBQUN4RCxNQUFJLE9BQU9GLEtBQUtHLGFBQVosS0FBOEIsVUFBbEMsRUFBOEM7QUFDNUNELGVBQVdELE1BQVg7QUFDQUEsYUFBU0QsSUFBVDtBQUNBQSxXQUFPQyxPQUFPRSxhQUFQLEVBQVA7QUFDRDs7QUFFREwsOERBQU9BLENBQUNFLElBQVIsSUFBZ0JDLE1BQWhCO0FBQ0E7QUFDQUgsOERBQU9BLENBQUNNLE1BQVIsQ0FBZUMsTUFBZixDQUFzQkwsSUFBdEI7O0FBRUEsTUFBSUUsYUFBYSxLQUFqQixFQUF3QjtBQUN0QkosZ0VBQU9BLENBQUNNLE1BQVIsQ0FBZUYsUUFBZixDQUF3QkYsSUFBeEI7QUFDRDtBQUNGLENBZEQiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29saWJyaSBmcm9tICdAcm9vdC9zdGF0aWMvY29saWJyaSc7XG5pbXBvcnQgQ29saWJyaUZyb250Q29tcG9uZW50IGZyb20gJy4vY29saWJyaS1rdWJlLWNvbXBvbmVudCc7XG5cbkNvbGlicmkucmVnaXN0ZXJQbHVnaW4gPSBmdW5jdGlvbihuYW1lLCBwbHVnaW4sIGF1dG9sb2FkKSB7XG4gIGlmICh0eXBlb2YgbmFtZS5jb21wb25lbnROYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXV0b2xvYWQgPSBwbHVnaW47XG4gICAgcGx1Z2luID0gbmFtZTtcbiAgICBuYW1lID0gcGx1Z2luLmNvbXBvbmVudE5hbWUoKTtcbiAgfVxuXG4gIENvbGlicmlbbmFtZV0gPSBwbHVnaW47XG4gIC8vIENvbGlicmlbbmFtZV0uaW5oZXJpdHMoQ29saWJyaSk7XG4gIENvbGlicmkuUGx1Z2luLmNyZWF0ZShuYW1lKTtcblxuICBpZiAoYXV0b2xvYWQgIT09IGZhbHNlKSB7XG4gICAgQ29saWJyaS5QbHVnaW4uYXV0b2xvYWQobmFtZSk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IENvbGlicmkgYXMgQ29saWJyaUZyb250ZW5kLCBDb2xpYnJpRnJvbnRDb21wb25lbnQgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvY29tbW9uL3NjcmlwdHMvYmFzZS9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BaseHandler = function () {\n  function BaseHandler(element, settings) {\n    _classCallCheck(this, BaseHandler);\n\n    this.settings = settings;\n    this.element = element;\n    this.isPlaying = false;\n\n    this.ready();\n  }\n\n  _createClass(BaseHandler, [{\n    key: 'ready',\n    value: function ready() {}\n  }, {\n    key: 'play',\n    value: function play() {}\n  }, {\n    key: 'pause',\n    value: function pause() {}\n  }, {\n    key: 'isPaused',\n    value: function isPaused() {}\n  }, {\n    key: 'setVideo',\n    value: function setVideo(node) {\n      node.className = 'colibri-video-background-item';\n      this.element.innerHTML = '';\n      this.element.appendChild(node);\n      this.addResizeBind();\n    }\n  }, {\n    key: 'trigger',\n    value: function trigger(name) {\n      var evt;\n\n      if ('function' === typeof window.Event) {\n        evt = new Event(name);\n      } else {\n        evt = document.createEvent('Event');\n        evt.initEvent(name, true, true);\n      }\n\n      this.element.dispatchEvent(evt);\n    }\n  }, {\n    key: 'loaded',\n    value: function loaded() {\n      this.trigger('video-bg-loaded');\n    }\n  }, {\n    key: 'addResizeBind',\n    value: function addResizeBind() {\n      var _this = this;\n\n      this.trigger('video-bg-resize');\n      this.onResize(function () {\n        _this.trigger('video-bg-resize');\n      });\n    }\n  }, {\n    key: 'onLoad',\n    value: function onLoad(callback) {\n      jQuery(this.element).on('video-bg-loaded', callback);\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize(callback) {\n      var debounce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\n      callback = jQuery.debounce(callback, debounce);\n      jQuery(window).resize(callback);\n      jQuery(window).on('orientationchange', callback);\n    }\n  }], [{\n    key: 'test',\n    value: function test() {\n      return false;\n    }\n  }]);\n\n  return BaseHandler;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (BaseHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvYmFzZS1oYW5kbGVyLmpzP2IxZWQiXSwibmFtZXMiOlsiQmFzZUhhbmRsZXIiLCJlbGVtZW50Iiwic2V0dGluZ3MiLCJpc1BsYXlpbmciLCJyZWFkeSIsIm5vZGUiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImFkZFJlc2l6ZUJpbmQiLCJuYW1lIiwiZXZ0Iiwid2luZG93IiwiRXZlbnQiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXIiLCJvblJlc2l6ZSIsImNhbGxiYWNrIiwialF1ZXJ5Iiwib24iLCJkZWJvdW5jZSIsInJlc2l6ZSJdLCJtYXBwaW5ncyI6Ijs7OztJQUFxQkEsVztBQUNuQix1QkFBWUMsT0FBWixFQUFxQkMsUUFBckIsRUFBK0I7QUFBQTs7QUFDN0IsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLEtBQWpCOztBQUVBLFNBQUtDLEtBQUw7QUFDRDs7Ozs0QkFFTyxDQUFFOzs7MkJBRUgsQ0FBRTs7OzRCQUVELENBQUU7OzsrQkFFQyxDQUFFOzs7NkJBRUpDLEksRUFBTTtBQUNiQSxXQUFLQyxTQUFMLEdBQWlCLCtCQUFqQjtBQUNBLFdBQUtMLE9BQUwsQ0FBYU0sU0FBYixHQUF5QixFQUF6QjtBQUNBLFdBQUtOLE9BQUwsQ0FBYU8sV0FBYixDQUF5QkgsSUFBekI7QUFDQSxXQUFLSSxhQUFMO0FBQ0Q7Ozs0QkFNT0MsSSxFQUFNO0FBQ1osVUFBSUMsR0FBSjs7QUFFQSxVQUFJLGVBQWUsT0FBT0MsT0FBT0MsS0FBakMsRUFBd0M7QUFDdENGLGNBQU0sSUFBSUUsS0FBSixDQUFVSCxJQUFWLENBQU47QUFDRCxPQUZELE1BRU87QUFDTEMsY0FBTUcsU0FBU0MsV0FBVCxDQUFxQixPQUFyQixDQUFOO0FBQ0FKLFlBQUlLLFNBQUosQ0FBY04sSUFBZCxFQUFvQixJQUFwQixFQUEwQixJQUExQjtBQUNEOztBQUVELFdBQUtULE9BQUwsQ0FBYWdCLGFBQWIsQ0FBMkJOLEdBQTNCO0FBQ0Q7Ozs2QkFFUTtBQUNQLFdBQUtPLE9BQUwsQ0FBYSxpQkFBYjtBQUNEOzs7b0NBRWU7QUFBQTs7QUFDZCxXQUFLQSxPQUFMLENBQWEsaUJBQWI7QUFDQSxXQUFLQyxRQUFMLENBQWMsWUFBTTtBQUNsQixjQUFLRCxPQUFMLENBQWEsaUJBQWI7QUFDRCxPQUZEO0FBR0Q7OzsyQkFFTUUsUSxFQUFVO0FBQ2ZDLGFBQU8sS0FBS3BCLE9BQVosRUFBcUJxQixFQUFyQixDQUF3QixpQkFBeEIsRUFBMkNGLFFBQTNDO0FBQ0Q7Ozs2QkFFUUEsUSxFQUEwQjtBQUFBLFVBQWhCRyxRQUFnQix1RUFBTCxHQUFLOztBQUNqQ0gsaUJBQVdDLE9BQU9FLFFBQVAsQ0FBZ0JILFFBQWhCLEVBQTBCRyxRQUExQixDQUFYO0FBQ0FGLGFBQU9ULE1BQVAsRUFBZVksTUFBZixDQUFzQkosUUFBdEI7QUFDQUMsYUFBT1QsTUFBUCxFQUFlVSxFQUFmLENBQWtCLG1CQUFsQixFQUF1Q0YsUUFBdkM7QUFDRDs7OzJCQXBDYTtBQUNaLGFBQU8sS0FBUDtBQUNEOzs7Ozs7QUExQmtCcEIsb0UiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHNldHRpbmdzKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIHRoaXMucmVhZHkoKTtcbiAgfVxuXG4gIHJlYWR5KCkge31cblxuICBwbGF5KCkge31cblxuICBwYXVzZSgpIHt9XG5cbiAgaXNQYXVzZWQoKSB7fVxuXG4gIHNldFZpZGVvKG5vZGUpIHtcbiAgICBub2RlLmNsYXNzTmFtZSA9ICdjb2xpYnJpLXZpZGVvLWJhY2tncm91bmQtaXRlbSc7XG4gICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB0aGlzLmFkZFJlc2l6ZUJpbmQoKTtcbiAgfVxuXG4gIHN0YXRpYyB0ZXN0KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRyaWdnZXIobmFtZSkge1xuICAgIHZhciBldnQ7XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHdpbmRvdy5FdmVudCkge1xuICAgICAgZXZ0ID0gbmV3IEV2ZW50KG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGxvYWRlZCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3ZpZGVvLWJnLWxvYWRlZCcpO1xuICB9XG5cbiAgYWRkUmVzaXplQmluZCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3ZpZGVvLWJnLXJlc2l6ZScpO1xuICAgIHRoaXMub25SZXNpemUoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKCd2aWRlby1iZy1yZXNpemUnKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uTG9hZChjYWxsYmFjaykge1xuICAgIGpRdWVyeSh0aGlzLmVsZW1lbnQpLm9uKCd2aWRlby1iZy1sb2FkZWQnLCBjYWxsYmFjayk7XG4gIH1cblxuICBvblJlc2l6ZShjYWxsYmFjaywgZGVib3VuY2UgPSAxMDApIHtcbiAgICBjYWxsYmFjayA9IGpRdWVyeS5kZWJvdW5jZShjYWxsYmFjaywgZGVib3VuY2UpO1xuICAgIGpRdWVyeSh3aW5kb3cpLnJlc2l6ZShjYWxsYmFjayk7XG4gICAgalF1ZXJ5KHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlJywgY2FsbGJhY2spO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvYmFzZS1oYW5kbGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'offcanvas';\n\n  var Component = function Component(element, options) {\n    this.namespace = 'offcanvas';\n    this.defaults = {\n      target: null, // selector\n      push: true, // boolean\n      width: '250px', // string\n      direction: 'left', // string: left or right\n      toggleEvent: 'click',\n      clickOutside: true, // boolean\n      animationOpen: 'slideInLeft',\n      animationClose: 'slideOutLeft',\n      callbacks: ['open', 'opened', 'close', 'closed'],\n      offcanvasOverlayId: null,\n      $overlayElement: null,\n      targetId: null\n    };\n\n    console.log('offcanvas script');\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Services\n    this.utils = new Colibri.Utils();\n    this.detect = new Colibri.Detect();\n\n    // Initialization\n    this.start();\n  };\n\n  // Functionality\n  Component.prototype = {\n    start: function start() {\n      if (!this.hasTarget()) {\n        return;\n      }\n      var overlayId = this.opts.offcanvasOverlayId;\n      var $overlayElement = $('#' + overlayId + '.offscreen-overlay');\n      this.opts.$overlayElement = $overlayElement;\n\n      // this.stop();\n\n      this.buildTargetWidth();\n      this.buildAnimationDirection();\n\n      this.$close = this.getCloseLink();\n      this.$element.on(this.opts.toggleEvent + '.' + this.namespace, $.proxy(this.toggle, this));\n      this.$target.addClass('offcanvas');\n      this.$target.trigger('colibri.offcanvas.ready');\n\n      this.moveOffcanvasToBody();\n\n      this.addOffcanvasOverlayLogic();\n    },\n    stop: function stop() {\n      this.closeAll();\n      this.removeOffcanvasElements();\n      this.$element.off('.' + this.namespace);\n      if (this.$close) {\n        this.$close.off('.' + this.namespace);\n      }\n      $(document).off('.' + this.namespace);\n    },\n    removeOffcanvasElements: function removeOffcanvasElements() {\n      // var targetId = this.opts.targetId;\n      // var $targetElement = $('#' + targetId + '.h-offcanvas-panel');\n\n      this.$target.remove();\n      this.opts.$overlayElement.remove();\n\n      // if ($targetElement && $targetElement.length > 0) {\n      //   for (var i = 0; i < $targetElement.length; i++) {\n      //     var offcanvasPanel = $targetElement[i];\n      //     var offcanvasPanelParent = offcanvasPanel.parentNode;\n      //     if (offcanvasPanelParent && offcanvasPanelParent.tagName === 'BODY') {\n      //       offcanvasPanelParent.removeChild(offcanvasPanel);\n      //     }\n      //   }\n      // }\n      //\n      // var overlayElements = this.opts.$overlayElement;\n      // if (overlayElements && overlayElements.length > 0) {\n      //   for (var j = 0; j < overlayElements.length; j++) {\n      //     var overlayElement = overlayElements[j];\n      //     var overlayElementParent = overlayElement.parentNode;\n      //     if (overlayElementParent && overlayElementParent.tagName === 'BODY') {\n      //       overlayElementParent.removeChild(overlayElement);\n      //     }\n      //   }\n      // }\n    },\n    moveOffcanvasToBody: function moveOffcanvasToBody() {\n      var offcanvasPanel = this.$target[0];\n      document.body.appendChild(offcanvasPanel);\n\n      var overlayElement = this.opts.$overlayElement[0];\n      document.body.appendChild(overlayElement);\n    },\n    addOffcanvasOverlayLogic: function addOffcanvasOverlayLogic() {\n      var $overlayElement = this.opts.$overlayElement;\n      var $offCanvasWrapper = this.$target;\n\n      if ($offCanvasWrapper.length) {\n        $overlayElement.on('scroll touchmove mousewheel', function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        });\n\n        $offCanvasWrapper.on('colibri.offcanvas.open', function () {\n          $overlayElement.addClass('h-offcanvas-opened');\n        });\n\n        $offCanvasWrapper.on('colibri.offcanvas.close', function () {\n          $overlayElement.removeClass('h-offcanvas-opened');\n        });\n      }\n    },\n    toggle: function toggle(e) {\n      if (this.isOpened()) {\n        this.close(e);\n      } else {\n        this.open(e);\n      }\n    },\n    buildTargetWidth: function buildTargetWidth() {\n      this.opts.width = $(window).width() < parseInt(this.opts.width) ? '100%' : this.opts.width;\n    },\n    buildAnimationDirection: function buildAnimationDirection() {\n      if (this.opts.direction === 'right') {\n        this.opts.animationOpen = 'slideInRight';\n        this.opts.animationClose = 'slideOutRight';\n      }\n    },\n    getCloseLink: function getCloseLink() {\n      return this.$target.find('.close');\n    },\n    open: function open(e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      if (!this.isOpened()) {\n        this.closeAll();\n        this.callback('open');\n\n        this.$target.addClass('offcanvas-' + this.opts.direction);\n        this.$target.css('width', Math.min(parseInt(this.opts.width), window.innerWidth - 100));\n        this.$target.css('right', '-' + Math.min(parseInt(this.opts.width), window.innerWidth - 100));\n\n        this.pushBody();\n\n        this.$target.trigger('colibri.offcanvas.open');\n        // this.$target.animation(this.opts.animationOpen, $.proxy(this.onOpened, this));\n        Colibri.animate(this.$target, this.opts.animationOpen, $.proxy(this.onOpened, this));\n        this.$element.trigger('colibri.offcanvas.open');\n      }\n    },\n    closeAll: function closeAll() {\n      var $elms = $(document).find('.offcanvas');\n      if ($elms.length !== 0) {\n        $elms.each(function () {\n          var $el = $(this);\n\n          if ($el.hasClass('open')) {\n            $el.css('width', '');\n            //.animation('hide');\n            Colibri.animate($el, 'hide');\n            $el.removeClass('open offcanvas-left offcanvas-right');\n          }\n        });\n\n        $(document).off('.' + this.namespace);\n        $('body').css('left', '');\n      }\n    },\n    close: function close(e) {\n      if (e) {\n        var $el = $(e.target);\n        var isTag = $el[0].tagName === 'A' || $el[0].tagName === 'BUTTON' || $el.parents('a').length;\n        if (isTag && $el.closest('.offcanvas').length !== 0 && !$el.hasClass('close')) {\n          return;\n        }\n\n        e.preventDefault();\n      }\n\n      if (this.isOpened()) {\n        // this.utils.enableBodyScroll();\n        this.callback('close');\n        this.pullBody();\n        this.$target.trigger('colibri.offcanvas.close');\n        // this.$target.animation(this.opts.animationClose, $.proxy(this.onClosed, this));\n        Colibri.animate(this.$target, this.opts.animationClose, $.proxy(this.onClosed, this));\n      }\n    },\n    isOpened: function isOpened() {\n      return this.$target.hasClass('open');\n    },\n    onOpened: function onOpened() {\n      if (this.opts.clickOutside) {\n        $(document).on('click.' + this.namespace + ' tap.' + this.namespace, $.proxy(this.close, this));\n      }\n      if (this.detect.isMobileScreen()) {\n        $('html').addClass('no-scroll');\n      }\n\n      $(document).on('keyup.' + this.namespace, $.proxy(this.handleKeyboard, this));\n      this.$close.on('click.' + this.namespace, $.proxy(this.close, this));\n\n      // this.utils.disableBodyScroll();\n      this.$target.addClass('open');\n      this.callback('opened');\n    },\n    onClosed: function onClosed() {\n      if (this.detect.isMobileScreen()) {\n        $('html').removeClass('no-scroll');\n      }\n\n      this.$target.css('width', '').removeClass('offcanvas-' + this.opts.direction);\n\n      this.$close.off('.' + this.namespace);\n      $(document).off('.' + this.namespace);\n\n      this.$target.removeClass('open');\n      this.callback('closed');\n\n      this.$target.trigger('colibri.offcanvas.closed');\n    },\n    handleKeyboard: function handleKeyboard(e) {\n      if (e.which === 27) {\n        this.close();\n      }\n    },\n    pullBody: function pullBody() {\n      if (this.opts.push) {\n        $('body').animate({ left: 0 }, 350, function () {\n          $(this).removeClass('offcanvas-push-body');\n        });\n      }\n    },\n    pushBody: function pushBody() {\n      if (this.opts.push) {\n        var properties = this.opts.direction === 'left' ? { left: this.opts.width } : { left: '-' + this.opts.width };\n        $('body').addClass('offcanvas-push-body').animate(properties, 200);\n      }\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(91);
__webpack_require__(112);
__webpack_require__(113);
module.exports = __webpack_require__(114);


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_libraries_jquery_extensions__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_libraries_mesmerize_smoothscroll__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_libraries_mesmerize_smoothscroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__common_libraries_mesmerize_smoothscroll__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_colibri_static_masonryColibri__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_colibri_static_masonryColibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__assets_colibri_static_masonryColibri__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__page_components_common_scripts_base___ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__kube_slideshow_customizable_slideshow__ = __webpack_require__(97);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__kube_video_background_customizable_video_background__ = __webpack_require__(100);\n\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_4__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].registerPlugin(__WEBPACK_IMPORTED_MODULE_5__kube_slideshow_customizable_slideshow__[\"a\" /* default */]);\n__WEBPACK_IMPORTED_MODULE_4__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].registerPlugin(__WEBPACK_IMPORTED_MODULE_6__kube_video_background_customizable_video_background__[\"a\" /* default */]);\n\n__WEBPACK_IMPORTED_MODULE_4__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].getData = function (id) {\n    if (window.colibriFrontendData && window.colibriFrontendData[id]) {\n        return window.colibriFrontendData[id];\n    }\n\n    return {};\n};\n\nwindow.Colibri = __WEBPACK_IMPORTED_MODULE_4__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */];\n\n__webpack_require__(106);\n__webpack_require__(62);\n\n//\n// // sticky\n//\n__webpack_require__(107);\n__webpack_require__(108);\n__webpack_require__(109);\n__webpack_require__(110);\n__webpack_require__(111);\n__webpack_require__(62);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL3RoZW1lLmpzP2U4NzAiXSwibmFtZXMiOlsiQ29saWJyaUZyb250ZW5kIiwicmVnaXN0ZXJQbHVnaW4iLCJDdXN0b21pemFibGVTbGlkZXNob3ciLCJDdXN0b21pemFibGVWaWRlb0JhY2tncm91bmQiLCJnZXREYXRhIiwiaWQiLCJ3aW5kb3ciLCJjb2xpYnJpRnJvbnRlbmREYXRhIiwiQ29saWJyaSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTs7QUFFQUEsOEZBQWVBLENBQUNDLGNBQWhCLENBQStCQyx1RkFBL0I7QUFDQUYsOEZBQWVBLENBQUNDLGNBQWhCLENBQStCRSxxR0FBL0I7O0FBRUFILDhGQUFlQSxDQUFDSSxPQUFoQixHQUEwQixVQUFVQyxFQUFWLEVBQWM7QUFDcEMsUUFBSUMsT0FBT0MsbUJBQVAsSUFBOEJELE9BQU9DLG1CQUFQLENBQTJCRixFQUEzQixDQUFsQyxFQUFrRTtBQUM5RCxlQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkYsRUFBM0IsQ0FBUDtBQUNIOztBQUVELFdBQU8sRUFBUDtBQUNILENBTkQ7O0FBU0FDLE9BQU9FLE9BQVAsR0FBaUJSLDhGQUFqQjs7QUFLQVMsbUJBQU9BLENBQUMsR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxFQUFSOztBQUVBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEdBQVI7QUFDQUEsbUJBQU9BLENBQUMsR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEdBQVI7QUFDQUEsbUJBQU9BLENBQUMsRUFBUiIsImZpbGUiOiI5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIkAvY29tbW9uL2xpYnJhcmllcy9qcXVlcnktZXh0ZW5zaW9uc1wiO1xuaW1wb3J0IFwiQC9jb21tb24vbGlicmFyaWVzL2RldGVjdC1lbGVtZW50LXJlc2l6ZVwiO1xuaW1wb3J0IFwiQC9jb21tb24vbGlicmFyaWVzL21lc21lcml6ZS1zbW9vdGhzY3JvbGxcIjtcbmltcG9ydCBcIkAvY29tbW9uL2xpYnJhcmllcy9tZXNtZXJpemUtc21vb3Roc2Nyb2xsXCI7XG5pbXBvcnQgXCIuLi8uLi8uLi8uLi9hc3NldHMvY29saWJyaS1zdGF0aWMvbWFzb25yeUNvbGlicmlcIjtcblxuXG5pbXBvcnQge0NvbGlicmlGcm9udGVuZH0gZnJvbSBcIkAvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvXCI7XG5pbXBvcnQgQ3VzdG9taXphYmxlU2xpZGVzaG93IGZyb20gXCIuL2t1YmUvc2xpZGVzaG93L2N1c3RvbWl6YWJsZS1zbGlkZXNob3dcIjtcbmltcG9ydCBDdXN0b21pemFibGVWaWRlb0JhY2tncm91bmQgZnJvbSBcIi4va3ViZS92aWRlby1iYWNrZ3JvdW5kL2N1c3RvbWl6YWJsZS12aWRlby1iYWNrZ3JvdW5kXCI7XG5cbkNvbGlicmlGcm9udGVuZC5yZWdpc3RlclBsdWdpbihDdXN0b21pemFibGVTbGlkZXNob3cpO1xuQ29saWJyaUZyb250ZW5kLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbWl6YWJsZVZpZGVvQmFja2dyb3VuZCk7XG5cbkNvbGlicmlGcm9udGVuZC5nZXREYXRhID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKHdpbmRvdy5jb2xpYnJpRnJvbnRlbmREYXRhICYmIHdpbmRvdy5jb2xpYnJpRnJvbnRlbmREYXRhW2lkXSkge1xuICAgICAgICByZXR1cm4gd2luZG93LmNvbGlicmlGcm9udGVuZERhdGFbaWRdO1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbn07XG5cblxud2luZG93LkNvbGlicmkgPSBDb2xpYnJpRnJvbnRlbmQ7XG5cblxuXG5cbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9tZW51L3NjcmlwdHMvZHJvcGRvd24tbWVudVwiKTtcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9tZW51L3NjcmlwdHMvb2ZmY2FudmFzXCIpO1xuXG4vL1xuLy8gLy8gc3RpY2t5XG4vL1xucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL25hdmlnYXRpb24vc2NyaXB0cy9uYXZpZ2F0aW9uXCIpO1xucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL25hdmlnYXRpb24vc2NyaXB0cy9maXh0b1wiKTtcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NjcmlwdHMvb3ZlcmxhcFwiKTtcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9tYXNvbnJ5LmpzXCIpO1xucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL2Zvb3Rlci9zY3JpcHRzL2Zvb3Rlci1wYXJhbGF4LmpzXCIpO1xucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL21lbnUvc2NyaXB0cy9vZmZjYW52YXMuanNcIik7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL3NyYy90aGVtZS9qcy90aGVtZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91\n");

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_debounce__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_debounce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_debounce__);\n\n(function ($) {\n  if (!$.throttle) {\n    $.throttle = function (fn, threshhold, scope) {\n      threshhold || (threshhold = 250);\n      var last, deferTimer;\n      return function () {\n        var context = scope || this;\n\n        var now = +new Date(),\n            args = arguments;\n        if (last && now < last + threshhold) {\n          // hold on to it\n          clearTimeout(deferTimer);\n          deferTimer = setTimeout(function () {\n            last = now;\n            fn.apply(context, args);\n          }, threshhold);\n        } else {\n          last = now;\n          fn.apply(context, args);\n        }\n      };\n    };\n  }\n\n  if (!$.debounce) {\n    $.debounce = __WEBPACK_IMPORTED_MODULE_0_lodash_debounce___default.a;\n    // $.debounce = function(func, wait, immediate) {\n    //   var timeout;\n    //   return function() {\n    //     var context = this,\n    //       args = arguments;\n    //     var later = function() {\n    //       timeout = null;\n    //       if (!immediate) {\n    //         func.apply(context, args);\n    //       }\n    //     };\n    //     var callNow = immediate && !timeout;\n    //     clearTimeout(timeout);\n    //     timeout = setTimeout(later, wait);\n    //     if (callNow) {\n    //       func.apply(context, args);\n    //     }\n    //   };\n    // };\n  }\n  if (!$.event.special.tap) {\n    $.event.special.tap = {\n      setup: function setup(data, namespaces) {\n        var $elem = $(this);\n        $elem.bind('touchstart', $.event.special.tap.handler).bind('touchmove', $.event.special.tap.handler).bind('touchend', $.event.special.tap.handler);\n      },\n      teardown: function teardown(namespaces) {\n        var $elem = $(this);\n        $elem.unbind('touchstart', $.event.special.tap.handler).unbind('touchmove', $.event.special.tap.handler).unbind('touchend', $.event.special.tap.handler);\n      },\n      handler: function handler(event) {\n        var $elem = $(this);\n        $elem.data(event.type, 1);\n        if (event.type === 'touchend' && !$elem.data('touchmove')) {\n          event.type = 'tap';\n          $.event.handle.apply(this, arguments);\n        } else if ($elem.data('touchend')) {\n          $elem.removeData('touchstart touchmove touchend');\n        }\n      }\n    };\n  }\n})(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9qcXVlcnktZXh0ZW5zaW9ucy5qcz9jMWQyIl0sIm5hbWVzIjpbIiQiLCJ0aHJvdHRsZSIsImZuIiwidGhyZXNoaG9sZCIsInNjb3BlIiwibGFzdCIsImRlZmVyVGltZXIiLCJjb250ZXh0Iiwibm93IiwiRGF0ZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJkZWJvdW5jZSIsImV2ZW50Iiwic3BlY2lhbCIsInRhcCIsInNldHVwIiwiZGF0YSIsIm5hbWVzcGFjZXMiLCIkZWxlbSIsImJpbmQiLCJoYW5kbGVyIiwidGVhcmRvd24iLCJ1bmJpbmQiLCJ0eXBlIiwiaGFuZGxlIiwicmVtb3ZlRGF0YSIsIndpbmRvdyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsQ0FBQyxVQUFTQSxDQUFULEVBQVk7QUFDWCxNQUFJLENBQUNBLEVBQUVDLFFBQVAsRUFBaUI7QUFDZkQsTUFBRUMsUUFBRixHQUFhLFVBQVNDLEVBQVQsRUFBYUMsVUFBYixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDM0NELHFCQUFlQSxhQUFhLEdBQTVCO0FBQ0EsVUFBSUUsSUFBSixFQUFVQyxVQUFWO0FBQ0EsYUFBTyxZQUFXO0FBQ2hCLFlBQUlDLFVBQVVILFNBQVMsSUFBdkI7O0FBRUEsWUFBSUksTUFBTSxDQUFDLElBQUlDLElBQUosRUFBWDtBQUFBLFlBQ0VDLE9BQU9DLFNBRFQ7QUFFQSxZQUFJTixRQUFRRyxNQUFNSCxPQUFPRixVQUF6QixFQUFxQztBQUNuQztBQUNBUyx1QkFBYU4sVUFBYjtBQUNBQSx1QkFBYU8sV0FBVyxZQUFXO0FBQ2pDUixtQkFBT0csR0FBUDtBQUNBTixlQUFHWSxLQUFILENBQVNQLE9BQVQsRUFBa0JHLElBQWxCO0FBQ0QsV0FIWSxFQUdWUCxVQUhVLENBQWI7QUFJRCxTQVBELE1BT087QUFDTEUsaUJBQU9HLEdBQVA7QUFDQU4sYUFBR1ksS0FBSCxDQUFTUCxPQUFULEVBQWtCRyxJQUFsQjtBQUNEO0FBQ0YsT0FoQkQ7QUFpQkQsS0FwQkQ7QUFxQkQ7O0FBRUQsTUFBSSxDQUFDVixFQUFFZSxRQUFQLEVBQWlCO0FBQ2ZmLE1BQUVlLFFBQUYsR0FBYUEsdURBQWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBQ0QsTUFBSSxDQUFDZixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFyQixFQUEwQjtBQUN4QmxCLE1BQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLEdBQXNCO0FBQ3BCQyxXQURvQixpQkFDZEMsSUFEYyxFQUNSQyxVQURRLEVBQ0k7QUFDdEIsWUFBSUMsUUFBUXRCLEVBQUUsSUFBRixDQUFaO0FBQ0FzQixjQUNHQyxJQURILENBQ1EsWUFEUixFQUNzQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUQxQyxFQUVHRCxJQUZILENBRVEsV0FGUixFQUVxQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUZ6QyxFQUdHRCxJQUhILENBR1EsVUFIUixFQUdvQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUh4QztBQUlELE9BUG1CO0FBU3BCQyxjQVRvQixvQkFTWEosVUFUVyxFQVNDO0FBQ25CLFlBQUlDLFFBQVF0QixFQUFFLElBQUYsQ0FBWjtBQUNBc0IsY0FDR0ksTUFESCxDQUNVLFlBRFYsRUFDd0IxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FENUMsRUFFR0UsTUFGSCxDQUVVLFdBRlYsRUFFdUIxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FGM0MsRUFHR0UsTUFISCxDQUdVLFVBSFYsRUFHc0IxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FIMUM7QUFJRCxPQWZtQjtBQWlCcEJBLGFBakJvQixtQkFpQlpSLEtBakJZLEVBaUJMO0FBQ2IsWUFBSU0sUUFBUXRCLEVBQUUsSUFBRixDQUFaO0FBQ0FzQixjQUFNRixJQUFOLENBQVdKLE1BQU1XLElBQWpCLEVBQXVCLENBQXZCO0FBQ0EsWUFBSVgsTUFBTVcsSUFBTixLQUFlLFVBQWYsSUFBNkIsQ0FBQ0wsTUFBTUYsSUFBTixDQUFXLFdBQVgsQ0FBbEMsRUFBMkQ7QUFDekRKLGdCQUFNVyxJQUFOLEdBQWEsS0FBYjtBQUNBM0IsWUFBRWdCLEtBQUYsQ0FBUVksTUFBUixDQUFlZCxLQUFmLENBQXFCLElBQXJCLEVBQTJCSCxTQUEzQjtBQUNELFNBSEQsTUFHTyxJQUFJVyxNQUFNRixJQUFOLENBQVcsVUFBWCxDQUFKLEVBQTRCO0FBQ2pDRSxnQkFBTU8sVUFBTixDQUFpQiwrQkFBakI7QUFDRDtBQUNGO0FBMUJtQixLQUF0QjtBQTRCRDtBQUNGLENBN0VELEVBNkVHQyxPQUFPQyxNQTdFViIsImZpbGUiOiI5Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuKGZ1bmN0aW9uKCQpIHtcbiAgaWYgKCEkLnRocm90dGxlKSB7XG4gICAgJC50aHJvdHRsZSA9IGZ1bmN0aW9uKGZuLCB0aHJlc2hob2xkLCBzY29wZSkge1xuICAgICAgdGhyZXNoaG9sZCB8fCAodGhyZXNoaG9sZCA9IDI1MCk7XG4gICAgICB2YXIgbGFzdCwgZGVmZXJUaW1lcjtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICAgICAgIHZhciBub3cgPSArbmV3IERhdGUoKSxcbiAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAobGFzdCAmJiBub3cgPCBsYXN0ICsgdGhyZXNoaG9sZCkge1xuICAgICAgICAgIC8vIGhvbGQgb24gdG8gaXRcbiAgICAgICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgICAgICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCEkLmRlYm91bmNlKSB7XG4gICAgJC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIC8vICQuZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAvLyAgIHZhciB0aW1lb3V0O1xuICAgIC8vICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgLy8gICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAvLyAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgLy8gICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAvLyAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICB9O1xuICAgIC8vICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAvLyAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIC8vICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgLy8gICAgIGlmIChjYWxsTm93KSB7XG4gICAgLy8gICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfTtcbiAgICAvLyB9O1xuICB9XG4gIGlmICghJC5ldmVudC5zcGVjaWFsLnRhcCkge1xuICAgICQuZXZlbnQuc3BlY2lhbC50YXAgPSB7XG4gICAgICBzZXR1cChkYXRhLCBuYW1lc3BhY2VzKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICAgICRlbGVtXG4gICAgICAgICAgLmJpbmQoJ3RvdWNoc3RhcnQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpXG4gICAgICAgICAgLmJpbmQoJ3RvdWNobW92ZScsICQuZXZlbnQuc3BlY2lhbC50YXAuaGFuZGxlcilcbiAgICAgICAgICAuYmluZCgndG91Y2hlbmQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgdGVhcmRvd24obmFtZXNwYWNlcykge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpO1xuICAgICAgICAkZWxlbVxuICAgICAgICAgIC51bmJpbmQoJ3RvdWNoc3RhcnQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpXG4gICAgICAgICAgLnVuYmluZCgndG91Y2htb3ZlJywgJC5ldmVudC5zcGVjaWFsLnRhcC5oYW5kbGVyKVxuICAgICAgICAgIC51bmJpbmQoJ3RvdWNoZW5kJywgJC5ldmVudC5zcGVjaWFsLnRhcC5oYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgIGhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKTtcbiAgICAgICAgJGVsZW0uZGF0YShldmVudC50eXBlLCAxKTtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgISRlbGVtLmRhdGEoJ3RvdWNobW92ZScpKSB7XG4gICAgICAgICAgZXZlbnQudHlwZSA9ICd0YXAnO1xuICAgICAgICAgICQuZXZlbnQuaGFuZGxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJGVsZW0uZGF0YSgndG91Y2hlbmQnKSkge1xuICAgICAgICAgICRlbGVtLnJlbW92ZURhdGEoJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufSkod2luZG93LmpRdWVyeSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9qcXVlcnktZXh0ZW5zaW9ucy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92\n");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93\n");

/***/ }),
/* 94 */
/***/ (function(module, exports) {

eval("/**\n * Detect Element Resize\n *\n * https://github.com/sdecima/javascript-detect-element-resize\n * Sebastian Decima\n *\n * version: 0.5.3\n **/\n\nvar attachEvent = document.attachEvent,\n    stylesCreated = false;\n\nfunction resetTriggers(element) {\n  var triggers = element.__resizeTriggers__,\n      expand = triggers.firstElementChild,\n      contract = triggers.lastElementChild,\n      expandChild = expand.firstElementChild;\n  contract.scrollLeft = contract.scrollWidth;\n  contract.scrollTop = contract.scrollHeight;\n  expandChild.style.width = expand.offsetWidth + 1 + 'px';\n  expandChild.style.height = expand.offsetHeight + 1 + 'px';\n  expand.scrollLeft = expand.scrollWidth;\n  expand.scrollTop = expand.scrollHeight;\n}\n\nfunction checkTriggers(element) {\n  return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;\n}\n\nfunction scrollListener(e) {\n  var element = this;\n  resetTriggers(this);\n  if (this.__resizeRAF__) {\n    cancelFrame(this.__resizeRAF__);\n  }\n  this.__resizeRAF__ = requestFrame(function () {\n    if (checkTriggers(element)) {\n      element.__resizeLast__.width = element.offsetWidth;\n      element.__resizeLast__.height = element.offsetHeight;\n      element.__resizeListeners__.forEach(function (fn) {\n        fn.call(element, e);\n      });\n    }\n  });\n}\n\nif (!attachEvent) {\n  var requestFrame = function () {\n    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {\n      return window.setTimeout(fn, 20);\n    };\n    return function (fn) {\n      return raf(fn);\n    };\n  }();\n\n  var cancelFrame = function () {\n    var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n    return function (id) {\n      return cancel(id);\n    };\n  }();\n\n  /* Detect CSS Animations support to detect element display/re-attach */\n  var animation = false,\n      animationstring = 'animation',\n      keyframeprefix = '',\n      animationstartevent = 'animationstart',\n      domPrefixes = 'Webkit Moz O ms'.split(' '),\n      startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),\n      pfx = '';\n  {\n    var elm = document.createElement('fakeelement');\n    if (elm.style.animationName !== undefined) {\n      animation = true;\n    }\n\n    if (animation === false) {\n      for (var i = 0; i < domPrefixes.length; i++) {\n        if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\n          pfx = domPrefixes[i];\n          animationstring = pfx + 'Animation';\n          keyframeprefix = '-' + pfx.toLowerCase() + '-';\n          animationstartevent = startEvents[i];\n          animation = true;\n          break;\n        }\n      }\n    }\n  }\n\n  var animationName = 'resizeanim';\n  var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';\n  var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';\n}\n\nfunction createStyles() {\n  if (!stylesCreated) {\n    //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360\n    var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \" \"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',\n        head = document.head || document.getElementsByTagName('head')[0],\n        style = document.createElement('style');\n\n    style.type = 'text/css';\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n\n    head.appendChild(style);\n    stylesCreated = true;\n  }\n}\n\nwindow.addResizeListener = function (element, fn) {\n  if (attachEvent) {\n    element.attachEvent('onresize', fn);\n  } else {\n    if (!element.__resizeTriggers__) {\n      if (getComputedStyle(element).position == 'static') {\n        element.style.position = 'relative';\n      }\n      createStyles();\n      element.__resizeLast__ = {};\n      element.__resizeListeners__ = [];\n      (element.__resizeTriggers__ = document.createElement('div')).className = 'resize-triggers';\n      element.__resizeTriggers__.innerHTML = '<div class=\"expand-trigger\"><div></div></div>' + '<div class=\"contract-trigger\"></div>';\n      element.appendChild(element.__resizeTriggers__);\n      resetTriggers(element);\n      element.addEventListener('scroll', scrollListener, true);\n\n      /* Listen for a css animation to detect element display/re-attach */\n      animationstartevent && element.__resizeTriggers__.addEventListener(animationstartevent, function (e) {\n        if (e.animationName == animationName) {\n          resetTriggers(element);\n        }\n      });\n    }\n    element.__resizeListeners__.push(fn);\n  }\n};\n\nwindow.removeResizeListener = function (element, fn) {\n  if (attachEvent) {\n    element.detachEvent('onresize', fn);\n  } else {\n    if (!(element && element.__resizeListeners__ && element.__resizeTriggers__)) {\n      return;\n    }\n    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n    if (!element.__resizeListeners__.length) {\n      element.removeEventListener('scroll', scrollListener);\n      element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n");

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__factory, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__factory, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\r\n * Masonry PACKAGED v4.2.2\r\n * Cascading grid layout library\r\n * https://masonry.desandro.com\r\n * MIT License\r\n * by David DeSandro\r\n */\n\n/**\r\n * Bridget makes jQuery widgets\r\n * v2.0.1\r\n * MIT license\r\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n\n(function (window, factory) {\n  // universal module definition\n  /*jshint strict: false */ /* globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n      return factory(window, jQuery);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('jquery'));\n  } else {\n    // browser global\n    window.jQueryBridget = factory(window, window.jQuery);\n  }\n})(window, function factory(window, jQuery) {\n  'use strict';\n\n  // ----- utils ----- //\n\n  var arraySlice = Array.prototype.slice;\n\n  // helper function for logging errors\n  // $.error breaks jQuery chaining\n  var console = window.console;\n  var logError = typeof console == 'undefined' ? function () {} : function (message) {\n    console.error(message);\n  };\n\n  // ----- jQueryBridget ----- //\n\n  function jQueryBridget(namespace, PluginClass, $) {\n    $ = $ || jQuery || window.jQuery;\n    if (!$) {\n      return;\n    }\n\n    // add option method -> $().plugin('option', {...})\n    if (!PluginClass.prototype.option) {\n      // option setter\n      PluginClass.prototype.option = function (opts) {\n        // bail out if not an object\n        if (!$.isPlainObject(opts)) {\n          return;\n        }\n        this.options = $.extend(true, this.options, opts);\n      };\n    }\n\n    // make jQuery plugin\n    $.fn[namespace] = function (arg0 /*, arg1 */) {\n      if (typeof arg0 == 'string') {\n        // method call $().plugin( 'methodName', { options } )\n        // shift arguments by 1\n        var args = arraySlice.call(arguments, 1);\n        return methodCall(this, arg0, args);\n      }\n      // just $().plugin({ options })\n      plainCall(this, arg0);\n      return this;\n    };\n\n    // $().plugin('methodName')\n    function methodCall($elems, methodName, args) {\n      var returnValue;\n      var pluginMethodStr = '$().' + namespace + '(\"' + methodName + '\")';\n\n      $elems.each(function (i, elem) {\n        // get instance\n        var instance = $.data(elem, namespace);\n        if (!instance) {\n          logError(namespace + ' not initialized. Cannot call methods, i.e. ' + pluginMethodStr);\n          return;\n        }\n\n        var method = instance[methodName];\n        if (!method || methodName.charAt(0) == '_') {\n          logError(pluginMethodStr + ' is not a valid method');\n          return;\n        }\n\n        // apply method, get return value\n        var value = method.apply(instance, args);\n        // set return value if value is returned, use only first value\n        returnValue = returnValue === undefined ? value : returnValue;\n      });\n\n      return returnValue !== undefined ? returnValue : $elems;\n    }\n\n    function plainCall($elems, options) {\n      $elems.each(function (i, elem) {\n        var instance = $.data(elem, namespace);\n        if (instance) {\n          // set options & init\n          instance.option(options);\n          instance._init();\n        } else {\n          // initialize new instance\n          instance = new PluginClass(elem, options);\n          $.data(elem, namespace, instance);\n        }\n      });\n    }\n\n    updateJQuery($);\n  }\n\n  // ----- updateJQuery ----- //\n\n  // set $.bridget for v1 backwards compatibility\n  function updateJQuery($) {\n    if (!$ || $ && $.bridget) {\n      return;\n    }\n    $.bridget = jQueryBridget;\n  }\n\n  updateJQuery(jQuery || window.jQuery);\n\n  // -----  ----- //\n\n  return jQueryBridget;\n});\n\n/**\r\n * EvEmitter v1.1.0\r\n * Lil' event emitter\r\n * MIT License\r\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n(function (global, factory) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_LOCAL_MODULE_1__factory = (factory), (__WEBPACK_LOCAL_MODULE_1__module = { id: \"ev-emitter/ev-emitter\", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)) : __WEBPACK_LOCAL_MODULE_1__factory), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n})(typeof window != 'undefined' ? window : this, function () {\n\n  function EvEmitter() {}\n\n  var proto = EvEmitter.prototype;\n\n  proto.on = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    }\n    // set events hash\n    var events = this._events = this._events || {};\n    // set listeners array\n    var listeners = events[eventName] = events[eventName] || [];\n    // only add once\n    if (listeners.indexOf(listener) == -1) {\n      listeners.push(listener);\n    }\n\n    return this;\n  };\n\n  proto.once = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    }\n    // add event\n    this.on(eventName, listener);\n    // set once flag\n    // set onceEvents hash\n    var onceEvents = this._onceEvents = this._onceEvents || {};\n    // set onceListeners object\n    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};\n    // set flag\n    onceListeners[listener] = true;\n\n    return this;\n  };\n\n  proto.off = function (eventName, listener) {\n    var listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) {\n      return;\n    }\n    var index = listeners.indexOf(listener);\n    if (index != -1) {\n      listeners.splice(index, 1);\n    }\n\n    return this;\n  };\n\n  proto.emitEvent = function (eventName, args) {\n    var listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) {\n      return;\n    }\n    // copy over to avoid interference if .off() in listener\n    listeners = listeners.slice(0);\n    args = args || [];\n    // once stuff\n    var onceListeners = this._onceEvents && this._onceEvents[eventName];\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      var isOnce = onceListeners && onceListeners[listener];\n      if (isOnce) {\n        // remove listener\n        // remove before trigger to prevent recursion\n        this.off(eventName, listener);\n        // unset once flag\n        delete onceListeners[listener];\n      }\n      // trigger listener\n      listener.apply(this, args);\n    }\n\n    return this;\n  };\n\n  proto.allOff = function () {\n    delete this._events;\n    delete this._onceEvents;\n  };\n\n  return EvEmitter;\n});\n\n/*!\r\n * getSize v2.0.3\r\n * measure size of elements\r\n * MIT license\r\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n(function (window, factory) {\n  /* jshint strict: false */ /* globals define, module */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_2__factory = (factory), (__WEBPACK_LOCAL_MODULE_2__module = { id: \"get-size/get-size\", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_2__ = (typeof __WEBPACK_LOCAL_MODULE_2__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_2__factory.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module)) : __WEBPACK_LOCAL_MODULE_2__factory), (__WEBPACK_LOCAL_MODULE_2__module.loaded = true), __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n})(window, function factory() {\n  'use strict';\n\n  // -------------------------- helpers -------------------------- //\n\n  // get a number from a string, not a percentage\n\n  function getStyleSize(value) {\n    var num = parseFloat(value);\n    // not a percent like '100%', and a number\n    var isValid = value.indexOf('%') == -1 && !isNaN(num);\n    return isValid && num;\n  }\n\n  function noop() {}\n\n  var logError = typeof console == 'undefined' ? noop : function (message) {\n    console.error(message);\n  };\n\n  // -------------------------- measurements -------------------------- //\n\n  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];\n\n  var measurementsLength = measurements.length;\n\n  function getZeroSize() {\n    var size = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      size[measurement] = 0;\n    }\n    return size;\n  }\n\n  // -------------------------- getStyle -------------------------- //\n\n  /**\r\n   * getStyle, get style of element, check for Firefox bug\r\n   * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n   */\n  function getStyle(elem) {\n    var style = getComputedStyle(elem);\n    if (!style) {\n      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See https://bit.ly/getsizebug1');\n    }\n    return style;\n  }\n\n  // -------------------------- setup -------------------------- //\n\n  var isSetup = false;\n\n  var isBoxSizeOuter;\n\n  /**\r\n   * setup\r\n   * check isBoxSizerOuter\r\n   * do on first getSize() rather than on page load for Firefox bug\r\n   */\n  function setup() {\n    // setup once\n    if (isSetup) {\n      return;\n    }\n    isSetup = true;\n\n    // -------------------------- box sizing -------------------------- //\n\n    /**\r\n     * Chrome & Safari measure the outer-width on style.width on border-box elems\r\n     * IE11 & Firefox<29 measures the inner-width\r\n     */\n    var div = document.createElement('div');\n    div.style.width = '200px';\n    div.style.padding = '1px 2px 3px 4px';\n    div.style.borderStyle = 'solid';\n    div.style.borderWidth = '1px 2px 3px 4px';\n    div.style.boxSizing = 'border-box';\n\n    var body = document.body || document.documentElement;\n    body.appendChild(div);\n    var style = getStyle(div);\n    // round value for browser zoom. desandro/masonry#928\n    isBoxSizeOuter = Math.round(getStyleSize(style.width)) == 200;\n    getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n    body.removeChild(div);\n  }\n\n  // -------------------------- getSize -------------------------- //\n\n  function getSize(elem) {\n    setup();\n\n    // use querySeletor if elem is string\n    if (typeof elem == 'string') {\n      elem = document.querySelector(elem);\n    }\n\n    // do not proceed on non-objects\n    if (!elem || (typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) != 'object' || !elem.nodeType) {\n      return;\n    }\n\n    var style = getStyle(elem);\n\n    // if hidden, everything is 0\n    if (style.display == 'none') {\n      return getZeroSize();\n    }\n\n    var size = {};\n    size.width = elem.offsetWidth;\n    size.height = elem.offsetHeight;\n\n    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n    // get all measurements\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      var value = style[measurement];\n      var num = parseFloat(value);\n      // any 'auto', 'medium' value will be 0\n      size[measurement] = !isNaN(num) ? num : 0;\n    }\n\n    var paddingWidth = size.paddingLeft + size.paddingRight;\n    var paddingHeight = size.paddingTop + size.paddingBottom;\n    var marginWidth = size.marginLeft + size.marginRight;\n    var marginHeight = size.marginTop + size.marginBottom;\n    var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n    var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n    // overwrite width and height if we can get it from style\n    var styleWidth = getStyleSize(style.width);\n    if (styleWidth !== false) {\n      size.width = styleWidth + (\n      // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);\n    }\n\n    var styleHeight = getStyleSize(style.height);\n    if (styleHeight !== false) {\n      size.height = styleHeight + (\n      // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);\n    }\n\n    size.innerWidth = size.width - (paddingWidth + borderWidth);\n    size.innerHeight = size.height - (paddingHeight + borderHeight);\n\n    size.outerWidth = size.width + marginWidth;\n    size.outerHeight = size.height + marginHeight;\n\n    return size;\n  }\n\n  return getSize;\n});\n\n/**\r\n * matchesSelector v2.0.2\r\n * matchesSelector( element, '.selector' )\r\n * MIT license\r\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n(function (window, factory) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_3__factory = (factory), (__WEBPACK_LOCAL_MODULE_3__module = { id: \"desandro-matches-selector/matches-selector\", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_3__ = (typeof __WEBPACK_LOCAL_MODULE_3__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_3__factory.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module)) : __WEBPACK_LOCAL_MODULE_3__factory), (__WEBPACK_LOCAL_MODULE_3__module.loaded = true), __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n})(window, function factory() {\n  'use strict';\n\n  var matchesMethod = function () {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if (ElemProto.matches) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if (ElemProto.matchesSelector) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if (ElemProto[method]) {\n        return method;\n      }\n    }\n  }();\n\n  return function matchesSelector(elem, selector) {\n    return elem[matchesMethod](selector);\n  };\n});\n\n/**\r\n * Fizzy UI utils v2.0.7\r\n * MIT license\r\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n(function (window, factory) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_3__], __WEBPACK_LOCAL_MODULE_4__ = ((function (matchesSelector) {\n      return factory(window, matchesSelector);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('desandro-matches-selector'));\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(window, window.matchesSelector);\n  }\n})(window, function factory(window, matchesSelector) {\n\n  var utils = {};\n\n  // ----- extend ----- //\n\n  // extends objects\n  utils.extend = function (a, b) {\n    for (var prop in b) {\n      a[prop] = b[prop];\n    }\n    return a;\n  };\n\n  // ----- modulo ----- //\n\n  utils.modulo = function (num, div) {\n    return (num % div + div) % div;\n  };\n\n  // ----- makeArray ----- //\n\n  var arraySlice = Array.prototype.slice;\n\n  // turn element or nodeList into an array\n  utils.makeArray = function (obj) {\n    if (Array.isArray(obj)) {\n      // use object if already an array\n      return obj;\n    }\n    // return empty array if undefined or null. #6\n    if (obj === null || obj === undefined) {\n      return [];\n    }\n\n    var isArrayLike = (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && typeof obj.length == 'number';\n    if (isArrayLike) {\n      // convert nodeList to array\n      return arraySlice.call(obj);\n    }\n\n    // array of single index\n    return [obj];\n  };\n\n  // ----- removeFrom ----- //\n\n  utils.removeFrom = function (ary, obj) {\n    var index = ary.indexOf(obj);\n    if (index != -1) {\n      ary.splice(index, 1);\n    }\n  };\n\n  // ----- getParent ----- //\n\n  utils.getParent = function (elem, selector) {\n    while (elem.parentNode && elem != document.body) {\n      elem = elem.parentNode;\n      if (matchesSelector(elem, selector)) {\n        return elem;\n      }\n    }\n  };\n\n  // ----- getQueryElement ----- //\n\n  // use element as selector string\n  utils.getQueryElement = function (elem) {\n    if (typeof elem == 'string') {\n      return document.querySelector(elem);\n    }\n    return elem;\n  };\n\n  // ----- handleEvent ----- //\n\n  // enable .ontype to trigger from .addEventListener( elem, 'type' )\n  utils.handleEvent = function (event) {\n    var method = 'on' + event.type;\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  // ----- filterFindElements ----- //\n\n  utils.filterFindElements = function (elems, selector) {\n    // make array of elems\n    elems = utils.makeArray(elems);\n    var ffElems = [];\n\n    elems.forEach(function (elem) {\n      // check that elem is an actual element\n      if (!(elem instanceof HTMLElement)) {\n        return;\n      }\n      // add elem if no selector\n      if (!selector) {\n        ffElems.push(elem);\n        return;\n      }\n      // filter & find items if we have a selector\n      // filter\n      if (matchesSelector(elem, selector)) {\n        ffElems.push(elem);\n      }\n      // find children\n      var childElems = elem.querySelectorAll(selector);\n      // concat childElems to filterFound array\n      for (var i = 0; i < childElems.length; i++) {\n        ffElems.push(childElems[i]);\n      }\n    });\n\n    return ffElems;\n  };\n\n  // ----- debounceMethod ----- //\n\n  utils.debounceMethod = function (_class, methodName, threshold) {\n    threshold = threshold || 100;\n    // original method\n    var method = _class.prototype[methodName];\n    var timeoutName = methodName + 'Timeout';\n\n    _class.prototype[methodName] = function () {\n      var timeout = this[timeoutName];\n      clearTimeout(timeout);\n\n      var args = arguments;\n      var _this = this;\n      this[timeoutName] = setTimeout(function () {\n        method.apply(_this, args);\n        delete _this[timeoutName];\n      }, threshold);\n    };\n  };\n\n  // ----- docReady ----- //\n\n  utils.docReady = function (callback) {\n    var readyState = document.readyState;\n    if (readyState == 'complete' || readyState == 'interactive') {\n      // do async to allow for other scripts to run. metafizzy/flickity#441\n      setTimeout(callback);\n    } else {\n      document.addEventListener('DOMContentLoaded', callback);\n    }\n  };\n\n  // ----- htmlInit ----- //\n\n  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\n  utils.toDashed = function (str) {\n    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {\n      return $1 + '-' + $2;\n    }).toLowerCase();\n  };\n\n  var console = window.console;\n  /**\r\n   * allow user to initialize classes via [data-namespace] or .js-namespace class\r\n   * htmlInit( Widget, 'widgetName' )\r\n   * options are parsed from data-namespace-options\r\n   */\n  utils.htmlInit = function (WidgetClass, namespace) {\n    utils.docReady(function () {\n      var dashedNamespace = utils.toDashed(namespace);\n      var dataAttr = 'data-' + dashedNamespace;\n      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');\n      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);\n      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));\n      var dataOptionsAttr = dataAttr + '-options';\n      var jQuery = window.jQuery;\n\n      elems.forEach(function (elem) {\n        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);\n        var options;\n        try {\n          options = attr && JSON.parse(attr);\n        } catch (error) {\n          // log error, do not initialize\n          if (console) {\n            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);\n          }\n          return;\n        }\n        // initialize\n        var instance = new WidgetClass(elem, options);\n        // make available via $().data('namespace')\n        if (jQuery) {\n          jQuery.data(elem, namespace, instance);\n        }\n      });\n    });\n  };\n\n  // -----  ----- //\n\n  return utils;\n});\n\n/**\r\n * Outlayer Item\r\n */\n\n(function (window, factory) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_LOCAL_MODULE_5__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(require('ev-emitter'), require('get-size'));\n  } else {\n    // browser global\n    window.Outlayer = {};\n    window.Outlayer.Item = factory(window.EvEmitter, window.getSize);\n  }\n})(window, function factory(EvEmitter, getSize) {\n  'use strict';\n\n  // ----- helpers ----- //\n\n  function isEmptyObj(obj) {\n    for (var prop in obj) {\n      return false;\n    }\n    prop = null;\n    return true;\n  }\n\n  // -------------------------- CSS3 support -------------------------- //\n\n\n  var docElemStyle = document.documentElement.style;\n\n  var transitionProperty = typeof docElemStyle.transition == 'string' ? 'transition' : 'WebkitTransition';\n  var transformProperty = typeof docElemStyle.transform == 'string' ? 'transform' : 'WebkitTransform';\n\n  var transitionEndEvent = {\n    WebkitTransition: 'webkitTransitionEnd',\n    transition: 'transitionend'\n  }[transitionProperty];\n\n  // cache all vendor properties that could have vendor prefix\n  var vendorProperties = {\n    transform: transformProperty,\n    transition: transitionProperty,\n    transitionDuration: transitionProperty + 'Duration',\n    transitionProperty: transitionProperty + 'Property',\n    transitionDelay: transitionProperty + 'Delay'\n  };\n\n  // -------------------------- Item -------------------------- //\n\n  function Item(element, layout) {\n    if (!element) {\n      return;\n    }\n\n    this.element = element;\n    // parent layout class, i.e. Masonry, Isotope, or Packery\n    this.layout = layout;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n\n    this._create();\n  }\n\n  // inherit EvEmitter\n  var proto = Item.prototype = Object.create(EvEmitter.prototype);\n  proto.constructor = Item;\n\n  proto._create = function () {\n    // transition objects\n    this._transn = {\n      ingProperties: {},\n      clean: {},\n      onEnd: {}\n    };\n\n    this.css({\n      position: 'absolute'\n    });\n  };\n\n  // trigger specified handler for event type\n  proto.handleEvent = function (event) {\n    var method = 'on' + event.type;\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n\n  /**\r\n   * apply CSS styles to element\r\n   * @param {Object} style\r\n   */\n  proto.css = function (style) {\n    var elemStyle = this.element.style;\n\n    for (var prop in style) {\n      // use vendor property if available\n      var supportedProp = vendorProperties[prop] || prop;\n      elemStyle[supportedProp] = style[prop];\n    }\n  };\n\n  // measure position, and sets it\n  proto.getPosition = function () {\n    var style = getComputedStyle(this.element);\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n    var xValue = style[isOriginLeft ? 'left' : 'right'];\n    var yValue = style[isOriginTop ? 'top' : 'bottom'];\n    var x = parseFloat(xValue);\n    var y = parseFloat(yValue);\n    // convert percent to pixels\n    var layoutSize = this.layout.size;\n    if (xValue.indexOf('%') != -1) {\n      x = x / 100 * layoutSize.width;\n    }\n    if (yValue.indexOf('%') != -1) {\n      y = y / 100 * layoutSize.height;\n    }\n    // clean up 'auto' or other non-integer values\n    x = isNaN(x) ? 0 : x;\n    y = isNaN(y) ? 0 : y;\n    // remove padding from measurement\n    x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n    y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n    this.position.x = x;\n    this.position.y = y;\n  };\n\n  // set settled position, apply padding\n  proto.layoutPosition = function () {\n    var layoutSize = this.layout.size;\n    var style = {};\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n\n    // x\n    var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n    var xProperty = isOriginLeft ? 'left' : 'right';\n    var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n    var x = this.position.x + layoutSize[xPadding];\n    // set in percentage or pixels\n    style[xProperty] = this.getXValue(x);\n    // reset other property\n    style[xResetProperty] = '';\n\n    // y\n    var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n    var yProperty = isOriginTop ? 'top' : 'bottom';\n    var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n    var y = this.position.y + layoutSize[yPadding];\n    // set in percentage or pixels\n    style[yProperty] = this.getYValue(y);\n    // reset other property\n    style[yResetProperty] = '';\n\n    this.css(style);\n    this.emitEvent('layout', [this]);\n  };\n\n  proto.getXValue = function (x) {\n    var isHorizontal = this.layout._getOption('horizontal');\n    return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + '%' : x + 'px';\n  };\n\n  proto.getYValue = function (y) {\n    var isHorizontal = this.layout._getOption('horizontal');\n    return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + '%' : y + 'px';\n  };\n\n  proto._transitionTo = function (x, y) {\n    this.getPosition();\n    // get current x & y from top/left\n    var curX = this.position.x;\n    var curY = this.position.y;\n\n    var didNotMove = x == this.position.x && y == this.position.y;\n\n    // save end position\n    this.setPosition(x, y);\n\n    // if did not move and not transitioning, just go to layout\n    if (didNotMove && !this.isTransitioning) {\n      this.layoutPosition();\n      return;\n    }\n\n    var transX = x - curX;\n    var transY = y - curY;\n    var transitionStyle = {};\n    transitionStyle.transform = this.getTranslate(transX, transY);\n\n    this.transition({\n      to: transitionStyle,\n      onTransitionEnd: {\n        transform: this.layoutPosition\n      },\n      isCleaning: true\n    });\n  };\n\n  proto.getTranslate = function (x, y) {\n    // flip cooridinates if origin on right or bottom\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n    x = isOriginLeft ? x : -x;\n    y = isOriginTop ? y : -y;\n    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n  };\n\n  // non transition + transform support\n  proto.goTo = function (x, y) {\n    this.setPosition(x, y);\n    this.layoutPosition();\n  };\n\n  proto.moveTo = proto._transitionTo;\n\n  proto.setPosition = function (x, y) {\n    this.position.x = parseFloat(x);\n    this.position.y = parseFloat(y);\n  };\n\n  // ----- transition ----- //\n\n  /**\r\n   * @param {Object} style - CSS\r\n   * @param {Function} onTransitionEnd\r\n   */\n\n  // non transition, just trigger callback\n  proto._nonTransition = function (args) {\n    this.css(args.to);\n    if (args.isCleaning) {\n      this._removeStyles(args.to);\n    }\n    for (var prop in args.onTransitionEnd) {\n      args.onTransitionEnd[prop].call(this);\n    }\n  };\n\n  /**\r\n   * proper transition\r\n   * @param {Object} args - arguments\r\n   *   @param {Object} to - style to transition to\r\n   *   @param {Object} from - style to start transition from\r\n   *   @param {Boolean} isCleaning - removes transition styles after transition\r\n   *   @param {Function} onTransitionEnd - callback\r\n   */\n  proto.transition = function (args) {\n    // redirect to nonTransition if no transition duration\n    if (!parseFloat(this.layout.options.transitionDuration)) {\n      this._nonTransition(args);\n      return;\n    }\n\n    var _transition = this._transn;\n    // keep track of onTransitionEnd callback by css property\n    for (var prop in args.onTransitionEnd) {\n      _transition.onEnd[prop] = args.onTransitionEnd[prop];\n    }\n    // keep track of properties that are transitioning\n    for (prop in args.to) {\n      _transition.ingProperties[prop] = true;\n      // keep track of properties to clean up when transition is done\n      if (args.isCleaning) {\n        _transition.clean[prop] = true;\n      }\n    }\n\n    // set from styles\n    if (args.from) {\n      this.css(args.from);\n      // force redraw. http://blog.alexmaccaw.com/css-transitions\n      var h = this.element.offsetHeight;\n      // hack for JSHint to hush about unused var\n      h = null;\n    }\n    // enable transition\n    this.enableTransition(args.to);\n    // set styles that are transitioning\n    this.css(args.to);\n\n    this.isTransitioning = true;\n  };\n\n  // dash before all cap letters, including first for\n  // WebkitTransform => -webkit-transform\n  function toDashedAll(str) {\n    return str.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n  }\n\n  var transitionProps = 'opacity,' + toDashedAll(transformProperty);\n\n  proto.enableTransition = function () /* style */{\n    // HACK changing transitionProperty during a transition\n    // will cause transition to jump\n    if (this.isTransitioning) {\n      return;\n    }\n\n    // make `transition: foo, bar, baz` from style object\n    // HACK un-comment this when enableTransition can work\n    // while a transition is happening\n    // var transitionValues = [];\n    // for ( var prop in style ) {\n    //   // dash-ify camelCased properties like WebkitTransition\n    //   prop = vendorProperties[ prop ] || prop;\n    //   transitionValues.push( toDashedAll( prop ) );\n    // }\n    // munge number to millisecond, to match stagger\n    var duration = this.layout.options.transitionDuration;\n    duration = typeof duration == 'number' ? duration + 'ms' : duration;\n    // enable transition styles\n    this.css({\n      transitionProperty: transitionProps,\n      transitionDuration: duration,\n      transitionDelay: this.staggerDelay || 0\n    });\n    // listen for transition end event\n    this.element.addEventListener(transitionEndEvent, this, false);\n  };\n\n  // ----- events ----- //\n\n  proto.onwebkitTransitionEnd = function (event) {\n    this.ontransitionend(event);\n  };\n\n  proto.onotransitionend = function (event) {\n    this.ontransitionend(event);\n  };\n\n  // properties that I munge to make my life easier\n  var dashedVendorProperties = {\n    '-webkit-transform': 'transform'\n  };\n\n  proto.ontransitionend = function (event) {\n    // disregard bubbled events from children\n    if (event.target !== this.element) {\n      return;\n    }\n    var _transition = this._transn;\n    // get property name of transitioned property, convert to prefix-free\n    var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName;\n\n    // remove property that has completed transitioning\n    delete _transition.ingProperties[propertyName];\n    // check if any properties are still transitioning\n    if (isEmptyObj(_transition.ingProperties)) {\n      // all properties have completed transitioning\n      this.disableTransition();\n    }\n    // clean style\n    if (propertyName in _transition.clean) {\n      // clean up style\n      this.element.style[event.propertyName] = '';\n      delete _transition.clean[propertyName];\n    }\n    // trigger onTransitionEnd callback\n    if (propertyName in _transition.onEnd) {\n      var onTransitionEnd = _transition.onEnd[propertyName];\n      onTransitionEnd.call(this);\n      delete _transition.onEnd[propertyName];\n    }\n\n    this.emitEvent('transitionEnd', [this]);\n  };\n\n  proto.disableTransition = function () {\n    this.removeTransitionStyles();\n    this.element.removeEventListener(transitionEndEvent, this, false);\n    this.isTransitioning = false;\n  };\n\n  /**\r\n   * removes style property from element\r\n   * @param {Object} style\r\n  **/\n  proto._removeStyles = function (style) {\n    // clean up transition styles\n    var cleanStyle = {};\n    for (var prop in style) {\n      cleanStyle[prop] = '';\n    }\n    this.css(cleanStyle);\n  };\n\n  var cleanTransitionStyle = {\n    transitionProperty: '',\n    transitionDuration: '',\n    transitionDelay: ''\n  };\n\n  proto.removeTransitionStyles = function () {\n    // remove transition\n    this.css(cleanTransitionStyle);\n  };\n\n  // ----- stagger ----- //\n\n  proto.stagger = function (delay) {\n    delay = isNaN(delay) ? 0 : delay;\n    this.staggerDelay = delay + 'ms';\n  };\n\n  // ----- show/hide/remove ----- //\n\n  // remove element from DOM\n  proto.removeElem = function () {\n    this.element.parentNode.removeChild(this.element);\n    // remove display: none\n    this.css({ display: '' });\n    this.emitEvent('remove', [this]);\n  };\n\n  proto.remove = function () {\n    // just remove element if no transition support or no transition\n    if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {\n      this.removeElem();\n      return;\n    }\n\n    // start transition\n    this.once('transitionEnd', function () {\n      this.removeElem();\n    });\n    this.hide();\n  };\n\n  proto.reveal = function () {\n    delete this.isHidden;\n    // remove display: none\n    this.css({ display: '' });\n\n    var options = this.layout.options;\n\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n    onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;\n\n    this.transition({\n      from: options.hiddenStyle,\n      to: options.visibleStyle,\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onRevealTransitionEnd = function () {\n    // check if still visible\n    // during transition, item may have been hidden\n    if (!this.isHidden) {\n      this.emitEvent('reveal');\n    }\n  };\n\n  /**\r\n   * get style property use for hide/reveal transition end\r\n   * @param {String} styleProperty - hiddenStyle/visibleStyle\r\n   * @returns {String}\r\n   */\n  proto.getHideRevealTransitionEndProperty = function (styleProperty) {\n    var optionStyle = this.layout.options[styleProperty];\n    // use opacity\n    if (optionStyle.opacity) {\n      return 'opacity';\n    }\n    // get first property\n    for (var prop in optionStyle) {\n      return prop;\n    }\n  };\n\n  proto.hide = function () {\n    // set flag\n    this.isHidden = true;\n    // remove display: none\n    this.css({ display: '' });\n\n    var options = this.layout.options;\n\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n    onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;\n\n    this.transition({\n      from: options.visibleStyle,\n      to: options.hiddenStyle,\n      // keep hidden stuff hidden\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onHideTransitionEnd = function () {\n    // check if still hidden\n    // during transition, item may have been un-hidden\n    if (this.isHidden) {\n      this.css({ display: 'none' });\n      this.emitEvent('hide');\n    }\n  };\n\n  proto.destroy = function () {\n    this.css({\n      position: '',\n      left: '',\n      right: '',\n      top: '',\n      bottom: '',\n      transition: '',\n      transform: ''\n    });\n  };\n\n  return Item;\n});\n\n/*!\r\n * Outlayer v2.1.1\r\n * the brains and guts of a layout library\r\n * MIT license\r\n */\n\n(function (window, factory) {\n  'use strict';\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_6__ = ((function (EvEmitter, getSize, utils, Item) {\n      return factory(window, EvEmitter, getSize, utils, Item);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./item'));\n  } else {\n    // browser global\n    window.Outlayer = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, window.Outlayer.Item);\n  }\n})(window, function factory(window, EvEmitter, getSize, utils, Item) {\n  'use strict';\n\n  // ----- vars ----- //\n\n  var console = window.console;\n  var jQuery = window.jQuery;\n  var noop = function noop() {};\n\n  // -------------------------- Outlayer -------------------------- //\n\n  // globally unique identifiers\n  var GUID = 0;\n  // internal store of all Outlayer intances\n  var instances = {};\n\n  /**\r\n   * @param {Element, String} element\r\n   * @param {Object} options\r\n   * @constructor\r\n   */\n  function Outlayer(element, options) {\n    var queryElement = utils.getQueryElement(element);\n    if (!queryElement) {\n      if (console) {\n        console.error('Bad element for ' + this.constructor.namespace + ': ' + (queryElement || element));\n      }\n      return;\n    }\n    this.element = queryElement;\n    // add jQuery\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    }\n\n    // options\n    this.options = utils.extend({}, this.constructor.defaults);\n    this.option(options);\n\n    // add id for Outlayer.getFromElement\n    var id = ++GUID;\n    this.element.outlayerGUID = id; // expando\n    instances[id] = this; // associate via id\n\n    // kick it off\n    this._create();\n\n    var isInitLayout = this._getOption('initLayout');\n    if (isInitLayout) {\n      this.layout();\n    }\n  }\n\n  // settings are for internal use only\n  Outlayer.namespace = 'outlayer';\n  Outlayer.Item = Item;\n\n  // default options\n  Outlayer.defaults = {\n    containerStyle: {\n      position: 'relative'\n    },\n    initLayout: true,\n    originLeft: true,\n    originTop: true,\n    resize: true,\n    resizeContainer: true,\n    // item options\n    transitionDuration: '0.4s',\n    hiddenStyle: {\n      opacity: 0,\n      transform: 'scale(0.001)'\n    },\n    visibleStyle: {\n      opacity: 1,\n      transform: 'scale(1)'\n    }\n  };\n\n  var proto = Outlayer.prototype;\n  // inherit EvEmitter\n  utils.extend(proto, EvEmitter.prototype);\n\n  /**\r\n   * set options\r\n   * @param {Object} opts\r\n   */\n  proto.option = function (opts) {\n    utils.extend(this.options, opts);\n  };\n\n  /**\r\n   * get backwards compatible option value, check old name\r\n   */\n  proto._getOption = function (option) {\n    var oldOption = this.constructor.compatOptions[option];\n    return oldOption && this.options[oldOption] !== undefined ? this.options[oldOption] : this.options[option];\n  };\n\n  Outlayer.compatOptions = {\n    // currentName: oldName\n    initLayout: 'isInitLayout',\n    horizontal: 'isHorizontal',\n    layoutInstant: 'isLayoutInstant',\n    originLeft: 'isOriginLeft',\n    originTop: 'isOriginTop',\n    resize: 'isResizeBound',\n    resizeContainer: 'isResizingContainer'\n  };\n\n  proto._create = function () {\n    // get items from children\n    this.reloadItems();\n    // elements that affect layout, but are not laid out\n    this.stamps = [];\n    this.stamp(this.options.stamp);\n    // set container style\n    utils.extend(this.element.style, this.options.containerStyle);\n\n    // bind resize method\n    var canBindResize = this._getOption('resize');\n    if (canBindResize) {\n      this.bindResize();\n    }\n  };\n\n  // goes through all children again and gets bricks in proper order\n  proto.reloadItems = function () {\n    // collection of item elements\n    this.items = this._itemize(this.element.children);\n  };\n\n  /**\r\n   * turn elements into Outlayer.Items to be used in layout\r\n   * @param {Array or NodeList or HTMLElement} elems\r\n   * @returns {Array} items - collection of new Outlayer Items\r\n   */\n  proto._itemize = function (elems) {\n\n    var itemElems = this._filterFindItemElements(elems);\n    var Item = this.constructor.Item;\n\n    // create new Outlayer Items for collection\n    var items = [];\n    for (var i = 0; i < itemElems.length; i++) {\n      var elem = itemElems[i];\n      var item = new Item(elem, this);\n      items.push(item);\n    }\n\n    return items;\n  };\n\n  /**\r\n   * get item elements to be used in layout\r\n   * @param {Array or NodeList or HTMLElement} elems\r\n   * @returns {Array} items - item elements\r\n   */\n  proto._filterFindItemElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.itemSelector);\n  };\n\n  /**\r\n   * getter method for getting item elements\r\n   * @returns {Array} elems - collection of item elements\r\n   */\n  proto.getItemElements = function () {\n    return this.items.map(function (item) {\n      return item.element;\n    });\n  };\n\n  // ----- init & layout ----- //\n\n  /**\r\n   * lays out all items\r\n   */\n  proto.layout = function () {\n    this._resetLayout();\n    this._manageStamps();\n\n    // don't animate first layout\n    var layoutInstant = this._getOption('layoutInstant');\n    var isInstant = layoutInstant !== undefined ? layoutInstant : !this._isLayoutInited;\n    this.layoutItems(this.items, isInstant);\n\n    // flag for initalized\n    this._isLayoutInited = true;\n  };\n\n  // _init is alias for layout\n  proto._init = proto.layout;\n\n  /**\r\n   * logic before any new layout\r\n   */\n  proto._resetLayout = function () {\n    this.getSize();\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n\n  /**\r\n   * get measurement from option, for columnWidth, rowHeight, gutter\r\n   * if option is String -> get element from selector string, & get size of element\r\n   * if option is Element -> get size of element\r\n   * else use option as a number\r\n   *\r\n   * @param {String} measurement\r\n   * @param {String} size - width or height\r\n   * @private\r\n   */\n  proto._getMeasurement = function (measurement, size) {\n    var option = this.options[measurement];\n    var elem;\n    if (!option) {\n      // default to 0\n      this[measurement] = 0;\n    } else {\n      // use option as an element\n      if (typeof option == 'string') {\n        elem = this.element.querySelector(option);\n      } else if (option instanceof HTMLElement) {\n        elem = option;\n      }\n      // use size of element, if element\n      this[measurement] = elem ? getSize(elem)[size] : option;\n    }\n  };\n\n  /**\r\n   * layout a collection of item elements\r\n   * @api public\r\n   */\n  proto.layoutItems = function (items, isInstant) {\n    items = this._getItemsForLayout(items);\n\n    this._layoutItems(items, isInstant);\n\n    this._postLayout();\n  };\n\n  /**\r\n   * get the items to be laid out\r\n   * you may want to skip over some items\r\n   * @param {Array} items\r\n   * @returns {Array} items\r\n   */\n  proto._getItemsForLayout = function (items) {\n    return items.filter(function (item) {\n      return !item.isIgnored;\n    });\n  };\n\n  /**\r\n   * layout items\r\n   * @param {Array} items\r\n   * @param {Boolean} isInstant\r\n   */\n  proto._layoutItems = function (items, isInstant) {\n    this._emitCompleteOnItems('layout', items);\n\n    if (!items || !items.length) {\n      // no items, emit event with empty array\n      return;\n    }\n\n    var queue = [];\n\n    items.forEach(function (item) {\n      // get x/y object from method\n      var position = this._getItemLayoutPosition(item);\n      // enqueue\n      position.item = item;\n      position.isInstant = isInstant || item.isLayoutInstant;\n      queue.push(position);\n    }, this);\n\n    this._processLayoutQueue(queue);\n  };\n\n  /**\r\n   * get item layout position\r\n   * @param {Outlayer.Item} item\r\n   * @returns {Object} x and y position\r\n   */\n  proto._getItemLayoutPosition = function () /* item */{\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n\n  /**\r\n   * iterate over array and position each item\r\n   * Reason being - separating this logic prevents 'layout invalidation'\r\n   * thx @paul_irish\r\n   * @param {Array} queue\r\n   */\n  proto._processLayoutQueue = function (queue) {\n    this.updateStagger();\n    queue.forEach(function (obj, i) {\n      this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);\n    }, this);\n  };\n\n  // set stagger from option in milliseconds number\n  proto.updateStagger = function () {\n    var stagger = this.options.stagger;\n    if (stagger === null || stagger === undefined) {\n      this.stagger = 0;\n      return;\n    }\n    this.stagger = getMilliseconds(stagger);\n    return this.stagger;\n  };\n\n  /**\r\n   * Sets position of item in DOM\r\n   * @param {Outlayer.Item} item\r\n   * @param {Number} x - horizontal position\r\n   * @param {Number} y - vertical position\r\n   * @param {Boolean} isInstant - disables transitions\r\n   */\n  proto._positionItem = function (item, x, y, isInstant, i) {\n    if (isInstant) {\n      // if not transition, just set CSS\n      item.goTo(x, y);\n    } else {\n      item.stagger(i * this.stagger);\n      item.moveTo(x, y);\n    }\n  };\n\n  /**\r\n   * Any logic you want to do after each layout,\r\n   * i.e. size the container\r\n   */\n  proto._postLayout = function () {\n    this.resizeContainer();\n  };\n\n  proto.resizeContainer = function () {\n    var isResizingContainer = this._getOption('resizeContainer');\n    if (!isResizingContainer) {\n      return;\n    }\n    var size = this._getContainerSize();\n    if (size) {\n      this._setContainerMeasure(size.width, true);\n      this._setContainerMeasure(size.height, false);\n    }\n  };\n\n  /**\r\n   * Sets width or height of container if returned\r\n   * @returns {Object} size\r\n   *   @param {Number} width\r\n   *   @param {Number} height\r\n   */\n  proto._getContainerSize = noop;\n\n  /**\r\n   * @param {Number} measure - size of width or height\r\n   * @param {Boolean} isWidth\r\n   */\n  proto._setContainerMeasure = function (measure, isWidth) {\n    if (measure === undefined) {\n      return;\n    }\n\n    var elemSize = this.size;\n    // add padding and border width if border box\n    if (elemSize.isBorderBox) {\n      measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;\n    }\n\n    measure = Math.max(measure, 0);\n    this.element.style[isWidth ? 'width' : 'height'] = measure + 'px';\n  };\n\n  /**\r\n   * emit eventComplete on a collection of items events\r\n   * @param {String} eventName\r\n   * @param {Array} items - Outlayer.Items\r\n   */\n  proto._emitCompleteOnItems = function (eventName, items) {\n    var _this = this;\n    function onComplete() {\n      _this.dispatchEvent(eventName + 'Complete', null, [items]);\n    }\n\n    var count = items.length;\n    if (!items || !count) {\n      onComplete();\n      return;\n    }\n\n    var doneCount = 0;\n    function tick() {\n      doneCount++;\n      if (doneCount == count) {\n        onComplete();\n      }\n    }\n\n    // bind callback\n    items.forEach(function (item) {\n      item.once(eventName, tick);\n    });\n  };\n\n  /**\r\n   * emits events via EvEmitter and jQuery events\r\n   * @param {String} type - name of event\r\n   * @param {Event} event - original event\r\n   * @param {Array} args - extra arguments\r\n   */\n  proto.dispatchEvent = function (type, event, args) {\n    // add original event to arguments\n    var emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n\n    if (jQuery) {\n      // set this.$element\n      this.$element = this.$element || jQuery(this.element);\n      if (event) {\n        // create jQuery event\n        var $event = jQuery.Event(event);\n        $event.type = type;\n        this.$element.trigger($event, args);\n      } else {\n        // just trigger with type if no event available\n        this.$element.trigger(type, args);\n      }\n    }\n  };\n\n  // -------------------------- ignore & stamps -------------------------- //\n\n\n  /**\r\n   * keep item in collection, but do not lay it out\r\n   * ignored items do not get skipped in layout\r\n   * @param {Element} elem\r\n   */\n  proto.ignore = function (elem) {\n    var item = this.getItem(elem);\n    if (item) {\n      item.isIgnored = true;\n    }\n  };\n\n  /**\r\n   * return item to layout collection\r\n   * @param {Element} elem\r\n   */\n  proto.unignore = function (elem) {\n    var item = this.getItem(elem);\n    if (item) {\n      delete item.isIgnored;\n    }\n  };\n\n  /**\r\n   * adds elements to stamps\r\n   * @param {NodeList, Array, Element, or String} elems\r\n   */\n  proto.stamp = function (elems) {\n    elems = this._find(elems);\n    if (!elems) {\n      return;\n    }\n\n    this.stamps = this.stamps.concat(elems);\n    // ignore\n    elems.forEach(this.ignore, this);\n  };\n\n  /**\r\n   * removes elements to stamps\r\n   * @param {NodeList, Array, or Element} elems\r\n   */\n  proto.unstamp = function (elems) {\n    elems = this._find(elems);\n    if (!elems) {\n      return;\n    }\n\n    elems.forEach(function (elem) {\n      // filter out removed stamp elements\n      utils.removeFrom(this.stamps, elem);\n      this.unignore(elem);\n    }, this);\n  };\n\n  /**\r\n   * finds child elements\r\n   * @param {NodeList, Array, Element, or String} elems\r\n   * @returns {Array} elems\r\n   */\n  proto._find = function (elems) {\n    if (!elems) {\n      return;\n    }\n    // if string, use argument as selector string\n    if (typeof elems == 'string') {\n      elems = this.element.querySelectorAll(elems);\n    }\n    elems = utils.makeArray(elems);\n    return elems;\n  };\n\n  proto._manageStamps = function () {\n    if (!this.stamps || !this.stamps.length) {\n      return;\n    }\n\n    this._getBoundingRect();\n\n    this.stamps.forEach(this._manageStamp, this);\n  };\n\n  // update boundingLeft / Top\n  proto._getBoundingRect = function () {\n    // get bounding rect for container element\n    var boundingRect = this.element.getBoundingClientRect();\n    var size = this.size;\n    this._boundingRect = {\n      left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n      top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n      right: boundingRect.right - (size.paddingRight + size.borderRightWidth),\n      bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)\n    };\n  };\n\n  /**\r\n   * @param {Element} stamp\r\n  **/\n  proto._manageStamp = noop;\n\n  /**\r\n   * get x/y position of element relative to container element\r\n   * @param {Element} elem\r\n   * @returns {Object} offset - has left, top, right, bottom\r\n   */\n  proto._getElementOffset = function (elem) {\n    var boundingRect = elem.getBoundingClientRect();\n    var thisRect = this._boundingRect;\n    var size = getSize(elem);\n    var offset = {\n      left: boundingRect.left - thisRect.left - size.marginLeft,\n      top: boundingRect.top - thisRect.top - size.marginTop,\n      right: thisRect.right - boundingRect.right - size.marginRight,\n      bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n    };\n    return offset;\n  };\n\n  // -------------------------- resize -------------------------- //\n\n  // enable event handlers for listeners\n  // i.e. resize -> onresize\n  proto.handleEvent = utils.handleEvent;\n\n  /**\r\n   * Bind layout to window resizing\r\n   */\n  proto.bindResize = function () {\n    window.addEventListener('resize', this);\n    this.isResizeBound = true;\n  };\n\n  /**\r\n   * Unbind layout to window resizing\r\n   */\n  proto.unbindResize = function () {\n    window.removeEventListener('resize', this);\n    this.isResizeBound = false;\n  };\n\n  proto.onresize = function () {\n    this.resize();\n  };\n\n  utils.debounceMethod(Outlayer, 'onresize', 100);\n\n  proto.resize = function () {\n    // don't trigger if size did not change\n    // or if resize was unbound. See #9\n    if (!this.isResizeBound || !this.needsResizeLayout()) {\n      return;\n    }\n\n    this.layout();\n  };\n\n  /**\r\n   * check if layout is needed post layout\r\n   * @returns Boolean\r\n   */\n  proto.needsResizeLayout = function () {\n    var size = getSize(this.element);\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var hasSizes = this.size && size;\n    return hasSizes && size.innerWidth !== this.size.innerWidth;\n  };\n\n  // -------------------------- methods -------------------------- //\n\n  /**\r\n   * add items to Outlayer instance\r\n   * @param {Array or NodeList or Element} elems\r\n   * @returns {Array} items - Outlayer.Items\r\n  **/\n  proto.addItems = function (elems) {\n    var items = this._itemize(elems);\n    // add items to collection\n    if (items.length) {\n      this.items = this.items.concat(items);\n    }\n    return items;\n  };\n\n  /**\r\n   * Layout newly-appended item elements\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.appended = function (elems) {\n    var items = this.addItems(elems);\n    if (!items.length) {\n      return;\n    }\n    // layout and reveal just the new items\n    this.layoutItems(items, true);\n    this.reveal(items);\n  };\n\n  /**\r\n   * Layout prepended elements\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.prepended = function (elems) {\n    var items = this._itemize(elems);\n    if (!items.length) {\n      return;\n    }\n    // add items to beginning of collection\n    var previousItems = this.items.slice(0);\n    this.items = items.concat(previousItems);\n    // start new layout\n    this._resetLayout();\n    this._manageStamps();\n    // layout new stuff without transition\n    this.layoutItems(items, true);\n    this.reveal(items);\n    // layout previous items\n    this.layoutItems(previousItems);\n  };\n\n  /**\r\n   * reveal a collection of items\r\n   * @param {Array of Outlayer.Items} items\r\n   */\n  proto.reveal = function (items) {\n    this._emitCompleteOnItems('reveal', items);\n    if (!items || !items.length) {\n      return;\n    }\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.reveal();\n    });\n  };\n\n  /**\r\n   * hide a collection of items\r\n   * @param {Array of Outlayer.Items} items\r\n   */\n  proto.hide = function (items) {\n    this._emitCompleteOnItems('hide', items);\n    if (!items || !items.length) {\n      return;\n    }\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.hide();\n    });\n  };\n\n  /**\r\n   * reveal item elements\r\n   * @param {Array}, {Element}, {NodeList} items\r\n   */\n  proto.revealItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.reveal(items);\n  };\n\n  /**\r\n   * hide item elements\r\n   * @param {Array}, {Element}, {NodeList} items\r\n   */\n  proto.hideItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.hide(items);\n  };\n\n  /**\r\n   * get Outlayer.Item, given an Element\r\n   * @param {Element} elem\r\n   * @param {Function} callback\r\n   * @returns {Outlayer.Item} item\r\n   */\n  proto.getItem = function (elem) {\n    // loop through items to get the one that matches\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this.items[i];\n      if (item.element == elem) {\n        // return item\n        return item;\n      }\n    }\n  };\n\n  /**\r\n   * get collection of Outlayer.Items, given Elements\r\n   * @param {Array} elems\r\n   * @returns {Array} items - Outlayer.Items\r\n   */\n  proto.getItems = function (elems) {\n    elems = utils.makeArray(elems);\n    var items = [];\n    elems.forEach(function (elem) {\n      var item = this.getItem(elem);\n      if (item) {\n        items.push(item);\n      }\n    }, this);\n\n    return items;\n  };\n\n  /**\r\n   * remove element(s) from instance and DOM\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.remove = function (elems) {\n    var removeItems = this.getItems(elems);\n\n    this._emitCompleteOnItems('remove', removeItems);\n\n    // bail if no items to remove\n    if (!removeItems || !removeItems.length) {\n      return;\n    }\n\n    removeItems.forEach(function (item) {\n      item.remove();\n      // remove item from collection\n      utils.removeFrom(this.items, item);\n    }, this);\n  };\n\n  // ----- destroy ----- //\n\n  // remove and disable Outlayer instance\n  proto.destroy = function () {\n    // clean up dynamic styles\n    var style = this.element.style;\n    style.height = '';\n    style.position = '';\n    style.width = '';\n    // destroy items\n    this.items.forEach(function (item) {\n      item.destroy();\n    });\n\n    this.unbindResize();\n\n    var id = this.element.outlayerGUID;\n    delete instances[id]; // remove reference to instance by id\n    delete this.element.outlayerGUID;\n    // remove data for jQuery\n    if (jQuery) {\n      jQuery.removeData(this.element, this.constructor.namespace);\n    }\n  };\n\n  // -------------------------- data -------------------------- //\n\n  /**\r\n   * get Outlayer instance from element\r\n   * @param {Element} elem\r\n   * @returns {Outlayer}\r\n   */\n  Outlayer.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    var id = elem && elem.outlayerGUID;\n    return id && instances[id];\n  };\n\n  // -------------------------- create Outlayer class -------------------------- //\n\n  /**\r\n   * create a layout class\r\n   * @param {String} namespace\r\n   */\n  Outlayer.create = function (namespace, options) {\n    // sub-class Outlayer\n    var Layout = subclass(Outlayer);\n    // apply new options and compatOptions\n    Layout.defaults = utils.extend({}, Outlayer.defaults);\n    utils.extend(Layout.defaults, options);\n    Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);\n\n    Layout.namespace = namespace;\n\n    Layout.data = Outlayer.data;\n\n    // sub-class Item\n    Layout.Item = subclass(Item);\n\n    // -------------------------- declarative -------------------------- //\n\n    utils.htmlInit(Layout, namespace);\n\n    // -------------------------- jQuery bridge -------------------------- //\n\n    // make into jQuery plugin\n    if (jQuery && jQuery.bridget) {\n      jQuery.bridget(namespace, Layout);\n    }\n\n    return Layout;\n  };\n\n  function subclass(Parent) {\n    function SubClass() {\n      Parent.apply(this, arguments);\n    }\n\n    SubClass.prototype = Object.create(Parent.prototype);\n    SubClass.prototype.constructor = SubClass;\n\n    return SubClass;\n  }\n\n  // ----- helpers ----- //\n\n  // how many milliseconds are in each unit\n  var msUnits = {\n    ms: 1,\n    s: 1000\n  };\n\n  // munge time-like parameter into millisecond number\n  // '0.4s' -> 40\n  function getMilliseconds(time) {\n    if (typeof time == 'number') {\n      return time;\n    }\n    var matches = time.match(/(^\\d*\\.?\\d*)(\\w*)/);\n    var num = matches && matches[1];\n    var unit = matches && matches[2];\n    if (!num.length) {\n      return 0;\n    }\n    num = parseFloat(num);\n    var mult = msUnits[unit] || 1;\n    return num * mult;\n  }\n\n  // ----- fin ----- //\n\n  // back in global\n  Outlayer.Item = Item;\n\n  return Outlayer;\n});\n\n/*!\r\n * Masonry v4.2.2\r\n * Cascading grid layout library\r\n * https://masonry.desandro.com\r\n * MIT License\r\n * by David DeSandro\r\n */\n\n(function (window, factory) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('outlayer'), require('get-size'));\n  } else {\n    // browser global\n    window.Masonry = factory(window.Outlayer, window.getSize);\n  }\n})(window, function factory(Outlayer, getSize) {\n\n  // -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function () {\n    this.getSize();\n    this._getMeasurement('columnWidth', 'outerWidth');\n    this._getMeasurement('gutter', 'outerWidth');\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for (var i = 0; i < this.cols; i++) {\n      this.colYs.push(0);\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function () {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if (!this.columnWidth) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth ||\n      // if first elem has no width, default to size of container\n      this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[mathMethod](cols);\n    this.cols = Math.max(cols, 1);\n  };\n\n  proto.getContainerWidth = function () {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize(container);\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);\n    colSpan = Math.min(colSpan, this.cols);\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ? '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[colPosMethod](colSpan, item);\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for (var i = colPosition.col; i < setMax; i++) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function (colSpan) {\n    var colGroup = this._getTopColGroup(colSpan);\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply(Math, colGroup);\n\n    return {\n      col: colGroup.indexOf(minimumY),\n      y: minimumY\n    };\n  };\n\n  /**\r\n   * @param {Number} colSpan - number of columns the element spans\r\n   * @returns {Array} colGroup\r\n   */\n  proto._getTopColGroup = function (colSpan) {\n    if (colSpan < 2) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for (var i = 0; i < groupCount; i++) {\n      colGroup[i] = this._getColGroupY(i, colSpan);\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function (col, colSpan) {\n    if (colSpan < 2) {\n      return this.colYs[col];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice(col, col + colSpan);\n    // and get the max value of the array\n    return Math.max.apply(Math, groupColYs);\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function (colSpan, item) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY(col, colSpan)\n    };\n  };\n\n  proto._manageStamp = function (stamp) {\n    var stampSize = getSize(stamp);\n    var offset = this._getElementOffset(stamp);\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor(firstX / this.columnWidth);\n    firstCol = Math.max(0, firstCol);\n    var lastCol = Math.floor(lastX / this.columnWidth);\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min(this.cols - 1, lastCol);\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;\n    for (var i = firstCol; i <= lastCol; i++) {\n      this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);\n    }\n  };\n\n  proto._getContainerSize = function () {\n    this.maxY = Math.max.apply(Math, this.colYs);\n    var size = {\n      height: this.maxY\n    };\n\n    if (this._getOption('fitWidth')) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function () {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while (--i) {\n      if (this.colYs[i] !== 0) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return (this.cols - unusedCols) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function () {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1zdGF0aWMvbWFzb25yeUNvbGlicmkuanM/YjJmNCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJmYWN0b3J5IiwiZGVmaW5lIiwialF1ZXJ5IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJqUXVlcnlCcmlkZ2V0IiwiYXJyYXlTbGljZSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zb2xlIiwibG9nRXJyb3IiLCJtZXNzYWdlIiwiZXJyb3IiLCJuYW1lc3BhY2UiLCJQbHVnaW5DbGFzcyIsIiQiLCJvcHRpb24iLCJvcHRzIiwiaXNQbGFpbk9iamVjdCIsIm9wdGlvbnMiLCJleHRlbmQiLCJmbiIsImFyZzAiLCJhcmdzIiwiY2FsbCIsImFyZ3VtZW50cyIsIm1ldGhvZENhbGwiLCJwbGFpbkNhbGwiLCIkZWxlbXMiLCJtZXRob2ROYW1lIiwicmV0dXJuVmFsdWUiLCJwbHVnaW5NZXRob2RTdHIiLCJlYWNoIiwiaSIsImVsZW0iLCJpbnN0YW5jZSIsImRhdGEiLCJtZXRob2QiLCJjaGFyQXQiLCJ2YWx1ZSIsImFwcGx5IiwidW5kZWZpbmVkIiwiX2luaXQiLCJ1cGRhdGVKUXVlcnkiLCJicmlkZ2V0IiwiZ2xvYmFsIiwiRXZFbWl0dGVyIiwicHJvdG8iLCJvbiIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiZXZlbnRzIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsImluZGV4T2YiLCJwdXNoIiwib25jZSIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsIm9uY2VMaXN0ZW5lcnMiLCJvZmYiLCJsZW5ndGgiLCJpbmRleCIsInNwbGljZSIsImVtaXRFdmVudCIsImlzT25jZSIsImFsbE9mZiIsImdldFNpemUiLCJnZXRTdHlsZVNpemUiLCJudW0iLCJwYXJzZUZsb2F0IiwiaXNWYWxpZCIsImlzTmFOIiwibm9vcCIsIm1lYXN1cmVtZW50cyIsIm1lYXN1cmVtZW50c0xlbmd0aCIsImdldFplcm9TaXplIiwic2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwibWVhc3VyZW1lbnQiLCJnZXRTdHlsZSIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlzU2V0dXAiLCJpc0JveFNpemVPdXRlciIsInNldHVwIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicGFkZGluZyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaXppbmciLCJib2R5IiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJNYXRoIiwicm91bmQiLCJyZW1vdmVDaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJub2RlVHlwZSIsImRpc3BsYXkiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImlzQm9yZGVyQm94IiwicGFkZGluZ1dpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nSGVpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJIZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiaXNCb3JkZXJCb3hTaXplT3V0ZXIiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJtYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXMiLCJwcmVmaXhlcyIsInByZWZpeCIsInNlbGVjdG9yIiwiZml6enlVSVV0aWxzIiwidXRpbHMiLCJhIiwiYiIsInByb3AiLCJtb2R1bG8iLCJtYWtlQXJyYXkiLCJvYmoiLCJpc0FycmF5IiwiaXNBcnJheUxpa2UiLCJyZW1vdmVGcm9tIiwiYXJ5IiwiZ2V0UGFyZW50IiwicGFyZW50Tm9kZSIsImdldFF1ZXJ5RWxlbWVudCIsImhhbmRsZUV2ZW50IiwiZXZlbnQiLCJ0eXBlIiwiZmlsdGVyRmluZEVsZW1lbnRzIiwiZWxlbXMiLCJmZkVsZW1zIiwiZm9yRWFjaCIsIkhUTUxFbGVtZW50IiwiY2hpbGRFbGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZWJvdW5jZU1ldGhvZCIsIl9jbGFzcyIsInRocmVzaG9sZCIsInRpbWVvdXROYW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsIl90aGlzIiwic2V0VGltZW91dCIsImRvY1JlYWR5IiwiY2FsbGJhY2siLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvRGFzaGVkIiwic3RyIiwicmVwbGFjZSIsIm1hdGNoIiwiJDEiLCIkMiIsInRvTG93ZXJDYXNlIiwiaHRtbEluaXQiLCJXaWRnZXRDbGFzcyIsImRhc2hlZE5hbWVzcGFjZSIsImRhdGFBdHRyIiwiZGF0YUF0dHJFbGVtcyIsImpzRGFzaEVsZW1zIiwiY29uY2F0IiwiZGF0YU9wdGlvbnNBdHRyIiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsIkpTT04iLCJwYXJzZSIsImNsYXNzTmFtZSIsIk91dGxheWVyIiwiSXRlbSIsImlzRW1wdHlPYmoiLCJkb2NFbGVtU3R5bGUiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uIiwidHJhbnNmb3JtUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwidmVuZG9yUHJvcGVydGllcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImVsZW1lbnQiLCJsYXlvdXQiLCJwb3NpdGlvbiIsIngiLCJ5IiwiX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3RyYW5zbiIsImluZ1Byb3BlcnRpZXMiLCJjbGVhbiIsIm9uRW5kIiwiY3NzIiwiZWxlbVN0eWxlIiwic3VwcG9ydGVkUHJvcCIsImdldFBvc2l0aW9uIiwiaXNPcmlnaW5MZWZ0IiwiX2dldE9wdGlvbiIsImlzT3JpZ2luVG9wIiwieFZhbHVlIiwieVZhbHVlIiwibGF5b3V0U2l6ZSIsImxheW91dFBvc2l0aW9uIiwieFBhZGRpbmciLCJ4UHJvcGVydHkiLCJ4UmVzZXRQcm9wZXJ0eSIsImdldFhWYWx1ZSIsInlQYWRkaW5nIiwieVByb3BlcnR5IiwieVJlc2V0UHJvcGVydHkiLCJnZXRZVmFsdWUiLCJpc0hvcml6b250YWwiLCJwZXJjZW50UG9zaXRpb24iLCJfdHJhbnNpdGlvblRvIiwiY3VyWCIsImN1clkiLCJkaWROb3RNb3ZlIiwic2V0UG9zaXRpb24iLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc1giLCJ0cmFuc1kiLCJ0cmFuc2l0aW9uU3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJ0byIsIm9uVHJhbnNpdGlvbkVuZCIsImlzQ2xlYW5pbmciLCJnb1RvIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJmcm9tIiwiaCIsImVuYWJsZVRyYW5zaXRpb24iLCJ0b0Rhc2hlZEFsbCIsInRyYW5zaXRpb25Qcm9wcyIsImR1cmF0aW9uIiwic3RhZ2dlckRlbGF5Iiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsImRhc2hlZFZlbmRvclByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wZXJ0eU5hbWUiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYW5TdHlsZSIsImNsZWFuVHJhbnNpdGlvblN0eWxlIiwic3RhZ2dlciIsImRlbGF5IiwicmVtb3ZlRWxlbSIsInJlbW92ZSIsImhpZGUiLCJyZXZlYWwiLCJpc0hpZGRlbiIsInRyYW5zaXRpb25FbmRQcm9wZXJ0eSIsImdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkiLCJvblJldmVhbFRyYW5zaXRpb25FbmQiLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsInN0eWxlUHJvcGVydHkiLCJvcHRpb25TdHlsZSIsIm9wYWNpdHkiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwiZGVzdHJveSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIkdVSUQiLCJpbnN0YW5jZXMiLCJxdWVyeUVsZW1lbnQiLCIkZWxlbWVudCIsImRlZmF1bHRzIiwiaWQiLCJvdXRsYXllckdVSUQiLCJpc0luaXRMYXlvdXQiLCJjb250YWluZXJTdHlsZSIsImluaXRMYXlvdXQiLCJvcmlnaW5MZWZ0Iiwib3JpZ2luVG9wIiwicmVzaXplIiwicmVzaXplQ29udGFpbmVyIiwib2xkT3B0aW9uIiwiY29tcGF0T3B0aW9ucyIsImhvcml6b250YWwiLCJsYXlvdXRJbnN0YW50IiwicmVsb2FkSXRlbXMiLCJzdGFtcHMiLCJzdGFtcCIsImNhbkJpbmRSZXNpemUiLCJiaW5kUmVzaXplIiwiaXRlbXMiLCJfaXRlbWl6ZSIsImNoaWxkcmVuIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwibWFwIiwiX3Jlc2V0TGF5b3V0IiwiX21hbmFnZVN0YW1wcyIsImlzSW5zdGFudCIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2dldE1lYXN1cmVtZW50IiwiX2dldEl0ZW1zRm9yTGF5b3V0IiwiX2xheW91dEl0ZW1zIiwiX3Bvc3RMYXlvdXQiLCJmaWx0ZXIiLCJpc0lnbm9yZWQiLCJfZW1pdENvbXBsZXRlT25JdGVtcyIsInF1ZXVlIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsImlzTGF5b3V0SW5zdGFudCIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJ1cGRhdGVTdGFnZ2VyIiwiX3Bvc2l0aW9uSXRlbSIsImdldE1pbGxpc2Vjb25kcyIsImlzUmVzaXppbmdDb250YWluZXIiLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwibWVhc3VyZSIsImlzV2lkdGgiLCJlbGVtU2l6ZSIsIm1heCIsIm9uQ29tcGxldGUiLCJkaXNwYXRjaEV2ZW50IiwiY291bnQiLCJkb25lQ291bnQiLCJ0aWNrIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJFdmVudCIsInRyaWdnZXIiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJvZmZzZXQiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImhhc1NpemVzIiwiYWRkSXRlbXMiLCJhcHBlbmRlZCIsInByZXBlbmRlZCIsInByZXZpb3VzSXRlbXMiLCJyZXZlYWxJdGVtRWxlbWVudHMiLCJnZXRJdGVtcyIsImhpZGVJdGVtRWxlbWVudHMiLCJyZW1vdmVJdGVtcyIsInJlbW92ZURhdGEiLCJMYXlvdXQiLCJzdWJjbGFzcyIsIlBhcmVudCIsIlN1YkNsYXNzIiwibXNVbml0cyIsIm1zIiwicyIsInRpbWUiLCJ1bml0IiwibXVsdCIsIk1hc29ucnkiLCJmaXRXaWR0aCIsIm1lYXN1cmVDb2x1bW5zIiwiY29sWXMiLCJjb2xzIiwibWF4WSIsImhvcml6b250YWxDb2xJbmRleCIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJmaXJzdEl0ZW0iLCJmaXJzdEl0ZW1FbGVtIiwiY29udGFpbmVyV2lkdGgiLCJndXR0ZXIiLCJleGNlc3MiLCJtYXRoTWV0aG9kIiwiaXNGaXRXaWR0aCIsImNvbnRhaW5lciIsInJlbWFpbmRlciIsImNvbFNwYW4iLCJtaW4iLCJjb2xQb3NNZXRob2QiLCJob3Jpem9udGFsT3JkZXIiLCJjb2xQb3NpdGlvbiIsImNvbCIsInNldEhlaWdodCIsInNldE1heCIsIl9nZXRUb3BDb2xQb3NpdGlvbiIsImNvbEdyb3VwIiwiX2dldFRvcENvbEdyb3VwIiwibWluaW11bVkiLCJncm91cENvdW50IiwiX2dldENvbEdyb3VwWSIsImdyb3VwQ29sWXMiLCJfZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uIiwiaXNPdmVyIiwiaGFzU2l6ZSIsInN0YW1wU2l6ZSIsImZpcnN0WCIsImxhc3RYIiwiZmlyc3RDb2wiLCJmbG9vciIsImxhc3RDb2wiLCJzdGFtcE1heFkiLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJ1bnVzZWRDb2xzIiwicHJldmlvdXNXaWR0aCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7QUFRQTs7Ozs7O0FBTUE7O0FBRUUsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFDNUI7QUFDQSwyQkFGNEIsQ0FFRjtBQUMxQixNQUFLLElBQUwsRUFBaUQ7QUFDL0M7QUFDQUMscUNBQXdDLENBQUUsdUJBQUYsQ0FBeEMsbUNBQXNELFVBQVVDLE1BQVYsRUFBbUI7QUFDdkUsYUFBT0YsUUFBU0QsTUFBVCxFQUFpQkcsTUFBakIsQ0FBUDtBQUNELEtBRkQ7QUFBQTtBQUdELEdBTEQsTUFLTyxJQUFLLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsTUFBaUIsUUFBakIsSUFBNkJBLE9BQU9DLE9BQXpDLEVBQW1EO0FBQ3hEO0FBQ0FELFdBQU9DLE9BQVAsR0FBaUJKLFFBQ2ZELE1BRGUsRUFFZk0sUUFBUSxRQUFSLENBRmUsQ0FBakI7QUFJRCxHQU5NLE1BTUE7QUFDTDtBQUNBTixXQUFPTyxhQUFQLEdBQXVCTixRQUNyQkQsTUFEcUIsRUFFckJBLE9BQU9HLE1BRmMsQ0FBdkI7QUFJRDtBQUVGLENBdEJDLEVBc0JDSCxNQXRCRCxFQXNCUyxTQUFTQyxPQUFULENBQWtCRCxNQUFsQixFQUEwQkcsTUFBMUIsRUFBbUM7QUFDOUM7O0FBRUE7O0FBRUEsTUFBSUss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QUFqQjtBQUNBO0FBQ0EsUUFBSTlaLElBQUksS0FBS3NYLElBQWI7QUFDQSxXQUFRLEVBQUV0WCxDQUFWLEVBQWM7QUFDWixVQUFLLEtBQUtxWCxLQUFMLENBQVdyWCxDQUFYLE1BQWtCLENBQXZCLEVBQTJCO0FBQ3pCO0FBQ0Q7QUFDRDhaO0FBQ0Q7QUFDRDtBQUNBLFdBQU8sQ0FBRSxLQUFLeEMsSUFBTCxHQUFZd0MsVUFBZCxJQUE2QixLQUFLcEMsV0FBbEMsR0FBZ0QsS0FBS0ksTUFBNUQ7QUFDRCxHQVpEOztBQWNBaFgsUUFBTStVLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsUUFBSWtFLGdCQUFnQixLQUFLbEMsY0FBekI7QUFDQSxTQUFLSixpQkFBTDtBQUNBLFdBQU9zQyxpQkFBaUIsS0FBS2xDLGNBQTdCO0FBQ0QsR0FKRDs7QUFNQSxTQUFPWCxPQUFQO0FBRUQsQ0F0T0MsQ0FBRiIsImZpbGUiOiI5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBNYXNvbnJ5IFBBQ0tBR0VEIHY0LjIuMlxyXG4gKiBDYXNjYWRpbmcgZ3JpZCBsYXlvdXQgbGlicmFyeVxyXG4gKiBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqIGJ5IERhdmlkIERlU2FuZHJvXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEJyaWRnZXQgbWFrZXMgalF1ZXJ5IHdpZGdldHNcclxuICogdjIuMC4xXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2pxdWVyeS1icmlkZ2V0L2pxdWVyeS1icmlkZ2V0JyxbICdqcXVlcnknIF0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnanF1ZXJ5JylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cualF1ZXJ5QnJpZGdldCA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmpRdWVyeVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgalF1ZXJ5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xyXG5cclxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGxvZ2dpbmcgZXJyb3JzXHJcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xyXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IGZ1bmN0aW9uKCkge30gOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSBqUXVlcnlCcmlkZ2V0IC0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBqUXVlcnlCcmlkZ2V0KCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzLCAkICkge1xyXG4gICQgPSAkIHx8IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xyXG4gIGlmICggISQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBhZGQgb3B0aW9uIG1ldGhvZCAtPiAkKCkucGx1Z2luKCdvcHRpb24nLCB7Li4ufSlcclxuICBpZiAoICFQbHVnaW5DbGFzcy5wcm90b3R5cGUub3B0aW9uICkge1xyXG4gICAgLy8gb3B0aW9uIHNldHRlclxyXG4gICAgUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gICAgICAvLyBiYWlsIG91dCBpZiBub3QgYW4gb2JqZWN0XHJcbiAgICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggb3B0cyApICl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBtYWtlIGpRdWVyeSBwbHVnaW5cclxuICAkLmZuWyBuYW1lc3BhY2UgXSA9IGZ1bmN0aW9uKCBhcmcwIC8qLCBhcmcxICovICkge1xyXG4gICAgaWYgKCB0eXBlb2YgYXJnMCA9PSAnc3RyaW5nJyApIHtcclxuICAgICAgLy8gbWV0aG9kIGNhbGwgJCgpLnBsdWdpbiggJ21ldGhvZE5hbWUnLCB7IG9wdGlvbnMgfSApXHJcbiAgICAgIC8vIHNoaWZ0IGFyZ3VtZW50cyBieSAxXHJcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcclxuICAgICAgcmV0dXJuIG1ldGhvZENhbGwoIHRoaXMsIGFyZzAsIGFyZ3MgKTtcclxuICAgIH1cclxuICAgIC8vIGp1c3QgJCgpLnBsdWdpbih7IG9wdGlvbnMgfSlcclxuICAgIHBsYWluQ2FsbCggdGhpcywgYXJnMCApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLy8gJCgpLnBsdWdpbignbWV0aG9kTmFtZScpXHJcbiAgZnVuY3Rpb24gbWV0aG9kQ2FsbCggJGVsZW1zLCBtZXRob2ROYW1lLCBhcmdzICkge1xyXG4gICAgdmFyIHJldHVyblZhbHVlO1xyXG4gICAgdmFyIHBsdWdpbk1ldGhvZFN0ciA9ICckKCkuJyArIG5hbWVzcGFjZSArICcoXCInICsgbWV0aG9kTmFtZSArICdcIiknO1xyXG5cclxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuICAgICAgLy8gZ2V0IGluc3RhbmNlXHJcbiAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggZWxlbSwgbmFtZXNwYWNlICk7XHJcbiAgICAgIGlmICggIWluc3RhbmNlICkge1xyXG4gICAgICAgIGxvZ0Vycm9yKCBuYW1lc3BhY2UgKyAnIG5vdCBpbml0aWFsaXplZC4gQ2Fubm90IGNhbGwgbWV0aG9kcywgaS5lLiAnICtcclxuICAgICAgICAgIHBsdWdpbk1ldGhvZFN0ciApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG1ldGhvZCA9IGluc3RhbmNlWyBtZXRob2ROYW1lIF07XHJcbiAgICAgIGlmICggIW1ldGhvZCB8fCBtZXRob2ROYW1lLmNoYXJBdCgwKSA9PSAnXycgKSB7XHJcbiAgICAgICAgbG9nRXJyb3IoIHBsdWdpbk1ldGhvZFN0ciArICcgaXMgbm90IGEgdmFsaWQgbWV0aG9kJyApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYXBwbHkgbWV0aG9kLCBnZXQgcmV0dXJuIHZhbHVlXHJcbiAgICAgIHZhciB2YWx1ZSA9IG1ldGhvZC5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTtcclxuICAgICAgLy8gc2V0IHJldHVybiB2YWx1ZSBpZiB2YWx1ZSBpcyByZXR1cm5lZCwgdXNlIG9ubHkgZmlyc3QgdmFsdWVcclxuICAgICAgcmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiByZXR1cm5WYWx1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkID8gcmV0dXJuVmFsdWUgOiAkZWxlbXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwbGFpbkNhbGwoICRlbGVtcywgb3B0aW9ucyApIHtcclxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UgKTtcclxuICAgICAgaWYgKCBpbnN0YW5jZSApIHtcclxuICAgICAgICAvLyBzZXQgb3B0aW9ucyAmIGluaXRcclxuICAgICAgICBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcclxuICAgICAgICBpbnN0YW5jZS5faW5pdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGluaXRpYWxpemUgbmV3IGluc3RhbmNlXHJcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgUGx1Z2luQ2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcclxuICAgICAgICAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVKUXVlcnkoICQgKTtcclxuXHJcbn1cclxuXHJcbi8vIC0tLS0tIHVwZGF0ZUpRdWVyeSAtLS0tLSAvL1xyXG5cclxuLy8gc2V0ICQuYnJpZGdldCBmb3IgdjEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuZnVuY3Rpb24gdXBkYXRlSlF1ZXJ5KCAkICkge1xyXG4gIGlmICggISQgfHwgKCAkICYmICQuYnJpZGdldCApICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAkLmJyaWRnZXQgPSBqUXVlcnlCcmlkZ2V0O1xyXG59XHJcblxyXG51cGRhdGVKUXVlcnkoIGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5ICk7XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiBqUXVlcnlCcmlkZ2V0O1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIEV2RW1pdHRlciB2MS4xLjBcclxuICogTGlsJyBldmVudCBlbWl0dGVyXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqL1xyXG5cclxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcclxuICAgIGRlZmluZSggJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XHJcbiAgfVxyXG5cclxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxyXG5cclxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcclxuXHJcbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XHJcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gc2V0IGV2ZW50cyBoYXNoXHJcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcclxuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XHJcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xyXG4gIC8vIG9ubHkgYWRkIG9uY2VcclxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xyXG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcclxuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBhZGQgZXZlbnRcclxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XHJcbiAgLy8gc2V0IG9uY2UgZmxhZ1xyXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcclxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xyXG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxyXG4gIHZhciBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcclxuICAvLyBzZXQgZmxhZ1xyXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xyXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcclxuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xyXG4gIGlmICggaW5kZXggIT0gLTEgKSB7XHJcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xyXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcclxuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXHJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xyXG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xyXG4gIC8vIG9uY2Ugc3R1ZmZcclxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XHJcblxyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cclxuICAgIHZhciBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XHJcbiAgICBpZiAoIGlzT25jZSApIHtcclxuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXHJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxyXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xyXG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcclxuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XHJcbiAgICB9XHJcbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXHJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xyXG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xyXG59O1xyXG5cclxucmV0dXJuIEV2RW1pdHRlcjtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTaXplIHYyLjAuM1xyXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKiBqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qIGdsb2JhbHMgY29uc29sZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZ2V0LXNpemUvZ2V0LXNpemUnLGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XHJcbiAgfVxyXG5cclxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcclxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcclxuICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xyXG4gIHJldHVybiBpc1ZhbGlkICYmIG51bTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBtZWFzdXJlbWVudHMgPSBbXHJcbiAgJ3BhZGRpbmdMZWZ0JyxcclxuICAncGFkZGluZ1JpZ2h0JyxcclxuICAncGFkZGluZ1RvcCcsXHJcbiAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICdtYXJnaW5MZWZ0JyxcclxuICAnbWFyZ2luUmlnaHQnLFxyXG4gICdtYXJnaW5Ub3AnLFxyXG4gICdtYXJnaW5Cb3R0b20nLFxyXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxyXG4gICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAnYm9yZGVyVG9wV2lkdGgnLFxyXG4gICdib3JkZXJCb3R0b21XaWR0aCdcclxuXTtcclxuXHJcbnZhciBtZWFzdXJlbWVudHNMZW5ndGggPSBtZWFzdXJlbWVudHMubGVuZ3RoO1xyXG5cclxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XHJcbiAgdmFyIHNpemUgPSB7XHJcbiAgICB3aWR0aDogMCxcclxuICAgIGhlaWdodDogMCxcclxuICAgIGlubmVyV2lkdGg6IDAsXHJcbiAgICBpbm5lckhlaWdodDogMCxcclxuICAgIG91dGVyV2lkdGg6IDAsXHJcbiAgICBvdXRlckhlaWdodDogMFxyXG4gIH07XHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XHJcbiAgfVxyXG4gIHJldHVybiBzaXplO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTdHlsZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldFN0eWxlLCBnZXQgc3R5bGUgb2YgZWxlbWVudCwgY2hlY2sgZm9yIEZpcmVmb3ggYnVnXHJcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3R5bGUoIGVsZW0gKSB7XHJcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xyXG4gIGlmICggIXN0eWxlICkge1xyXG4gICAgbG9nRXJyb3IoICdTdHlsZSByZXR1cm5lZCAnICsgc3R5bGUgK1xyXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcclxuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcclxuICB9XHJcbiAgcmV0dXJuIHN0eWxlO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIGlzU2V0dXAgPSBmYWxzZTtcclxuXHJcbnZhciBpc0JveFNpemVPdXRlcjtcclxuXHJcbi8qKlxyXG4gKiBzZXR1cFxyXG4gKiBjaGVjayBpc0JveFNpemVyT3V0ZXJcclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcclxuICovXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIC8vIHNldHVwIG9uY2VcclxuICBpZiAoIGlzU2V0dXAgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlzU2V0dXAgPSB0cnVlO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXHJcbiAgICovXHJcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XHJcbiAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMXB4IDJweCAzcHggNHB4JztcclxuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xyXG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gIGRpdi5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XHJcblxyXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgYm9keS5hcHBlbmRDaGlsZCggZGl2ICk7XHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xyXG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XHJcbiAgaXNCb3hTaXplT3V0ZXIgPSBNYXRoLnJvdW5kKCBnZXRTdHlsZVNpemUoIHN0eWxlLndpZHRoICkgKSA9PSAyMDA7XHJcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xyXG5cclxuICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcclxuICBzZXR1cCgpO1xyXG5cclxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG5cclxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xyXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZWxlbSApO1xyXG5cclxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxyXG4gIGlmICggc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgKSB7XHJcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzaXplID0ge307XHJcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XHJcbiAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XHJcblxyXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XHJcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcclxuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcclxuICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xyXG4gIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxyXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXHJcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcclxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcclxuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG4gIH1cclxuXHJcbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuXHJcbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcbnJldHVybiBnZXRTaXplO1xyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogbWF0Y2hlc1NlbGVjdG9yIHYyLjAuMlxyXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XHJcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xyXG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcclxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXHJcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XHJcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcclxuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xyXG4gICAgICAgIHJldHVybiBtZXRob2Q7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KSgpO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XHJcbiAgfTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBGaXp6eSBVSSB1dGlscyB2Mi4wLjdcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdmaXp6eS11aS11dGlscy91dGlscycsW1xyXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xyXG4gICAgXSwgZnVuY3Rpb24oIG1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XHJcblxyXG5cclxuXHJcbnZhciB1dGlscyA9IHt9O1xyXG5cclxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmRzIG9iamVjdHNcclxudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cclxuXHJcbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcclxuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cclxuXHJcbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcclxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcclxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xyXG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XHJcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICB2YXIgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xyXG4gIGlmICggaXNBcnJheUxpa2UgKSB7XHJcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XHJcbiAgICByZXR1cm4gYXJyYXlTbGljZS5jYWxsKCBvYmogKTtcclxuICB9XHJcblxyXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxyXG4gIHJldHVybiBbIG9iaiBdO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xyXG5cclxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICB2YXIgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XHJcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcclxuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXHJcblxyXG51dGlscy5nZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbSwgc2VsZWN0b3IgKSB7XHJcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cclxuXHJcbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxyXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xyXG5cclxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcclxuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGZmRWxlbXMgPSBbXTtcclxuXHJcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcclxuICAgIGlmICggISggZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXHJcbiAgICBpZiAoICFzZWxlY3RvciApIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXHJcbiAgICAvLyBmaWx0ZXJcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcclxuICAgIH1cclxuICAgIC8vIGZpbmQgY2hpbGRyZW5cclxuICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xyXG4gICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEVsZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbaV0gKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGZmRWxlbXM7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XHJcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcclxuICAvLyBvcmlnaW5hbCBtZXRob2RcclxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xyXG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XHJcblxyXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XHJcblxyXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpc1sgdGltZW91dE5hbWUgXTtcclxuICAgIH0sIHRocmVzaG9sZCApO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xyXG5cclxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcbiAgdmFyIHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xyXG4gIGlmICggcmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnIHx8IHJlYWR5U3RhdGUgPT0gJ2ludGVyYWN0aXZlJyApIHtcclxuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxyXG4gICAgc2V0VGltZW91dCggY2FsbGJhY2sgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXHJcblxyXG4vLyBodHRwOi8vamFtZXNyb2JlcnRzLm5hbWUvYmxvZy8yMDEwLzAyLzIyL3N0cmluZy1mdW5jdGlvbnMtZm9yLWphdmFzY3JpcHQtdHJpbS10by1jYW1lbC1jYXNlLXRvLWRhc2hlZC1hbmQtdG8tdW5kZXJzY29yZS9cclxudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XHJcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcclxuICB9KS50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG5cclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxuLyoqXHJcbiAqIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3NcclxuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcclxuICogb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uc1xyXG4gKi9cclxudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcclxuICB1dGlscy5kb2NSZWFkeSggZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xyXG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcclxuICAgIHZhciBkYXRhQXR0ckVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ1snICsgZGF0YUF0dHIgKyAnXScgKTtcclxuICAgIHZhciBqc0Rhc2hFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtJyArIGRhc2hlZE5hbWVzcGFjZSApO1xyXG4gICAgdmFyIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBkYXRhQXR0ckVsZW1zIClcclxuICAgICAgLmNvbmNhdCggdXRpbHMubWFrZUFycmF5KCBqc0Rhc2hFbGVtcyApICk7XHJcbiAgICB2YXIgZGF0YU9wdGlvbnNBdHRyID0gZGF0YUF0dHIgKyAnLW9wdGlvbnMnO1xyXG4gICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcblxyXG4gICAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICkgfHxcclxuICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YU9wdGlvbnNBdHRyICk7XHJcbiAgICAgIHZhciBvcHRpb25zO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcclxuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xyXG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcclxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcGFyc2luZyAnICsgZGF0YUF0dHIgKyAnIG9uICcgKyBlbGVtLmNsYXNzTmFtZSArXHJcbiAgICAgICAgICAnOiAnICsgZXJyb3IgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGluaXRpYWxpemVcclxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XHJcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcclxuICAgICAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG5yZXR1cm4gdXRpbHM7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogT3V0bGF5ZXIgSXRlbVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvaXRlbScsW1xyXG4gICAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeVxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5PdXRsYXllciA9IHt9O1xyXG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgZ2V0U2l6ZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gaXNFbXB0eU9iaiggb2JqICkge1xyXG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHJvcCA9IG51bGw7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENTUzMgc3VwcG9ydCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcbnZhciBkb2NFbGVtU3R5bGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2l0aW9uID09ICdzdHJpbmcnID9cclxuICAndHJhbnNpdGlvbicgOiAnV2Via2l0VHJhbnNpdGlvbic7XHJcbnZhciB0cmFuc2Zvcm1Qcm9wZXJ0eSA9IHR5cGVvZiBkb2NFbGVtU3R5bGUudHJhbnNmb3JtID09ICdzdHJpbmcnID9cclxuICAndHJhbnNmb3JtJyA6ICdXZWJraXRUcmFuc2Zvcm0nO1xyXG5cclxudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9IHtcclxuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXHJcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xyXG5cclxuLy8gY2FjaGUgYWxsIHZlbmRvciBwcm9wZXJ0aWVzIHRoYXQgY291bGQgaGF2ZSB2ZW5kb3IgcHJlZml4XHJcbnZhciB2ZW5kb3JQcm9wZXJ0aWVzID0ge1xyXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtUHJvcGVydHksXHJcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblByb3BlcnR5LFxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0R1cmF0aW9uJyxcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdQcm9wZXJ0eScsXHJcbiAgdHJhbnNpdGlvbkRlbGF5OiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRGVsYXknXHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XHJcbiAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgdGhpcy5wb3NpdGlvbiA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcbi8vIGluaGVyaXQgRXZFbWl0dGVyXHJcbnZhciBwcm90byA9IEl0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xyXG5wcm90by5jb25zdHJ1Y3RvciA9IEl0ZW07XHJcblxyXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXHJcbiAgdGhpcy5fdHJhbnNuID0ge1xyXG4gICAgaW5nUHJvcGVydGllczoge30sXHJcbiAgICBjbGVhbjoge30sXHJcbiAgICBvbkVuZDoge31cclxuICB9O1xyXG5cclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxyXG5wcm90by5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBhcHBseSBDU1Mgc3R5bGVzIHRvIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXHJcbiAqL1xyXG5wcm90by5jc3MgPSBmdW5jdGlvbiggc3R5bGUgKSB7XHJcbiAgdmFyIGVsZW1TdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuXHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICAvLyB1c2UgdmVuZG9yIHByb3BlcnR5IGlmIGF2YWlsYWJsZVxyXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcclxuICAgIGVsZW1TdHlsZVsgc3VwcG9ydGVkUHJvcCBdID0gc3R5bGVbIHByb3AgXTtcclxuICB9XHJcbn07XHJcblxyXG4gLy8gbWVhc3VyZSBwb3NpdGlvbiwgYW5kIHNldHMgaXRcclxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQgKTtcclxuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xyXG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xyXG4gIHZhciB4VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JyBdO1xyXG4gIHZhciB5VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nIF07XHJcbiAgdmFyIHggPSBwYXJzZUZsb2F0KCB4VmFsdWUgKTtcclxuICB2YXIgeSA9IHBhcnNlRmxvYXQoIHlWYWx1ZSApO1xyXG4gIC8vIGNvbnZlcnQgcGVyY2VudCB0byBwaXhlbHNcclxuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XHJcbiAgaWYgKCB4VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xyXG4gICAgeCA9ICggeCAvIDEwMCApICogbGF5b3V0U2l6ZS53aWR0aDtcclxuICB9XHJcbiAgaWYgKCB5VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xyXG4gICAgeSA9ICggeSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQ7XHJcbiAgfVxyXG4gIC8vIGNsZWFuIHVwICdhdXRvJyBvciBvdGhlciBub24taW50ZWdlciB2YWx1ZXNcclxuICB4ID0gaXNOYU4oIHggKSA/IDAgOiB4O1xyXG4gIHkgPSBpc05hTiggeSApID8gMCA6IHk7XHJcbiAgLy8gcmVtb3ZlIHBhZGRpbmcgZnJvbSBtZWFzdXJlbWVudFxyXG4gIHggLT0gaXNPcmlnaW5MZWZ0ID8gbGF5b3V0U2l6ZS5wYWRkaW5nTGVmdCA6IGxheW91dFNpemUucGFkZGluZ1JpZ2h0O1xyXG4gIHkgLT0gaXNPcmlnaW5Ub3AgPyBsYXlvdXRTaXplLnBhZGRpbmdUb3AgOiBsYXlvdXRTaXplLnBhZGRpbmdCb3R0b207XHJcblxyXG4gIHRoaXMucG9zaXRpb24ueCA9IHg7XHJcbiAgdGhpcy5wb3NpdGlvbi55ID0geTtcclxufTtcclxuXHJcbi8vIHNldCBzZXR0bGVkIHBvc2l0aW9uLCBhcHBseSBwYWRkaW5nXHJcbnByb3RvLmxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xyXG4gIHZhciBzdHlsZSA9IHt9O1xyXG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XHJcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XHJcblxyXG4gIC8vIHhcclxuICB2YXIgeFBhZGRpbmcgPSBpc09yaWdpbkxlZnQgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCc7XHJcbiAgdmFyIHhQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XHJcbiAgdmFyIHhSZXNldFByb3BlcnR5ID0gaXNPcmlnaW5MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuXHJcbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xyXG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xyXG4gIHN0eWxlWyB4UHJvcGVydHkgXSA9IHRoaXMuZ2V0WFZhbHVlKCB4ICk7XHJcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcclxuICBzdHlsZVsgeFJlc2V0UHJvcGVydHkgXSA9ICcnO1xyXG5cclxuICAvLyB5XHJcbiAgdmFyIHlQYWRkaW5nID0gaXNPcmlnaW5Ub3AgPyAncGFkZGluZ1RvcCcgOiAncGFkZGluZ0JvdHRvbSc7XHJcbiAgdmFyIHlQcm9wZXJ0eSA9IGlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcclxuICB2YXIgeVJlc2V0UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XHJcblxyXG4gIHZhciB5ID0gdGhpcy5wb3NpdGlvbi55ICsgbGF5b3V0U2l6ZVsgeVBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeVByb3BlcnR5IF0gPSB0aGlzLmdldFlWYWx1ZSggeSApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgdGhpcy5jc3MoIHN0eWxlICk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxucHJvdG8uZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XHJcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcclxuICByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgIWlzSG9yaXpvbnRhbCA/XHJcbiAgICAoICggeCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKSAqIDEwMCApICsgJyUnIDogeCArICdweCc7XHJcbn07XHJcblxyXG5wcm90by5nZXRZVmFsdWUgPSBmdW5jdGlvbiggeSApIHtcclxuICB2YXIgaXNIb3Jpem9udGFsID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignaG9yaXpvbnRhbCcpO1xyXG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiBpc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4JztcclxufTtcclxuXHJcbnByb3RvLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLmdldFBvc2l0aW9uKCk7XHJcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxyXG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xyXG4gIHZhciBjdXJZID0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICB2YXIgZGlkTm90TW92ZSA9IHggPT0gdGhpcy5wb3NpdGlvbi54ICYmIHkgPT0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICAvLyBzYXZlIGVuZCBwb3NpdGlvblxyXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcclxuXHJcbiAgLy8gaWYgZGlkIG5vdCBtb3ZlIGFuZCBub3QgdHJhbnNpdGlvbmluZywganVzdCBnbyB0byBsYXlvdXRcclxuICBpZiAoIGRpZE5vdE1vdmUgJiYgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xyXG4gICAgdGhpcy5sYXlvdXRQb3NpdGlvbigpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHRyYW5zWCA9IHggLSBjdXJYO1xyXG4gIHZhciB0cmFuc1kgPSB5IC0gY3VyWTtcclxuICB2YXIgdHJhbnNpdGlvblN0eWxlID0ge307XHJcbiAgdHJhbnNpdGlvblN0eWxlLnRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNsYXRlKCB0cmFuc1gsIHRyYW5zWSApO1xyXG5cclxuICB0aGlzLnRyYW5zaXRpb24oe1xyXG4gICAgdG86IHRyYW5zaXRpb25TdHlsZSxcclxuICAgIG9uVHJhbnNpdGlvbkVuZDoge1xyXG4gICAgICB0cmFuc2Zvcm06IHRoaXMubGF5b3V0UG9zaXRpb25cclxuICAgIH0sXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlXHJcbiAgfSk7XHJcbn07XHJcblxyXG5wcm90by5nZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICAvLyBmbGlwIGNvb3JpZGluYXRlcyBpZiBvcmlnaW4gb24gcmlnaHQgb3IgYm90dG9tXHJcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcclxuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcclxuICB4ID0gaXNPcmlnaW5MZWZ0ID8geCA6IC14O1xyXG4gIHkgPSBpc09yaWdpblRvcCA/IHkgOiAteTtcclxuICByZXR1cm4gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xyXG59O1xyXG5cclxuLy8gbm9uIHRyYW5zaXRpb24gKyB0cmFuc2Zvcm0gc3VwcG9ydFxyXG5wcm90by5nb1RvID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xyXG4gIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcclxufTtcclxuXHJcbnByb3RvLm1vdmVUbyA9IHByb3RvLl90cmFuc2l0aW9uVG87XHJcblxyXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMucG9zaXRpb24ueCA9IHBhcnNlRmxvYXQoIHggKTtcclxuICB0aGlzLnBvc2l0aW9uLnkgPSBwYXJzZUZsb2F0KCB5ICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSB0cmFuc2l0aW9uIC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIC0gQ1NTXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxyXG4gKi9cclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcclxucHJvdG8uX25vblRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICB0aGlzLmNzcyggYXJncy50byApO1xyXG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgdGhpcy5fcmVtb3ZlU3R5bGVzKCBhcmdzLnRvICk7XHJcbiAgfVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXS5jYWxsKCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHByb3BlciB0cmFuc2l0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gYXJndW1lbnRzXHJcbiAqICAgQHBhcmFtIHtPYmplY3R9IHRvIC0gc3R5bGUgdG8gdHJhbnNpdGlvbiB0b1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXHJcbiAqICAgQHBhcmFtIHtCb29sZWFufSBpc0NsZWFuaW5nIC0gcmVtb3ZlcyB0cmFuc2l0aW9uIHN0eWxlcyBhZnRlciB0cmFuc2l0aW9uXHJcbiAqICAgQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kIC0gY2FsbGJhY2tcclxuICovXHJcbnByb3RvLnRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICAvLyByZWRpcmVjdCB0byBub25UcmFuc2l0aW9uIGlmIG5vIHRyYW5zaXRpb24gZHVyYXRpb25cclxuICBpZiAoICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5fbm9uVHJhbnNpdGlvbiggYXJncyApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xyXG4gIC8vIGtlZXAgdHJhY2sgb2Ygb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrIGJ5IGNzcyBwcm9wZXJ0eVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgX3RyYW5zaXRpb24ub25FbmRbIHByb3AgXSA9IGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF07XHJcbiAgfVxyXG4gIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXHJcbiAgZm9yICggcHJvcCBpbiBhcmdzLnRvICkge1xyXG4gICAgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcCBdID0gdHJ1ZTtcclxuICAgIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0byBjbGVhbiB1cCB3aGVuIHRyYW5zaXRpb24gaXMgZG9uZVxyXG4gICAgaWYgKCBhcmdzLmlzQ2xlYW5pbmcgKSB7XHJcbiAgICAgIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wIF0gPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gc2V0IGZyb20gc3R5bGVzXHJcbiAgaWYgKCBhcmdzLmZyb20gKSB7XHJcbiAgICB0aGlzLmNzcyggYXJncy5mcm9tICk7XHJcbiAgICAvLyBmb3JjZSByZWRyYXcuIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xyXG4gICAgdmFyIGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgLy8gaGFjayBmb3IgSlNIaW50IHRvIGh1c2ggYWJvdXQgdW51c2VkIHZhclxyXG4gICAgaCA9IG51bGw7XHJcbiAgfVxyXG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5lbmFibGVUcmFuc2l0aW9uKCBhcmdzLnRvICk7XHJcbiAgLy8gc2V0IHN0eWxlcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXHJcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcclxuXHJcbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG5cclxufTtcclxuXHJcbi8vIGRhc2ggYmVmb3JlIGFsbCBjYXAgbGV0dGVycywgaW5jbHVkaW5nIGZpcnN0IGZvclxyXG4vLyBXZWJraXRUcmFuc2Zvcm0gPT4gLXdlYmtpdC10cmFuc2Zvcm1cclxuZnVuY3Rpb24gdG9EYXNoZWRBbGwoIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oW0EtWl0pL2csIGZ1bmN0aW9uKCAkMSApIHtcclxuICAgIHJldHVybiAnLScgKyAkMS50b0xvd2VyQ2FzZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BzID0gJ29wYWNpdHksJyArIHRvRGFzaGVkQWxsKCB0cmFuc2Zvcm1Qcm9wZXJ0eSApO1xyXG5cclxucHJvdG8uZW5hYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKC8qIHN0eWxlICovKSB7XHJcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxyXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXHJcbiAgaWYgKCB0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XHJcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXHJcbiAgLy8gd2hpbGUgYSB0cmFuc2l0aW9uIGlzIGhhcHBlbmluZ1xyXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XHJcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgLy8gICAvLyBkYXNoLWlmeSBjYW1lbENhc2VkIHByb3BlcnRpZXMgbGlrZSBXZWJraXRUcmFuc2l0aW9uXHJcbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XHJcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcclxuICAvLyB9XHJcbiAgLy8gbXVuZ2UgbnVtYmVyIHRvIG1pbGxpc2Vjb25kLCB0byBtYXRjaCBzdGFnZ2VyXHJcbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XHJcbiAgZHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gPT0gJ251bWJlcicgPyBkdXJhdGlvbiArICdtcycgOiBkdXJhdGlvbjtcclxuICAvLyBlbmFibGUgdHJhbnNpdGlvbiBzdHlsZXNcclxuICB0aGlzLmNzcyh7XHJcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wcyxcclxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICB0cmFuc2l0aW9uRGVsYXk6IHRoaXMuc3RhZ2dlckRlbGF5IHx8IDBcclxuICB9KTtcclxuICAvLyBsaXN0ZW4gZm9yIHRyYW5zaXRpb24gZW5kIGV2ZW50XHJcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xyXG5cclxucHJvdG8ub253ZWJraXRUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xyXG59O1xyXG5cclxucHJvdG8ub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcclxufTtcclxuXHJcbi8vIHByb3BlcnRpZXMgdGhhdCBJIG11bmdlIHRvIG1ha2UgbXkgbGlmZSBlYXNpZXJcclxudmFyIGRhc2hlZFZlbmRvclByb3BlcnRpZXMgPSB7XHJcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcclxufTtcclxuXHJcbnByb3RvLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAvLyBkaXNyZWdhcmQgYnViYmxlZCBldmVudHMgZnJvbSBjaGlsZHJlblxyXG4gIGlmICggZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcclxuICB2YXIgcHJvcGVydHlOYW1lID0gZGFzaGVkVmVuZG9yUHJvcGVydGllc1sgZXZlbnQucHJvcGVydHlOYW1lIF0gfHwgZXZlbnQucHJvcGVydHlOYW1lO1xyXG5cclxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICBkZWxldGUgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcGVydHlOYW1lIF07XHJcbiAgLy8gY2hlY2sgaWYgYW55IHByb3BlcnRpZXMgYXJlIHN0aWxsIHRyYW5zaXRpb25pbmdcclxuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcclxuICAgIC8vIGFsbCBwcm9wZXJ0aWVzIGhhdmUgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb24oKTtcclxuICB9XHJcbiAgLy8gY2xlYW4gc3R5bGVcclxuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5jbGVhbiApIHtcclxuICAgIC8vIGNsZWFuIHVwIHN0eWxlXHJcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGVbIGV2ZW50LnByb3BlcnR5TmFtZSBdID0gJyc7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24uY2xlYW5bIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuICAvLyB0cmlnZ2VyIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFja1xyXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLm9uRW5kICkge1xyXG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcclxuICAgIG9uVHJhbnNpdGlvbkVuZC5jYWxsKCB0aGlzICk7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5lbWl0RXZlbnQoICd0cmFuc2l0aW9uRW5kJywgWyB0aGlzIF0gKTtcclxufTtcclxuXHJcbnByb3RvLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XHJcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcclxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxyXG4qKi9cclxucHJvdG8uX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcclxuICAvLyBjbGVhbiB1cCB0cmFuc2l0aW9uIHN0eWxlc1xyXG4gIHZhciBjbGVhblN0eWxlID0ge307XHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICBjbGVhblN0eWxlWyBwcm9wIF0gPSAnJztcclxuICB9XHJcbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcclxufTtcclxuXHJcbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICcnLFxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXHJcbiAgdHJhbnNpdGlvbkRlbGF5OiAnJ1xyXG59O1xyXG5cclxucHJvdG8ucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5jc3MoIGNsZWFuVHJhbnNpdGlvblN0eWxlICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzdGFnZ2VyIC0tLS0tIC8vXHJcblxyXG5wcm90by5zdGFnZ2VyID0gZnVuY3Rpb24oIGRlbGF5ICkge1xyXG4gIGRlbGF5ID0gaXNOYU4oIGRlbGF5ICkgPyAwIDogZGVsYXk7XHJcbiAgdGhpcy5zdGFnZ2VyRGVsYXkgPSBkZWxheSArICdtcyc7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXHJcblxyXG4vLyByZW1vdmUgZWxlbWVudCBmcm9tIERPTVxyXG5wcm90by5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXHJcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcclxuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XHJcbn07XHJcblxyXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBqdXN0IHJlbW92ZSBlbGVtZW50IGlmIG5vIHRyYW5zaXRpb24gc3VwcG9ydCBvciBubyB0cmFuc2l0aW9uXHJcbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBzdGFydCB0cmFuc2l0aW9uXHJcbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgfSk7XHJcbiAgdGhpcy5oaWRlKCk7XHJcbn07XHJcblxyXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5pc0hpZGRlbjtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ3Zpc2libGVTdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICB0bzogb3B0aW9ucy52aXNpYmxlU3R5bGUsXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbnByb3RvLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIHZpc2libGVcclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxyXG4gIGlmICggIXRoaXMuaXNIaWRkZW4gKSB7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgncmV2ZWFsJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBzdHlsZSBwcm9wZXJ0eSB1c2UgZm9yIGhpZGUvcmV2ZWFsIHRyYW5zaXRpb24gZW5kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZVByb3BlcnR5IC0gaGlkZGVuU3R5bGUvdmlzaWJsZVN0eWxlXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqL1xyXG5wcm90by5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gZnVuY3Rpb24oIHN0eWxlUHJvcGVydHkgKSB7XHJcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xyXG4gIC8vIHVzZSBvcGFjaXR5XHJcbiAgaWYgKCBvcHRpb25TdHlsZS5vcGFjaXR5ICkge1xyXG4gICAgcmV0dXJuICdvcGFjaXR5JztcclxuICB9XHJcbiAgLy8gZ2V0IGZpcnN0IHByb3BlcnR5XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XHJcbiAgICByZXR1cm4gcHJvcDtcclxuICB9XHJcbn07XHJcblxyXG5wcm90by5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2V0IGZsYWdcclxuICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ2hpZGRlblN0eWxlJyk7XHJcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICAvLyBrZWVwIGhpZGRlbiBzdHVmZiBoaWRkZW5cclxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxyXG4gIH0pO1xyXG59O1xyXG5cclxucHJvdG8ub25IaWRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxyXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gdW4taGlkZGVuXHJcbiAgaWYgKCB0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJycsXHJcbiAgICBsZWZ0OiAnJyxcclxuICAgIHJpZ2h0OiAnJyxcclxuICAgIHRvcDogJycsXHJcbiAgICBib3R0b206ICcnLFxyXG4gICAgdHJhbnNpdGlvbjogJycsXHJcbiAgICB0cmFuc2Zvcm06ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBPdXRsYXllciB2Mi4xLjFcclxuICogdGhlIGJyYWlucyBhbmQgZ3V0cyBvZiBhIGxheW91dCBsaWJyYXJ5XHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcclxuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXHJcbiAgICAgICAgJy4vaXRlbSdcclxuICAgICAgXSxcclxuICAgICAgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcclxuICAgICAgcmVxdWlyZSgnLi9pdGVtJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xyXG5cclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbnZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcclxudmFyIEdVSUQgPSAwO1xyXG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgT3V0bGF5ZXIgaW50YW5jZXNcclxudmFyIGluc3RhbmNlcyA9IHt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIE91dGxheWVyKCBlbGVtZW50LCBvcHRpb25zICkge1xyXG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcclxuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XHJcbiAgICBpZiAoIGNvbnNvbGUgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgJyArIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICtcclxuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcclxuICAvLyBhZGQgalF1ZXJ5XHJcbiAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIC8vIG9wdGlvbnNcclxuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XHJcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcclxuXHJcbiAgLy8gYWRkIGlkIGZvciBPdXRsYXllci5nZXRGcm9tRWxlbWVudFxyXG4gIHZhciBpZCA9ICsrR1VJRDtcclxuICB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEID0gaWQ7IC8vIGV4cGFuZG9cclxuICBpbnN0YW5jZXNbIGlkIF0gPSB0aGlzOyAvLyBhc3NvY2lhdGUgdmlhIGlkXHJcblxyXG4gIC8vIGtpY2sgaXQgb2ZmXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gIHZhciBpc0luaXRMYXlvdXQgPSB0aGlzLl9nZXRPcHRpb24oJ2luaXRMYXlvdXQnKTtcclxuICBpZiAoIGlzSW5pdExheW91dCApIHtcclxuICAgIHRoaXMubGF5b3V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBzZXR0aW5ncyBhcmUgZm9yIGludGVybmFsIHVzZSBvbmx5XHJcbk91dGxheWVyLm5hbWVzcGFjZSA9ICdvdXRsYXllcic7XHJcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xyXG5cclxuLy8gZGVmYXVsdCBvcHRpb25zXHJcbk91dGxheWVyLmRlZmF1bHRzID0ge1xyXG4gIGNvbnRhaW5lclN0eWxlOiB7XHJcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xyXG4gIH0sXHJcbiAgaW5pdExheW91dDogdHJ1ZSxcclxuICBvcmlnaW5MZWZ0OiB0cnVlLFxyXG4gIG9yaWdpblRvcDogdHJ1ZSxcclxuICByZXNpemU6IHRydWUsXHJcbiAgcmVzaXplQ29udGFpbmVyOiB0cnVlLFxyXG4gIC8vIGl0ZW0gb3B0aW9uc1xyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJzAuNHMnLFxyXG4gIGhpZGRlblN0eWxlOiB7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMC4wMDEpJ1xyXG4gIH0sXHJcbiAgdmlzaWJsZVN0eWxlOiB7XHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHByb3RvID0gT3V0bGF5ZXIucHJvdG90eXBlO1xyXG4vLyBpbmhlcml0IEV2RW1pdHRlclxyXG51dGlscy5leHRlbmQoIHByb3RvLCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogc2V0IG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICovXHJcbnByb3RvLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGJhY2t3YXJkcyBjb21wYXRpYmxlIG9wdGlvbiB2YWx1ZSwgY2hlY2sgb2xkIG5hbWVcclxuICovXHJcbnByb3RvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiggb3B0aW9uICkge1xyXG4gIHZhciBvbGRPcHRpb24gPSB0aGlzLmNvbnN0cnVjdG9yLmNvbXBhdE9wdGlvbnNbIG9wdGlvbiBdO1xyXG4gIHJldHVybiBvbGRPcHRpb24gJiYgdGhpcy5vcHRpb25zWyBvbGRPcHRpb24gXSAhPT0gdW5kZWZpbmVkID9cclxuICAgIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gOiB0aGlzLm9wdGlvbnNbIG9wdGlvbiBdO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyA9IHtcclxuICAvLyBjdXJyZW50TmFtZTogb2xkTmFtZVxyXG4gIGluaXRMYXlvdXQ6ICdpc0luaXRMYXlvdXQnLFxyXG4gIGhvcml6b250YWw6ICdpc0hvcml6b250YWwnLFxyXG4gIGxheW91dEluc3RhbnQ6ICdpc0xheW91dEluc3RhbnQnLFxyXG4gIG9yaWdpbkxlZnQ6ICdpc09yaWdpbkxlZnQnLFxyXG4gIG9yaWdpblRvcDogJ2lzT3JpZ2luVG9wJyxcclxuICByZXNpemU6ICdpc1Jlc2l6ZUJvdW5kJyxcclxuICByZXNpemVDb250YWluZXI6ICdpc1Jlc2l6aW5nQ29udGFpbmVyJ1xyXG59O1xyXG5cclxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXHJcbiAgdGhpcy5yZWxvYWRJdGVtcygpO1xyXG4gIC8vIGVsZW1lbnRzIHRoYXQgYWZmZWN0IGxheW91dCwgYnV0IGFyZSBub3QgbGFpZCBvdXRcclxuICB0aGlzLnN0YW1wcyA9IFtdO1xyXG4gIHRoaXMuc3RhbXAoIHRoaXMub3B0aW9ucy5zdGFtcCApO1xyXG4gIC8vIHNldCBjb250YWluZXIgc3R5bGVcclxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XHJcblxyXG4gIC8vIGJpbmQgcmVzaXplIG1ldGhvZFxyXG4gIHZhciBjYW5CaW5kUmVzaXplID0gdGhpcy5fZ2V0T3B0aW9uKCdyZXNpemUnKTtcclxuICBpZiAoIGNhbkJpbmRSZXNpemUgKSB7XHJcbiAgICB0aGlzLmJpbmRSZXNpemUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFnYWluIGFuZCBnZXRzIGJyaWNrcyBpbiBwcm9wZXIgb3JkZXJcclxucHJvdG8ucmVsb2FkSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHR1cm4gZWxlbWVudHMgaW50byBPdXRsYXllci5JdGVtcyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgT3V0bGF5ZXIgSXRlbXNcclxuICovXHJcbnByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcclxuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcclxuXHJcbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBpdGVtRWxlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGl0ZW1FbGVtc1tpXTtcclxuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcclxuICAgIGl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgaXRlbSBlbGVtZW50cyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gaXRlbSBlbGVtZW50c1xyXG4gKi9cclxucHJvdG8uX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgcmV0dXJuIHV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyggZWxlbXMsIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcclxuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKi9cclxucHJvdG8uZ2V0SXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKCBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIHJldHVybiBpdGVtLmVsZW1lbnQ7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpbml0ICYgbGF5b3V0IC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogbGF5cyBvdXQgYWxsIGl0ZW1zXHJcbiAqL1xyXG5wcm90by5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG5cclxuICAvLyBkb24ndCBhbmltYXRlIGZpcnN0IGxheW91dFxyXG4gIHZhciBsYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XHJcbiAgdmFyIGlzSW5zdGFudCA9IGxheW91dEluc3RhbnQgIT09IHVuZGVmaW5lZCA/XHJcbiAgICBsYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxyXG5wcm90by5faW5pdCA9IHByb3RvLmxheW91dDtcclxuXHJcbi8qKlxyXG4gKiBsb2dpYyBiZWZvcmUgYW55IG5ldyBsYXlvdXRcclxuICovXHJcbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG59O1xyXG5cclxuXHJcbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgbWVhc3VyZW1lbnQgZnJvbSBvcHRpb24sIGZvciBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCBndXR0ZXJcclxuICogaWYgb3B0aW9uIGlzIFN0cmluZyAtPiBnZXQgZWxlbWVudCBmcm9tIHNlbGVjdG9yIHN0cmluZywgJiBnZXQgc2l6ZSBvZiBlbGVtZW50XHJcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcclxuICogZWxzZSB1c2Ugb3B0aW9uIGFzIGEgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIHdpZHRoIG9yIGhlaWdodFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxucHJvdG8uX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oIG1lYXN1cmVtZW50LCBzaXplICkge1xyXG4gIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbIG1lYXN1cmVtZW50IF07XHJcbiAgdmFyIGVsZW07XHJcbiAgaWYgKCAhb3B0aW9uICkge1xyXG4gICAgLy8gZGVmYXVsdCB0byAwXHJcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gdXNlIG9wdGlvbiBhcyBhbiBlbGVtZW50XHJcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGVsZW0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggb3B0aW9uICk7XHJcbiAgICB9IGVsc2UgaWYgKCBvcHRpb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApIHtcclxuICAgICAgZWxlbSA9IG9wdGlvbjtcclxuICAgIH1cclxuICAgIC8vIHVzZSBzaXplIG9mIGVsZW1lbnQsIGlmIGVsZW1lbnRcclxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGxheW91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxucHJvdG8ubGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcclxuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xyXG5cclxuICB0aGlzLl9sYXlvdXRJdGVtcyggaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICB0aGlzLl9wb3N0TGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSBpdGVtcyB0byBiZSBsYWlkIG91dFxyXG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtc1xyXG4gKi9cclxucHJvdG8uX2dldEl0ZW1zRm9yTGF5b3V0ID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHJldHVybiBpdGVtcy5maWx0ZXIoIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgcmV0dXJuICFpdGVtLmlzSWdub3JlZDtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBsYXlvdXQgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnRcclxuICovXHJcbnByb3RvLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdsYXlvdXQnLCBpdGVtcyApO1xyXG5cclxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgLy8gbm8gaXRlbXMsIGVtaXQgZXZlbnQgd2l0aCBlbXB0eSBhcnJheVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHF1ZXVlID0gW107XHJcblxyXG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgLy8gZ2V0IHgveSBvYmplY3QgZnJvbSBtZXRob2RcclxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gICAgLy8gZW5xdWV1ZVxyXG4gICAgcG9zaXRpb24uaXRlbSA9IGl0ZW07XHJcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICBxdWV1ZS5wdXNoKCBwb3NpdGlvbiApO1xyXG4gIH0sIHRoaXMgKTtcclxuXHJcbiAgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKCBxdWV1ZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGxheW91dCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHJldHVybnMge09iamVjdH0geCBhbmQgeSBwb3NpdGlvblxyXG4gKi9cclxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcbn07XHJcblxyXG4vKipcclxuICogaXRlcmF0ZSBvdmVyIGFycmF5IGFuZCBwb3NpdGlvbiBlYWNoIGl0ZW1cclxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xyXG4gKiB0aHggQHBhdWxfaXJpc2hcclxuICogQHBhcmFtIHtBcnJheX0gcXVldWVcclxuICovXHJcbnByb3RvLl9wcm9jZXNzTGF5b3V0UXVldWUgPSBmdW5jdGlvbiggcXVldWUgKSB7XHJcbiAgdGhpcy51cGRhdGVTdGFnZ2VyKCk7XHJcbiAgcXVldWUuZm9yRWFjaCggZnVuY3Rpb24oIG9iaiwgaSApIHtcclxuICAgIHRoaXMuX3Bvc2l0aW9uSXRlbSggb2JqLml0ZW0sIG9iai54LCBvYmoueSwgb2JqLmlzSW5zdGFudCwgaSApO1xyXG4gIH0sIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIHNldCBzdGFnZ2VyIGZyb20gb3B0aW9uIGluIG1pbGxpc2Vjb25kcyBudW1iZXJcclxucHJvdG8udXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdGFnZ2VyID0gdGhpcy5vcHRpb25zLnN0YWdnZXI7XHJcbiAgaWYgKCBzdGFnZ2VyID09PSBudWxsIHx8IHN0YWdnZXIgPT09IHVuZGVmaW5lZCApIHtcclxuICAgIHRoaXMuc3RhZ2dlciA9IDA7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuc3RhZ2dlciA9IGdldE1pbGxpc2Vjb25kcyggc3RhZ2dlciApO1xyXG4gIHJldHVybiB0aGlzLnN0YWdnZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBwb3NpdGlvbiBvZiBpdGVtIGluIERPTVxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gdmVydGljYWwgcG9zaXRpb25cclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xyXG4gKi9cclxucHJvdG8uX3Bvc2l0aW9uSXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB4LCB5LCBpc0luc3RhbnQsIGkgKSB7XHJcbiAgaWYgKCBpc0luc3RhbnQgKSB7XHJcbiAgICAvLyBpZiBub3QgdHJhbnNpdGlvbiwganVzdCBzZXQgQ1NTXHJcbiAgICBpdGVtLmdvVG8oIHgsIHkgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaXRlbS5zdGFnZ2VyKCBpICogdGhpcy5zdGFnZ2VyICk7XHJcbiAgICBpdGVtLm1vdmVUbyggeCwgeSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBBbnkgbG9naWMgeW91IHdhbnQgdG8gZG8gYWZ0ZXIgZWFjaCBsYXlvdXQsXHJcbiAqIGkuZS4gc2l6ZSB0aGUgY29udGFpbmVyXHJcbiAqL1xyXG5wcm90by5fcG9zdExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVzaXplQ29udGFpbmVyKCk7XHJcbn07XHJcblxyXG5wcm90by5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgaXNSZXNpemluZ0NvbnRhaW5lciA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplQ29udGFpbmVyJyk7XHJcbiAgaWYgKCAhaXNSZXNpemluZ0NvbnRhaW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHNpemUgPSB0aGlzLl9nZXRDb250YWluZXJTaXplKCk7XHJcbiAgaWYgKCBzaXplICkge1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS5oZWlnaHQsIGZhbHNlICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBzaXplXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxyXG4gKi9cclxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBub29wO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtZWFzdXJlIC0gc2l6ZSBvZiB3aWR0aCBvciBoZWlnaHRcclxuICogQHBhcmFtIHtCb29sZWFufSBpc1dpZHRoXHJcbiAqL1xyXG5wcm90by5fc2V0Q29udGFpbmVyTWVhc3VyZSA9IGZ1bmN0aW9uKCBtZWFzdXJlLCBpc1dpZHRoICkge1xyXG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIGVsZW1TaXplID0gdGhpcy5zaXplO1xyXG4gIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgd2lkdGggaWYgYm9yZGVyIGJveFxyXG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XHJcbiAgICBtZWFzdXJlICs9IGlzV2lkdGggPyBlbGVtU2l6ZS5wYWRkaW5nTGVmdCArIGVsZW1TaXplLnBhZGRpbmdSaWdodCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlckxlZnRXaWR0aCArIGVsZW1TaXplLmJvcmRlclJpZ2h0V2lkdGggOlxyXG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlclRvcFdpZHRoICsgZWxlbVNpemUuYm9yZGVyQm90dG9tV2lkdGg7XHJcbiAgfVxyXG5cclxuICBtZWFzdXJlID0gTWF0aC5tYXgoIG1lYXN1cmUsIDAgKTtcclxuICB0aGlzLmVsZW1lbnQuc3R5bGVbIGlzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCcgXSA9IG1lYXN1cmUgKyAncHgnO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxucHJvdG8uX2VtaXRDb21wbGV0ZU9uSXRlbXMgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBpdGVtcyApIHtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XHJcbiAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCBldmVudE5hbWUgKyAnQ29tcGxldGUnLCBudWxsLCBbIGl0ZW1zIF0gKTtcclxuICB9XHJcblxyXG4gIHZhciBjb3VudCA9IGl0ZW1zLmxlbmd0aDtcclxuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XHJcbiAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZG9uZUNvdW50ID0gMDtcclxuICBmdW5jdGlvbiB0aWNrKCkge1xyXG4gICAgZG9uZUNvdW50Kys7XHJcbiAgICBpZiAoIGRvbmVDb3VudCA9PSBjb3VudCApIHtcclxuICAgICAgb25Db21wbGV0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gYmluZCBjYWxsYmFja1xyXG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5vbmNlKCBldmVudE5hbWUsIHRpY2sgKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBlbWl0cyBldmVudHMgdmlhIEV2RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXHJcbiAqL1xyXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xyXG4gIC8vIGFkZCBvcmlnaW5hbCBldmVudCB0byBhcmd1bWVudHNcclxuICB2YXIgZW1pdEFyZ3MgPSBldmVudCA/IFsgZXZlbnQgXS5jb25jYXQoIGFyZ3MgKSA6IGFyZ3M7XHJcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XHJcblxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcclxuICAgIHRoaXMuJGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50IHx8IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XHJcbiAgICBpZiAoIGV2ZW50ICkge1xyXG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XHJcbiAgICAgIHZhciAkZXZlbnQgPSBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XHJcbiAgICAgICRldmVudC50eXBlID0gdHlwZTtcclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGp1c3QgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnQgYXZhaWxhYmxlXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGlnbm9yZSAmIHN0YW1wcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XHJcbiAqIGlnbm9yZWQgaXRlbXMgZG8gbm90IGdldCBza2lwcGVkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICovXHJcbnByb3RvLmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgaWYgKCBpdGVtICkge1xyXG4gICAgaXRlbS5pc0lnbm9yZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICovXHJcbnByb3RvLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFkZHMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLnN0YW1wcyA9IHRoaXMuc3RhbXBzLmNvbmNhdCggZWxlbXMgKTtcclxuICAvLyBpZ25vcmVcclxuICBlbGVtcy5mb3JFYWNoKCB0aGlzLmlnbm9yZSwgdGhpcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxucHJvdG8udW5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKXtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgLy8gZmlsdGVyIG91dCByZW1vdmVkIHN0YW1wIGVsZW1lbnRzXHJcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLnN0YW1wcywgZWxlbSApO1xyXG4gICAgdGhpcy51bmlnbm9yZSggZWxlbSApO1xyXG4gIH0sIHRoaXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBmaW5kcyBjaGlsZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBpZiAoICFlbGVtcyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbXMgPT0gJ3N0cmluZycgKSB7XHJcbiAgICBlbGVtcyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtcyApO1xyXG4gIH1cclxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICByZXR1cm4gZWxlbXM7XHJcbn07XHJcblxyXG5wcm90by5fbWFuYWdlU3RhbXBzID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuX2dldEJvdW5kaW5nUmVjdCgpO1xyXG5cclxuICB0aGlzLnN0YW1wcy5mb3JFYWNoKCB0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcyApO1xyXG59O1xyXG5cclxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxyXG5wcm90by5fZ2V0Qm91bmRpbmdSZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcclxuICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCArIHNpemUucGFkZGluZ1RvcCArIHNpemUuYm9yZGVyVG9wV2lkdGgsXHJcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxyXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcclxuKiovXHJcbnByb3RvLl9tYW5hZ2VTdGFtcCA9IG5vb3A7XHJcblxyXG4vKipcclxuICogZ2V0IHgveSBwb3NpdGlvbiBvZiBlbGVtZW50IHJlbGF0aXZlIHRvIGNvbnRhaW5lciBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvZmZzZXQgLSBoYXMgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXHJcbiAqL1xyXG5wcm90by5fZ2V0RWxlbWVudE9mZnNldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIHZhciB0aGlzUmVjdCA9IHRoaXMuX2JvdW5kaW5nUmVjdDtcclxuICB2YXIgc2l6ZSA9IGdldFNpemUoIGVsZW0gKTtcclxuICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgLSB0aGlzUmVjdC5sZWZ0IC0gc2l6ZS5tYXJnaW5MZWZ0LFxyXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wIC0gdGhpc1JlY3QudG9wIC0gc2l6ZS5tYXJnaW5Ub3AsXHJcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxyXG4gICAgYm90dG9tOiB0aGlzUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QuYm90dG9tIC0gc2l6ZS5tYXJnaW5Cb3R0b21cclxuICB9O1xyXG4gIHJldHVybiBvZmZzZXQ7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGVuYWJsZSBldmVudCBoYW5kbGVycyBmb3IgbGlzdGVuZXJzXHJcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXHJcbnByb3RvLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XHJcblxyXG4vKipcclxuICogQmluZCBsYXlvdXQgdG8gd2luZG93IHJlc2l6aW5nXHJcbiAqL1xyXG5wcm90by5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XHJcbiAgdGhpcy5pc1Jlc2l6ZUJvdW5kID0gdHJ1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVbmJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xyXG4gKi9cclxucHJvdG8udW5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XHJcbiAgdGhpcy5pc1Jlc2l6ZUJvdW5kID0gZmFsc2U7XHJcbn07XHJcblxyXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVzaXplKCk7XHJcbn07XHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCggT3V0bGF5ZXIsICdvbnJlc2l6ZScsIDEwMCApO1xyXG5cclxucHJvdG8ucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXHJcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcclxuICBpZiAoICF0aGlzLmlzUmVzaXplQm91bmQgfHwgIXRoaXMubmVlZHNSZXNpemVMYXlvdXQoKSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMubGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxyXG4gKiBAcmV0dXJucyBCb29sZWFuXHJcbiAqL1xyXG5wcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gIHZhciBoYXNTaXplcyA9IHRoaXMuc2l6ZSAmJiBzaXplO1xyXG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4qKi9cclxucHJvdG8uYWRkSXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICAvLyBhZGQgaXRlbXMgdG8gY29sbGVjdGlvblxyXG4gIGlmICggaXRlbXMubGVuZ3RoICkge1xyXG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuY29uY2F0KCBpdGVtcyApO1xyXG4gIH1cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogTGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxucHJvdG8uYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIGl0ZW1zLCB0cnVlICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxyXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcclxuICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCBwcmV2aW91c0l0ZW1zICk7XHJcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cclxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ3JldmVhbCcsIGl0ZW1zICk7XHJcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcclxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSwgaSApIHtcclxuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHN0YWdnZXIgKTtcclxuICAgIGl0ZW0ucmV2ZWFsKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcclxuICovXHJcbnByb3RvLmhpZGUgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xyXG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBzdGFnZ2VyID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7XHJcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XHJcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XHJcbiAgICBpdGVtLmhpZGUoKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXHJcbiAqL1xyXG5wcm90by5yZXZlYWxJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBoaWRlIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xyXG4gKi9cclxucHJvdG8uaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gIHRoaXMuaGlkZSggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICovXHJcbnByb3RvLmdldEl0ZW0gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PSBlbGVtICkge1xyXG4gICAgICAvLyByZXR1cm4gaXRlbVxyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGNvbGxlY3Rpb24gb2YgT3V0bGF5ZXIuSXRlbXMsIGdpdmVuIEVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxucHJvdG8uZ2V0SXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGl0ZW1zID0gW107XHJcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbSggZWxlbSApO1xyXG4gICAgaWYgKCBpdGVtICkge1xyXG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XHJcbiAgICB9XHJcbiAgfSwgdGhpcyApO1xyXG5cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlIGVsZW1lbnQocykgZnJvbSBpbnN0YW5jZSBhbmQgRE9NXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG5cclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcclxuXHJcbiAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlSXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLnJlbW92ZSgpO1xyXG4gICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XHJcbiAgfSwgdGhpcyApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZGVzdHJveSAtLS0tLSAvL1xyXG5cclxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXHJcbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjbGVhbiB1cCBkeW5hbWljIHN0eWxlc1xyXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuICBzdHlsZS5oZWlnaHQgPSAnJztcclxuICBzdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gIHN0eWxlLndpZHRoID0gJyc7XHJcbiAgLy8gZGVzdHJveSBpdGVtc1xyXG4gIHRoaXMuaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmRlc3Ryb3koKTtcclxuICB9KTtcclxuXHJcbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcclxuXHJcbiAgdmFyIGlkID0gdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcclxuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXHJcbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgLy8gcmVtb3ZlIGRhdGEgZm9yIGpRdWVyeVxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtPdXRsYXllcn1cclxuICovXHJcbk91dGxheWVyLmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XHJcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcclxuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xyXG59O1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSBPdXRsYXllciBjbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNyZWF0ZSBhIGxheW91dCBjbGFzc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXHJcbiAqL1xyXG5PdXRsYXllci5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xyXG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxyXG4gIHZhciBMYXlvdXQgPSBzdWJjbGFzcyggT3V0bGF5ZXIgKTtcclxuICAvLyBhcHBseSBuZXcgb3B0aW9ucyBhbmQgY29tcGF0T3B0aW9uc1xyXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XHJcbiAgdXRpbHMuZXh0ZW5kKCBMYXlvdXQuZGVmYXVsdHMsIG9wdGlvbnMgKTtcclxuICBMYXlvdXQuY29tcGF0T3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmNvbXBhdE9wdGlvbnMgICk7XHJcblxyXG4gIExheW91dC5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcblxyXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcclxuXHJcbiAgLy8gc3ViLWNsYXNzIEl0ZW1cclxuICBMYXlvdXQuSXRlbSA9IHN1YmNsYXNzKCBJdGVtICk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRlY2xhcmF0aXZlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIHV0aWxzLmh0bWxJbml0KCBMYXlvdXQsIG5hbWVzcGFjZSApO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIG1ha2UgaW50byBqUXVlcnkgcGx1Z2luXHJcbiAgaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XHJcbiAgICBqUXVlcnkuYnJpZGdldCggbmFtZXNwYWNlLCBMYXlvdXQgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBMYXlvdXQ7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzdWJjbGFzcyggUGFyZW50ICkge1xyXG4gIGZ1bmN0aW9uIFN1YkNsYXNzKCkge1xyXG4gICAgUGFyZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9XHJcblxyXG4gIFN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBhcmVudC5wcm90b3R5cGUgKTtcclxuICBTdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWJDbGFzcztcclxuXHJcbiAgcmV0dXJuIFN1YkNsYXNzO1xyXG59XHJcblxyXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXHJcblxyXG4vLyBob3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGluIGVhY2ggdW5pdFxyXG52YXIgbXNVbml0cyA9IHtcclxuICBtczogMSxcclxuICBzOiAxMDAwXHJcbn07XHJcblxyXG4vLyBtdW5nZSB0aW1lLWxpa2UgcGFyYW1ldGVyIGludG8gbWlsbGlzZWNvbmQgbnVtYmVyXHJcbi8vICcwLjRzJyAtPiA0MFxyXG5mdW5jdGlvbiBnZXRNaWxsaXNlY29uZHMoIHRpbWUgKSB7XHJcbiAgaWYgKCB0eXBlb2YgdGltZSA9PSAnbnVtYmVyJyApIHtcclxuICAgIHJldHVybiB0aW1lO1xyXG4gIH1cclxuICB2YXIgbWF0Y2hlcyA9IHRpbWUubWF0Y2goIC8oXlxcZCpcXC4/XFxkKikoXFx3KikvICk7XHJcbiAgdmFyIG51bSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcclxuICB2YXIgdW5pdCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcclxuICBpZiAoICFudW0ubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIG51bSA9IHBhcnNlRmxvYXQoIG51bSApO1xyXG4gIHZhciBtdWx0ID0gbXNVbml0c1sgdW5pdCBdIHx8IDE7XHJcbiAgcmV0dXJuIG51bSAqIG11bHQ7XHJcbn1cclxuXHJcbi8vIC0tLS0tIGZpbiAtLS0tLSAvL1xyXG5cclxuLy8gYmFjayBpbiBnbG9iYWxcclxuT3V0bGF5ZXIuSXRlbSA9IEl0ZW07XHJcblxyXG5yZXR1cm4gT3V0bGF5ZXI7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogTWFzb25yeSB2NC4yLjJcclxuICogQ2FzY2FkaW5nIGdyaWQgbGF5b3V0IGxpYnJhcnlcclxuICogaHR0cHM6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKiBieSBEYXZpZCBEZVNhbmRyb1xyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoIFtcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIsIGdldFNpemUgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcclxuICB2YXIgTWFzb25yeSA9IE91dGxheWVyLmNyZWF0ZSgnbWFzb25yeScpO1xyXG4gIC8vIGlzRml0V2lkdGggLT4gZml0V2lkdGhcclxuICBNYXNvbnJ5LmNvbXBhdE9wdGlvbnMuZml0V2lkdGggPSAnaXNGaXRXaWR0aCc7XHJcblxyXG4gIHZhciBwcm90byA9IE1hc29ucnkucHJvdG90eXBlO1xyXG5cclxuICBwcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0U2l6ZSgpO1xyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdjb2x1bW5XaWR0aCcsICdvdXRlcldpZHRoJyApO1xyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcclxuICAgIHRoaXMubWVhc3VyZUNvbHVtbnMoKTtcclxuXHJcbiAgICAvLyByZXNldCBjb2x1bW4gWVxyXG4gICAgdGhpcy5jb2xZcyA9IFtdO1xyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuY29sczsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1heFkgPSAwO1xyXG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSAwO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxyXG4gICAgaWYgKCAhdGhpcy5jb2x1bW5XaWR0aCApIHtcclxuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XHJcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xyXG4gICAgICAvLyBjb2x1bW5XaWR0aCBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XHJcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXI7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcclxuICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcclxuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcclxuICAgIHZhciBleGNlc3MgPSBjb2x1bW5XaWR0aCAtIGNvbnRhaW5lcldpZHRoICUgY29sdW1uV2lkdGg7XHJcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcclxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcclxuICAgIGNvbHMgPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGNvbHMgKTtcclxuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXHJcbiAgICB2YXIgaXNGaXRXaWR0aCA9IHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKTtcclxuICAgIHZhciBjb250YWluZXIgPSBpc0ZpdFdpZHRoID8gdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgOiB0aGlzLmVsZW1lbnQ7XHJcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcclxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggY29udGFpbmVyICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gc2l6ZSAmJiBzaXplLmlubmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5nZXRTaXplKCk7XHJcbiAgICAvLyBob3cgbWFueSBjb2x1bW5zIGRvZXMgdGhpcyBicmljayBzcGFuXHJcbiAgICB2YXIgcmVtYWluZGVyID0gaXRlbS5zaXplLm91dGVyV2lkdGggJSB0aGlzLmNvbHVtbldpZHRoO1xyXG4gICAgdmFyIG1hdGhNZXRob2QgPSByZW1haW5kZXIgJiYgcmVtYWluZGVyIDwgMSA/ICdyb3VuZCcgOiAnY2VpbCc7XHJcbiAgICAvLyByb3VuZCBpZiBvZmYgYnkgMSBwaXhlbCwgb3RoZXJ3aXNlIHVzZSBjZWlsXHJcbiAgICB2YXIgY29sU3BhbiA9IE1hdGhbIG1hdGhNZXRob2QgXSggaXRlbS5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICBjb2xTcGFuID0gTWF0aC5taW4oIGNvbFNwYW4sIHRoaXMuY29scyApO1xyXG4gICAgLy8gdXNlIGhvcml6b250YWwgb3IgdG9wIGNvbHVtbiBwb3NpdGlvblxyXG4gICAgdmFyIGNvbFBvc01ldGhvZCA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsT3JkZXIgP1xyXG4gICAgICAnX2dldEhvcml6b250YWxDb2xQb3NpdGlvbicgOiAnX2dldFRvcENvbFBvc2l0aW9uJztcclxuICAgIHZhciBjb2xQb3NpdGlvbiA9IHRoaXNbIGNvbFBvc01ldGhvZCBdKCBjb2xTcGFuLCBpdGVtICk7XHJcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcclxuICAgIHZhciBwb3NpdGlvbiA9IHtcclxuICAgICAgeDogdGhpcy5jb2x1bW5XaWR0aCAqIGNvbFBvc2l0aW9uLmNvbCxcclxuICAgICAgeTogY29sUG9zaXRpb24ueVxyXG4gICAgfTtcclxuICAgIC8vIGFwcGx5IHNldEhlaWdodCB0byBuZWNlc3NhcnkgY29sdW1uc1xyXG4gICAgdmFyIHNldEhlaWdodCA9IGNvbFBvc2l0aW9uLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICB2YXIgc2V0TWF4ID0gY29sU3BhbiArIGNvbFBvc2l0aW9uLmNvbDtcclxuICAgIGZvciAoIHZhciBpID0gY29sUG9zaXRpb24uY29sOyBpIDwgc2V0TWF4OyBpKysgKSB7XHJcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBzZXRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9nZXRUb3BDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xyXG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0VG9wQ29sR3JvdXAoIGNvbFNwYW4gKTtcclxuICAgIC8vIGdldCB0aGUgbWluaW11bSBZIHZhbHVlIGZyb20gdGhlIGNvbHVtbnNcclxuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbDogY29sR3JvdXAuaW5kZXhPZiggbWluaW11bVkgKSxcclxuICAgICAgeTogbWluaW11bVksXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xTcGFuIC0gbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGVsZW1lbnQgc3BhbnNcclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGNvbEdyb3VwXHJcbiAgICovXHJcbiAgcHJvdG8uX2dldFRvcENvbEdyb3VwID0gZnVuY3Rpb24oIGNvbFNwYW4gKSB7XHJcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xyXG4gICAgICAvLyBpZiBicmljayBzcGFucyBvbmx5IG9uZSBjb2x1bW4sIHVzZSBhbGwgdGhlIGNvbHVtbiBZc1xyXG4gICAgICByZXR1cm4gdGhpcy5jb2xZcztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29sR3JvdXAgPSBbXTtcclxuICAgIC8vIGhvdyBtYW55IGRpZmZlcmVudCBwbGFjZXMgY291bGQgdGhpcyBicmljayBmaXQgaG9yaXpvbnRhbGx5XHJcbiAgICB2YXIgZ3JvdXBDb3VudCA9IHRoaXMuY29scyArIDEgLSBjb2xTcGFuO1xyXG4gICAgLy8gZm9yIGVhY2ggZ3JvdXAgcG90ZW50aWFsIGhvcml6b250YWwgcG9zaXRpb25cclxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3VwQ291bnQ7IGkrKyApIHtcclxuICAgICAgY29sR3JvdXBbaV0gPSB0aGlzLl9nZXRDb2xHcm91cFkoIGksIGNvbFNwYW4gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb2xHcm91cDtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0Q29sR3JvdXBZID0gZnVuY3Rpb24oIGNvbCwgY29sU3BhbiApIHtcclxuICAgIGlmICggY29sU3BhbiA8IDIgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzWyBjb2wgXTtcclxuICAgIH1cclxuICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXHJcbiAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGNvbCwgY29sICsgY29sU3BhbiApO1xyXG4gICAgLy8gYW5kIGdldCB0aGUgbWF4IHZhbHVlIG9mIHRoZSBhcnJheVxyXG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZ2V0IGNvbHVtbiBwb3NpdGlvbiBiYXNlZCBvbiBob3Jpem9udGFsIGluZGV4LiAjODczXHJcbiAgcHJvdG8uX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuLCBpdGVtICkge1xyXG4gICAgdmFyIGNvbCA9IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ICUgdGhpcy5jb2xzO1xyXG4gICAgdmFyIGlzT3ZlciA9IGNvbFNwYW4gPiAxICYmIGNvbCArIGNvbFNwYW4gPiB0aGlzLmNvbHM7XHJcbiAgICAvLyBzaGlmdCB0byBuZXh0IHJvdyBpZiBpdGVtIGNhbid0IGZpdCBvbiBjdXJyZW50IHJvd1xyXG4gICAgY29sID0gaXNPdmVyID8gMCA6IGNvbDtcclxuICAgIC8vIGRvbid0IGxldCB6ZXJvLXNpemUgaXRlbXMgdGFrZSB1cCBzcGFjZVxyXG4gICAgdmFyIGhhc1NpemUgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAmJiBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICB0aGlzLmhvcml6b250YWxDb2xJbmRleCA9IGhhc1NpemUgPyBjb2wgKyBjb2xTcGFuIDogdGhpcy5ob3Jpem9udGFsQ29sSW5kZXg7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29sOiBjb2wsXHJcbiAgICAgIHk6IHRoaXMuX2dldENvbEdyb3VwWSggY29sLCBjb2xTcGFuICksXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcclxuICAgIHZhciBzdGFtcFNpemUgPSBnZXRTaXplKCBzdGFtcCApO1xyXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQoIHN0YW1wICk7XHJcbiAgICAvLyBnZXQgdGhlIGNvbHVtbnMgdGhhdCB0aGlzIHN0YW1wIGFmZmVjdHNcclxuICAgIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLl9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcclxuICAgIHZhciBmaXJzdFggPSBpc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcclxuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xyXG4gICAgdmFyIGZpcnN0Q29sID0gTWF0aC5mbG9vciggZmlyc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcclxuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICAvLyBsYXN0Q29sIHNob3VsZCBub3QgZ28gb3ZlciBpZiBtdWx0aXBsZSBvZiBjb2x1bW5XaWR0aCAjNDI1XHJcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xyXG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XHJcbiAgICAvLyBzZXQgY29sWXMgdG8gYm90dG9tIG9mIHRoZSBzdGFtcFxyXG5cclxuICAgIHZhciBpc09yaWdpblRvcCA9IHRoaXMuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XHJcbiAgICB2YXIgc3RhbXBNYXhZID0gKCBpc09yaWdpblRvcCA/IG9mZnNldC50b3AgOiBvZmZzZXQuYm90dG9tICkgK1xyXG4gICAgICBzdGFtcFNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICBmb3IgKCB2YXIgaSA9IGZpcnN0Q29sOyBpIDw9IGxhc3RDb2w7IGkrKyApIHtcclxuICAgICAgdGhpcy5jb2xZc1tpXSA9IE1hdGgubWF4KCBzdGFtcE1heFksIHRoaXMuY29sWXNbaV0gKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXguYXBwbHkoIE1hdGgsIHRoaXMuY29sWXMgKTtcclxuICAgIHZhciBzaXplID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMubWF4WVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKSApIHtcclxuICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdW51c2VkQ29scyA9IDA7XHJcbiAgICAvLyBjb3VudCB1bnVzZWQgY29sdW1uc1xyXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XHJcbiAgICB3aGlsZSAoIC0taSApIHtcclxuICAgICAgaWYgKCB0aGlzLmNvbFlzW2ldICE9PSAwICkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHVudXNlZENvbHMrKztcclxuICAgIH1cclxuICAgIC8vIGZpdCBjb250YWluZXIgdG8gY29sdW1ucyB0aGF0IGhhdmUgYmVlbiB1c2VkXHJcbiAgICByZXR1cm4gKCB0aGlzLmNvbHMgLSB1bnVzZWRDb2xzICkgKiB0aGlzLmNvbHVtbldpZHRoIC0gdGhpcy5ndXR0ZXI7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBwcmV2aW91c1dpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aDtcclxuICAgIHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTtcclxuICAgIHJldHVybiBwcmV2aW91c1dpZHRoICE9IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1hc29ucnk7XHJcblxyXG59KSk7XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1zdGF0aWMvbWFzb25yeUNvbGlicmkuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95\n");

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_colibri__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__root_static_colibri__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar ColibriFrontComponent = function () {\n  _createClass(ColibriFrontComponent, null, [{\n    key: 'componentName',\n    value: function componentName() {\n      throw new TypeError('name getter should be implemented');\n    }\n  }]);\n\n  function ColibriFrontComponent(element, options) {\n    _classCallCheck(this, ColibriFrontComponent);\n\n    this.$ = jQuery;\n    this.namespace = this.constructor.componentName();\n    this.utils = new __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.Utils();\n    this.detect = new __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.Detect();\n    this.init();\n    __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.apply(this, arguments);\n    this.start();\n\n    if (this.isCustomizerPreview()) {\n      this.wpCustomize(wp.customize);\n    }\n    return this;\n  }\n\n  _createClass(ColibriFrontComponent, [{\n    key: 'init',\n    value: function init() {}\n  }, {\n    key: 'isCustomizerPreview',\n    value: function isCustomizerPreview() {\n      return __WEBPACK_IMPORTED_MODULE_0__root_static_colibri___default.a.isCustomizerPreview();\n    }\n  }, {\n    key: 'wpCustomize',\n    value: function wpCustomize(api) {}\n  }, {\n    key: 'wpSettingBind',\n    value: function wpSettingBind(setting_id, callback) {\n      window.wp.customize(setting_id, function (setting) {\n        setting.bind(callback);\n      });\n    }\n  }, {\n    key: 'updateData',\n    value: function updateData(data) {\n      this.opts = jQuery.extend({}, this.opts, data);\n      this.restart();\n    }\n  }, {\n    key: 'restart',\n    value: function restart() {}\n  }, {\n    key: 'start',\n    value: function start() {}\n  }]);\n\n  return ColibriFrontComponent;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ColibriFrontComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcz9hN2RjIl0sIm5hbWVzIjpbIkNvbGlicmlGcm9udENvbXBvbmVudCIsIlR5cGVFcnJvciIsImVsZW1lbnQiLCJvcHRpb25zIiwiJCIsImpRdWVyeSIsIm5hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50TmFtZSIsInV0aWxzIiwiQ29saWJyaSIsIlV0aWxzIiwiZGV0ZWN0IiwiRGV0ZWN0IiwiaW5pdCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJpc0N1c3RvbWl6ZXJQcmV2aWV3Iiwid3BDdXN0b21pemUiLCJ3cCIsImN1c3RvbWl6ZSIsImFwaSIsInNldHRpbmdfaWQiLCJjYWxsYmFjayIsIndpbmRvdyIsInNldHRpbmciLCJiaW5kIiwiZGF0YSIsIm9wdHMiLCJleHRlbmQiLCJyZXN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7SUFFcUJBLHFCOzs7b0NBQ0k7QUFDckIsWUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNEOzs7QUFFRCxpQ0FBWUMsT0FBWixFQUFxQkMsT0FBckIsRUFBOEI7QUFBQTs7QUFDNUIsU0FBS0MsQ0FBTCxHQUFTQyxNQUFUO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixLQUFLQyxXQUFMLENBQWlCQyxhQUFqQixFQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFJQyw0REFBT0EsQ0FBQ0MsS0FBWixFQUFiO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLElBQUlGLDREQUFPQSxDQUFDRyxNQUFaLEVBQWQ7QUFDQSxTQUFLQyxJQUFMO0FBQ0FKLGdFQUFPQSxDQUFDSyxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7QUFDQSxTQUFLQyxLQUFMOztBQUVBLFFBQUksS0FBS0MsbUJBQUwsRUFBSixFQUFnQztBQUM5QixXQUFLQyxXQUFMLENBQWlCQyxHQUFHQyxTQUFwQjtBQUNEO0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7Ozs7MkJBRU0sQ0FBRTs7OzBDQUVhO0FBQ3BCLGFBQU9YLDREQUFPQSxDQUFDUSxtQkFBUixFQUFQO0FBQ0Q7OztnQ0FFV0ksRyxFQUFLLENBQUU7OztrQ0FFTEMsVSxFQUFZQyxRLEVBQVU7QUFDbENDLGFBQU9MLEVBQVAsQ0FBVUMsU0FBVixDQUFvQkUsVUFBcEIsRUFBZ0MsVUFBU0csT0FBVCxFQUFrQjtBQUNoREEsZ0JBQVFDLElBQVIsQ0FBYUgsUUFBYjtBQUNELE9BRkQ7QUFHRDs7OytCQUVVSSxJLEVBQU07QUFDZixXQUFLQyxJQUFMLEdBQVl4QixPQUFPeUIsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS0QsSUFBdkIsRUFBNkJELElBQTdCLENBQVo7QUFDQSxXQUFLRyxPQUFMO0FBQ0Q7Ozs4QkFDUyxDQUFFOzs7NEJBQ0osQ0FBRTs7Ozs7O0FBdkNTL0IsOEUiLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29saWJyaSBmcm9tICdAcm9vdC9zdGF0aWMvY29saWJyaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGlicmlGcm9udENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wb25lbnROYW1lKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25hbWUgZ2V0dGVyIHNob3VsZCBiZSBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJCA9IGpRdWVyeTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IHRoaXMuY29uc3RydWN0b3IuY29tcG9uZW50TmFtZSgpO1xuICAgIHRoaXMudXRpbHMgPSBuZXcgQ29saWJyaS5VdGlscygpO1xuICAgIHRoaXMuZGV0ZWN0ID0gbmV3IENvbGlicmkuRGV0ZWN0KCk7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgQ29saWJyaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIGlmICh0aGlzLmlzQ3VzdG9taXplclByZXZpZXcoKSkge1xuICAgICAgdGhpcy53cEN1c3RvbWl6ZSh3cC5jdXN0b21pemUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGluaXQoKSB7fVxuXG4gIGlzQ3VzdG9taXplclByZXZpZXcoKSB7XG4gICAgcmV0dXJuIENvbGlicmkuaXNDdXN0b21pemVyUHJldmlldygpO1xuICB9XG5cbiAgd3BDdXN0b21pemUoYXBpKSB7fVxuXG4gIHdwU2V0dGluZ0JpbmQoc2V0dGluZ19pZCwgY2FsbGJhY2spIHtcbiAgICB3aW5kb3cud3AuY3VzdG9taXplKHNldHRpbmdfaWQsIGZ1bmN0aW9uKHNldHRpbmcpIHtcbiAgICAgIHNldHRpbmcuYmluZChjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVEYXRhKGRhdGEpIHtcbiAgICB0aGlzLm9wdHMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLm9wdHMsIGRhdGEpO1xuICAgIHRoaXMucmVzdGFydCgpO1xuICB9XG4gIHJlc3RhcnQoKSB7fVxuICBzdGFydCgpIHt9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///96\n");

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slideshow__ = __webpack_require__(98);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar CustomizableSlideshow = function (_Slideshow) {\n    _inherits(CustomizableSlideshow, _Slideshow);\n\n    function CustomizableSlideshow() {\n        _classCallCheck(this, CustomizableSlideshow);\n\n        return _possibleConstructorReturn(this, (CustomizableSlideshow.__proto__ || Object.getPrototypeOf(CustomizableSlideshow)).apply(this, arguments));\n    }\n\n    _createClass(CustomizableSlideshow, [{\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {\n            var _this2 = this;\n\n            var _loop = function _loop(opt) {\n\n                if (_this2.opts.wpSettings.hasOwnProperty(opt)) {\n                    var setting = _this2.opts.wpSettings[opt];\n\n                    _this2.wpSettingBind(setting, function (newValue) {\n                        _this2.opts[opt] = newValue;\n                        _this2.restart();\n                    });\n                }\n            };\n\n            for (var opt in this.opts.wpSettings) {\n                _loop(opt);\n            }\n        }\n    }]);\n\n    return CustomizableSlideshow;\n}(__WEBPACK_IMPORTED_MODULE_0__slideshow__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomizableSlideshow);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvc2xpZGVzaG93L2N1c3RvbWl6YWJsZS1zbGlkZXNob3cuanM/OTMwMiJdLCJuYW1lcyI6WyJDdXN0b21pemFibGVTbGlkZXNob3ciLCJhcGkiLCJvcHQiLCJvcHRzIiwid3BTZXR0aW5ncyIsImhhc093blByb3BlcnR5Iiwic2V0dGluZyIsIndwU2V0dGluZ0JpbmQiLCJuZXdWYWx1ZSIsInJlc3RhcnQiLCJTbGlkZXNob3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztJQUVxQkEscUI7Ozs7Ozs7Ozs7O29DQUNMQyxHLEVBQUs7QUFBQTs7QUFBQSx1Q0FFSkMsR0FGSTs7QUFJVCxvQkFBSSxPQUFLQyxJQUFMLENBQVVDLFVBQVYsQ0FBcUJDLGNBQXJCLENBQW9DSCxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLHdCQUFJSSxVQUFVLE9BQUtILElBQUwsQ0FBVUMsVUFBVixDQUFxQkYsR0FBckIsQ0FBZDs7QUFFQSwyQkFBS0ssYUFBTCxDQUFtQkQsT0FBbkIsRUFBNEIsVUFBQ0UsUUFBRCxFQUFjO0FBQ3RDLCtCQUFLTCxJQUFMLENBQVVELEdBQVYsSUFBaUJNLFFBQWpCO0FBQ0EsK0JBQUtDLE9BQUw7QUFDSCxxQkFIRDtBQUlIO0FBWFE7O0FBRWIsaUJBQUssSUFBSVAsR0FBVCxJQUFnQixLQUFLQyxJQUFMLENBQVVDLFVBQTFCLEVBQXNDO0FBQUEsc0JBQTdCRixHQUE2QjtBQVVyQztBQUNKOzs7O0VBZDhDUSwyRDs7QUFBOUJWLDhFIiwiZmlsZSI6Ijk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNsaWRlc2hvdyBmcm9tIFwiLi9zbGlkZXNob3dcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9taXphYmxlU2xpZGVzaG93IGV4dGVuZHMgU2xpZGVzaG93IHtcbiAgICB3cEN1c3RvbWl6ZShhcGkpIHtcblxuICAgICAgICBmb3IgKGxldCBvcHQgaW4gdGhpcy5vcHRzLndwU2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy53cFNldHRpbmdzLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2V0dGluZyA9IHRoaXMub3B0cy53cFNldHRpbmdzW29wdF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLndwU2V0dGluZ0JpbmQoc2V0dGluZywgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0c1tvcHRdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvanMva3ViZS9zbGlkZXNob3cvY3VzdG9taXphYmxlLXNsaWRlc2hvdy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///97\n");

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colibri_kube_component__ = __webpack_require__(99);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar Slideshow = function (_ColibriFrontComponen) {\n    _inherits(Slideshow, _ColibriFrontComponen);\n\n    function Slideshow() {\n        _classCallCheck(this, Slideshow);\n\n        return _possibleConstructorReturn(this, (Slideshow.__proto__ || Object.getPrototypeOf(Slideshow)).apply(this, arguments));\n    }\n\n    _createClass(Slideshow, [{\n        key: 'init',\n        value: function init() {\n            this.lastIndex = -1;\n            this.currentIndex = 0;\n            this.interval = -1;\n        }\n    }, {\n        key: 'addImageEffect',\n        value: function addImageEffect(image, index) {\n            this.$(image).css({\n                transition: 'opacity ' + this.opts.slideSpeed + 'ms',\n                zIndex: this.$images.length - index\n            });\n        }\n    }, {\n        key: 'slideImage',\n        value: function slideImage() {\n\n            if (this.lastIndex >= 0) {\n                this.$images.eq(this.lastIndex).removeClass('current');\n            }\n\n            this.lastIndex = this.currentIndex;\n            this.$images.eq(this.currentIndex).addClass('current').removeClass('next');\n            this.currentIndex = this.currentIndex + 1 === this.$images.length ? 0 : this.currentIndex + 1;\n            this.$images.eq(this.currentIndex).addClass('next');\n        }\n    }, {\n        key: 'restart',\n        value: function restart() {\n            clearInterval(this.interval);\n            this.$images.css({\n                zIndex: '',\n                transition: '',\n                transitionDelay: ''\n            });\n\n            this.start();\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            var _this2 = this;\n\n            this.$images = this.$element.find('.slideshow-image');\n            this.$images.each(function (index, image) {\n                _this2.addImageEffect(image, index);\n            });\n\n            this.interval = setInterval(function () {\n                _this2.slideImage();\n            }, this.opts.slideDuration + this.opts.slideSpeed);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            clearInterval(this.interval);\n        }\n    }], [{\n        key: 'componentName',\n        value: function componentName() {\n            return 'slideshow';\n        }\n    }]);\n\n    return Slideshow;\n}(__WEBPACK_IMPORTED_MODULE_0__colibri_kube_component__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Slideshow);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvc2xpZGVzaG93L3NsaWRlc2hvdy5qcz81ZGUyIl0sIm5hbWVzIjpbIlNsaWRlc2hvdyIsImxhc3RJbmRleCIsImN1cnJlbnRJbmRleCIsImludGVydmFsIiwiaW1hZ2UiLCJpbmRleCIsIiQiLCJjc3MiLCJ0cmFuc2l0aW9uIiwib3B0cyIsInNsaWRlU3BlZWQiLCJ6SW5kZXgiLCIkaW1hZ2VzIiwibGVuZ3RoIiwiZXEiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiY2xlYXJJbnRlcnZhbCIsInRyYW5zaXRpb25EZWxheSIsInN0YXJ0IiwiJGVsZW1lbnQiLCJmaW5kIiwiZWFjaCIsImFkZEltYWdlRWZmZWN0Iiwic2V0SW50ZXJ2YWwiLCJzbGlkZUltYWdlIiwic2xpZGVEdXJhdGlvbiIsIkNvbGlicmlGcm9udENvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0lBRXFCQSxTOzs7Ozs7Ozs7OzsrQkFLVjtBQUNILGlCQUFLQyxTQUFMLEdBQWlCLENBQUMsQ0FBbEI7QUFDQSxpQkFBS0MsWUFBTCxHQUFvQixDQUFwQjtBQUNBLGlCQUFLQyxRQUFMLEdBQWdCLENBQUMsQ0FBakI7QUFDSDs7O3VDQUVjQyxLLEVBQU9DLEssRUFBTztBQUN6QixpQkFBS0MsQ0FBTCxDQUFPRixLQUFQLEVBQWNHLEdBQWQsQ0FBa0I7QUFDZEMseUNBQXVCLEtBQUtDLElBQUwsQ0FBVUMsVUFBakMsT0FEYztBQUVkQyx3QkFBUSxLQUFLQyxPQUFMLENBQWFDLE1BQWIsR0FBc0JSO0FBRmhCLGFBQWxCO0FBSUg7OztxQ0FHWTs7QUFFVCxnQkFBSSxLQUFLSixTQUFMLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLHFCQUFLVyxPQUFMLENBQWFFLEVBQWIsQ0FBZ0IsS0FBS2IsU0FBckIsRUFBZ0NjLFdBQWhDLENBQTRDLFNBQTVDO0FBQ0g7O0FBRUQsaUJBQUtkLFNBQUwsR0FBaUIsS0FBS0MsWUFBdEI7QUFDQSxpQkFBS1UsT0FBTCxDQUFhRSxFQUFiLENBQWdCLEtBQUtaLFlBQXJCLEVBQW1DYyxRQUFuQyxDQUE0QyxTQUE1QyxFQUF1REQsV0FBdkQsQ0FBbUUsTUFBbkU7QUFDQSxpQkFBS2IsWUFBTCxHQUFvQixLQUFLQSxZQUFMLEdBQW9CLENBQXBCLEtBQTBCLEtBQUtVLE9BQUwsQ0FBYUMsTUFBdkMsR0FBZ0QsQ0FBaEQsR0FBb0QsS0FBS1gsWUFBTCxHQUFvQixDQUE1RjtBQUNBLGlCQUFLVSxPQUFMLENBQWFFLEVBQWIsQ0FBZ0IsS0FBS1osWUFBckIsRUFBbUNjLFFBQW5DLENBQTRDLE1BQTVDO0FBQ0g7OztrQ0FHUztBQUNOQywwQkFBYyxLQUFLZCxRQUFuQjtBQUNBLGlCQUFLUyxPQUFMLENBQWFMLEdBQWIsQ0FBaUI7QUFDYkksd0JBQVEsRUFESztBQUViSCw0QkFBWSxFQUZDO0FBR2JVLGlDQUFpQjtBQUhKLGFBQWpCOztBQU1BLGlCQUFLQyxLQUFMO0FBQ0g7OztnQ0FHTztBQUFBOztBQUNKLGlCQUFLUCxPQUFMLEdBQWUsS0FBS1EsUUFBTCxDQUFjQyxJQUFkLENBQW1CLGtCQUFuQixDQUFmO0FBQ0EsaUJBQUtULE9BQUwsQ0FBYVUsSUFBYixDQUFrQixVQUFDakIsS0FBRCxFQUFRRCxLQUFSLEVBQWtCO0FBQ2hDLHVCQUFLbUIsY0FBTCxDQUFvQm5CLEtBQXBCLEVBQTJCQyxLQUEzQjtBQUNILGFBRkQ7O0FBSUEsaUJBQUtGLFFBQUwsR0FBZ0JxQixZQUFZLFlBQU07QUFDOUIsdUJBQUtDLFVBQUw7QUFDSCxhQUZlLEVBRWIsS0FBS2hCLElBQUwsQ0FBVWlCLGFBQVYsR0FBMEIsS0FBS2pCLElBQUwsQ0FBVUMsVUFGdkIsQ0FBaEI7QUFHSDs7OytCQUVNO0FBQ0hPLDBCQUFjLEtBQUtkLFFBQW5CO0FBQ0g7Ozt3Q0F4RHNCO0FBQ25CLG1CQUFPLFdBQVA7QUFDSDs7OztFQUhrQ3dCLHdFOztBQUFsQjNCLGtFIiwiZmlsZSI6Ijk4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbGlicmlGcm9udENvbXBvbmVudCBmcm9tIFwiLi4vY29saWJyaS1rdWJlLWNvbXBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbGlkZXNob3cgZXh0ZW5kcyBDb2xpYnJpRnJvbnRDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb21wb25lbnROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3NsaWRlc2hvdyc7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5sYXN0SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xuICAgICAgICB0aGlzLmludGVydmFsID0gLTE7XG4gICAgfVxuXG4gICAgYWRkSW1hZ2VFZmZlY3QoaW1hZ2UsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuJChpbWFnZSkuY3NzKHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7dGhpcy5vcHRzLnNsaWRlU3BlZWR9bXNgLFxuICAgICAgICAgICAgekluZGV4OiB0aGlzLiRpbWFnZXMubGVuZ3RoIC0gaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBzbGlkZUltYWdlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLmxhc3RJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLiRpbWFnZXMuZXEodGhpcy5sYXN0SW5kZXgpLnJlbW92ZUNsYXNzKCdjdXJyZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RJbmRleCA9IHRoaXMuY3VycmVudEluZGV4O1xuICAgICAgICB0aGlzLiRpbWFnZXMuZXEodGhpcy5jdXJyZW50SW5kZXgpLmFkZENsYXNzKCdjdXJyZW50JykucmVtb3ZlQ2xhc3MoJ25leHQnKTtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleCArIDEgPT09IHRoaXMuJGltYWdlcy5sZW5ndGggPyAwIDogdGhpcy5jdXJyZW50SW5kZXggKyAxO1xuICAgICAgICB0aGlzLiRpbWFnZXMuZXEodGhpcy5jdXJyZW50SW5kZXgpLmFkZENsYXNzKCduZXh0Jyk7XG4gICAgfVxuXG5cbiAgICByZXN0YXJ0KCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLiRpbWFnZXMuY3NzKHtcbiAgICAgICAgICAgIHpJbmRleDogJycsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheTogJydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cblxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuJGltYWdlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLnNsaWRlc2hvdy1pbWFnZScpO1xuICAgICAgICB0aGlzLiRpbWFnZXMuZWFjaCgoaW5kZXgsIGltYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZEltYWdlRWZmZWN0KGltYWdlLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNsaWRlSW1hZ2UoKTtcbiAgICAgICAgfSwgdGhpcy5vcHRzLnNsaWRlRHVyYXRpb24gKyB0aGlzLm9wdHMuc2xpZGVTcGVlZCk7XG4gICAgfVxuXG4gICAgc3RvcCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL3NyYy90aGVtZS9qcy9rdWJlL3NsaWRlc2hvdy9zbGlkZXNob3cuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98\n");

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar ColibriFrontComponent = function () {\n    _createClass(ColibriFrontComponent, null, [{\n        key: \"componentName\",\n        value: function componentName() {\n            throw new TypeError(\"name getter should be implemented\");\n        }\n    }]);\n\n    function ColibriFrontComponent(element, options) {\n        _classCallCheck(this, ColibriFrontComponent);\n\n        this.$ = jQuery;\n        this.namespace = this.constructor.componentName();\n        this.utils = new __WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri___default.a.Utils();\n        this.detect = new __WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri___default.a.Detect();\n        this.init();\n        __WEBPACK_IMPORTED_MODULE_0__colibri_static_colibri___default.a.apply(this, arguments);\n        this.start();\n\n        if (window.wp && window.wp.customize) {\n            this.wpCustomize(wp.customize);\n        }\n        return this;\n    }\n\n    _createClass(ColibriFrontComponent, [{\n        key: \"init\",\n        value: function init() {}\n    }, {\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {}\n    }, {\n        key: \"wpSettingBind\",\n        value: function wpSettingBind(setting_id, callback) {\n            window.wp.customize(setting_id, function (setting) {\n                setting.bind(callback);\n            });\n        }\n    }, {\n        key: \"start\",\n        value: function start() {}\n    }]);\n\n    return ColibriFrontComponent;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ColibriFrontComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcz9kZjlhIl0sIm5hbWVzIjpbIkNvbGlicmlGcm9udENvbXBvbmVudCIsIlR5cGVFcnJvciIsImVsZW1lbnQiLCJvcHRpb25zIiwiJCIsImpRdWVyeSIsIm5hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50TmFtZSIsInV0aWxzIiwiQ29saWJyaSIsIlV0aWxzIiwiZGV0ZWN0IiwiRGV0ZWN0IiwiaW5pdCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJ3aW5kb3ciLCJ3cCIsImN1c3RvbWl6ZSIsIndwQ3VzdG9taXplIiwiYXBpIiwic2V0dGluZ19pZCIsImNhbGxiYWNrIiwic2V0dGluZyIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztJQUVxQkEscUI7Ozt3Q0FDTTtBQUNuQixrQkFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNIOzs7QUFFRCxtQ0FBWUMsT0FBWixFQUFxQkMsT0FBckIsRUFBOEI7QUFBQTs7QUFDMUIsYUFBS0MsQ0FBTCxHQUFTQyxNQUFUO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixLQUFLQyxXQUFMLENBQWlCQyxhQUFqQixFQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYSxJQUFJQywrREFBT0EsQ0FBQ0MsS0FBWixFQUFiO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLElBQUlGLCtEQUFPQSxDQUFDRyxNQUFaLEVBQWQ7QUFDQSxhQUFLQyxJQUFMO0FBQ0FKLHVFQUFPQSxDQUFDSyxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7QUFDQSxhQUFLQyxLQUFMOztBQUVBLFlBQUlDLE9BQU9DLEVBQVAsSUFBYUQsT0FBT0MsRUFBUCxDQUFVQyxTQUEzQixFQUFzQztBQUNsQyxpQkFBS0MsV0FBTCxDQUFpQkYsR0FBR0MsU0FBcEI7QUFDSDtBQUNELGVBQU8sSUFBUDtBQUNIOzs7OytCQUVNLENBRU47OztvQ0FFV0UsRyxFQUFLLENBRWhCOzs7c0NBRWFDLFUsRUFBWUMsUSxFQUFVO0FBQ2hDTixtQkFBT0MsRUFBUCxDQUFVQyxTQUFWLENBQW9CRyxVQUFwQixFQUFnQyxVQUFVRSxPQUFWLEVBQW1CO0FBQy9DQSx3QkFBUUMsSUFBUixDQUFhRixRQUFiO0FBQ0gsYUFGRDtBQUdIOzs7Z0NBRU8sQ0FFUDs7Ozs7O0FBcENnQnhCLDhFIiwiZmlsZSI6Ijk5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbGlicmkgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbGlicmktc3RhdGljL2NvbGlicmlcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29saWJyaUZyb250Q29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29tcG9uZW50TmFtZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5hbWUgZ2V0dGVyIHNob3VsZCBiZSBpbXBsZW1lbnRlZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuJCA9IGpRdWVyeTtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLmNvbXBvbmVudE5hbWUoKTtcbiAgICAgICAgdGhpcy51dGlscyA9IG5ldyBDb2xpYnJpLlV0aWxzKCk7XG4gICAgICAgIHRoaXMuZGV0ZWN0ID0gbmV3IENvbGlicmkuRGV0ZWN0KCk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBDb2xpYnJpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcblxuICAgICAgICBpZiAod2luZG93LndwICYmIHdpbmRvdy53cC5jdXN0b21pemUpIHtcbiAgICAgICAgICAgIHRoaXMud3BDdXN0b21pemUod3AuY3VzdG9taXplKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbml0KCkge1xuXG4gICAgfVxuXG4gICAgd3BDdXN0b21pemUoYXBpKSB7XG5cbiAgICB9XG5cbiAgICB3cFNldHRpbmdCaW5kKHNldHRpbmdfaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHdpbmRvdy53cC5jdXN0b21pemUoc2V0dGluZ19pZCwgZnVuY3Rpb24gKHNldHRpbmcpIHtcbiAgICAgICAgICAgIHNldHRpbmcuYmluZChjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuXG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///99\n");

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__page_components_common_background_scripts_video_video_bg__ = __webpack_require__(101);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar CustomizableVideoBackground = function (_VideoBackground) {\n    _inherits(CustomizableVideoBackground, _VideoBackground);\n\n    function CustomizableVideoBackground(element, options) {\n        var _ret;\n\n        _classCallCheck(this, CustomizableVideoBackground);\n\n        var _this = _possibleConstructorReturn(this, (CustomizableVideoBackground.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground)).call(this, element, options));\n\n        return _ret = _this, _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(CustomizableVideoBackground, [{\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {\n            var _this2 = this;\n\n            this.API_URL = colibri_ADDITIONAL_JS_DATA.api_url;\n\n            var _loop = function _loop(opt) {\n\n                if (_this2.opts.wpSettings.hasOwnProperty(opt)) {\n                    var setting = _this2.opts.wpSettings[opt];\n\n                    _this2.wpSettingBind(setting, function (newValue) {\n                        if (opt === \"externalUrl\") {\n                            _this2.restartYouTubeVideo(newValue);\n                        }\n\n                        if (opt === \"internalUrl\") {\n                            _this2.restartSelfHostedVideo(newValue);\n                        }\n\n                        if (opt === \"videoType\") {\n                            var videoType = \"native\";\n                            if (newValue == \"external\") videoType = \"youtube\";\n                            _this2.changeProvider(videoType);\n                        }\n\n                        if (opt === \"posterUrl\") {\n                            _this2.$element.css({\n                                backgroundImage: \"url(\" + newValue + \")\"\n                            });\n                            _this2.videoData.poster = newValue;\n                        }\n                    });\n                }\n            };\n\n            for (var opt in this.opts.wpSettings) {\n                _loop(opt);\n            }\n        }\n    }, {\n        key: \"changeProvider\",\n        value: function changeProvider(newValue) {\n            if (newValue === \"youtube\") {\n                this.restartYouTubeVideo(wp.customize(this.opts.wpSettings['externalUrl']).get());\n            } else {\n                this.restartSelfHostedVideo(wp.customize(this.opts.wpSettings['internalUrl']).get());\n            }\n        }\n    }, {\n        key: \"restartYouTubeVideo\",\n        value: function restartYouTubeVideo(value) {\n            this.videoData.videoUrl = value;\n            this.videoData.mimeType = \"video/x-youtube\";\n\n            _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", this).call(this);\n        }\n    }, {\n        key: \"restartSelfHostedVideo\",\n        value: function restartSelfHostedVideo(value) {\n            var _this3 = this;\n\n            if (!value) {\n                this.videoData.videoUrl = \"\";\n                this.videoData.mimeType = \"video/mp4\";\n                _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", this).call(this);\n            } else {\n\n                this.$.getJSON(this.API_URL + \"/attachment-data/\" + value, function (data) {\n                    _this3.videoData.videoUrl = data.url;\n                    _this3.videoData.mimeType = data.mime_type;\n\n                    _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", _this3).call(_this3);\n                });\n            }\n        }\n    }]);\n\n    return CustomizableVideoBackground;\n}(__WEBPACK_IMPORTED_MODULE_0__page_components_common_background_scripts_video_video_bg__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomizableVideoBackground);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvdmlkZW8tYmFja2dyb3VuZC9jdXN0b21pemFibGUtdmlkZW8tYmFja2dyb3VuZC5qcz9kNjIxIl0sIm5hbWVzIjpbIkN1c3RvbWl6YWJsZVZpZGVvQmFja2dyb3VuZCIsImVsZW1lbnQiLCJvcHRpb25zIiwiYXBpIiwiQVBJX1VSTCIsImNvbGlicmlfQURESVRJT05BTF9KU19EQVRBIiwiYXBpX3VybCIsIm9wdCIsIm9wdHMiLCJ3cFNldHRpbmdzIiwiaGFzT3duUHJvcGVydHkiLCJzZXR0aW5nIiwid3BTZXR0aW5nQmluZCIsIm5ld1ZhbHVlIiwicmVzdGFydFlvdVR1YmVWaWRlbyIsInJlc3RhcnRTZWxmSG9zdGVkVmlkZW8iLCJ2aWRlb1R5cGUiLCJjaGFuZ2VQcm92aWRlciIsIiRlbGVtZW50IiwiY3NzIiwiYmFja2dyb3VuZEltYWdlIiwidmlkZW9EYXRhIiwicG9zdGVyIiwid3AiLCJjdXN0b21pemUiLCJnZXQiLCJ2YWx1ZSIsInZpZGVvVXJsIiwibWltZVR5cGUiLCIkIiwiZ2V0SlNPTiIsImRhdGEiLCJ1cmwiLCJtaW1lX3R5cGUiLCJWaWRlb0JhY2tncm91bmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0lBRXFCQSwyQjs7O0FBRWpCLHlDQUFZQyxPQUFaLEVBQXFCQyxPQUFyQixFQUE4QjtBQUFBOztBQUFBOztBQUFBLDhKQUNwQkQsT0FEb0IsRUFDWEMsT0FEVzs7QUFFMUI7QUFDSDs7OztvQ0FFV0MsRyxFQUFLO0FBQUE7O0FBQ2IsaUJBQUtDLE9BQUwsR0FBZUMsMkJBQTJCQyxPQUExQzs7QUFEYSx1Q0FFSkMsR0FGSTs7QUFJVCxvQkFBSSxPQUFLQyxJQUFMLENBQVVDLFVBQVYsQ0FBcUJDLGNBQXJCLENBQW9DSCxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLHdCQUFJSSxVQUFVLE9BQUtILElBQUwsQ0FBVUMsVUFBVixDQUFxQkYsR0FBckIsQ0FBZDs7QUFFQSwyQkFBS0ssYUFBTCxDQUFtQkQsT0FBbkIsRUFBNEIsVUFBQ0UsUUFBRCxFQUFjO0FBQ3RDLDRCQUFJTixRQUFRLGFBQVosRUFBMkI7QUFDdkIsbUNBQUtPLG1CQUFMLENBQXlCRCxRQUF6QjtBQUNIOztBQUVELDRCQUFJTixRQUFRLGFBQVosRUFBMkI7QUFDdkIsbUNBQUtRLHNCQUFMLENBQTRCRixRQUE1QjtBQUNIOztBQUVELDRCQUFJTixRQUFRLFdBQVosRUFBeUI7QUFDckIsZ0NBQUlTLFlBQVksUUFBaEI7QUFDQSxnQ0FBSUgsWUFBWSxVQUFoQixFQUE0QkcsWUFBWSxTQUFaO0FBQzVCLG1DQUFLQyxjQUFMLENBQW9CRCxTQUFwQjtBQUNIOztBQUVELDRCQUFJVCxRQUFRLFdBQVosRUFBeUI7QUFDckIsbUNBQUtXLFFBQUwsQ0FBY0MsR0FBZCxDQUFrQjtBQUNkQywwREFBd0JQLFFBQXhCO0FBRGMsNkJBQWxCO0FBR0EsbUNBQUtRLFNBQUwsQ0FBZUMsTUFBZixHQUF3QlQsUUFBeEI7QUFDSDtBQUNKLHFCQXJCRDtBQXNCSDtBQTdCUTs7QUFFYixpQkFBSyxJQUFJTixHQUFULElBQWdCLEtBQUtDLElBQUwsQ0FBVUMsVUFBMUIsRUFBc0M7QUFBQSxzQkFBN0JGLEdBQTZCO0FBNEJyQztBQUNKOzs7dUNBRWNNLFEsRUFBVTtBQUNyQixnQkFBSUEsYUFBYSxTQUFqQixFQUE0QjtBQUN4QixxQkFBS0MsbUJBQUwsQ0FBeUJTLEdBQUdDLFNBQUgsQ0FBYSxLQUFLaEIsSUFBTCxDQUFVQyxVQUFWLENBQXFCLGFBQXJCLENBQWIsRUFBa0RnQixHQUFsRCxFQUF6QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLVixzQkFBTCxDQUE0QlEsR0FBR0MsU0FBSCxDQUFhLEtBQUtoQixJQUFMLENBQVVDLFVBQVYsQ0FBcUIsYUFBckIsQ0FBYixFQUFrRGdCLEdBQWxELEVBQTVCO0FBQ0g7QUFDSjs7OzRDQUVtQkMsSyxFQUFPO0FBQ3ZCLGlCQUFLTCxTQUFMLENBQWVNLFFBQWYsR0FBMEJELEtBQTFCO0FBQ0EsaUJBQUtMLFNBQUwsQ0FBZU8sUUFBZixHQUEwQixpQkFBMUI7O0FBRUE7QUFDSDs7OytDQUVzQkYsSyxFQUFPO0FBQUE7O0FBRTFCLGdCQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNSLHFCQUFLTCxTQUFMLENBQWVNLFFBQWYsR0FBMEIsRUFBMUI7QUFDQSxxQkFBS04sU0FBTCxDQUFlTyxRQUFmLEdBQTBCLFdBQTFCO0FBQ0E7QUFDSCxhQUpELE1BSU87O0FBRUgscUJBQUtDLENBQUwsQ0FBT0MsT0FBUCxDQUFrQixLQUFLMUIsT0FBdkIseUJBQWtEc0IsS0FBbEQsRUFBMkQsVUFBQ0ssSUFBRCxFQUFVO0FBQ2pFLDJCQUFLVixTQUFMLENBQWVNLFFBQWYsR0FBMEJJLEtBQUtDLEdBQS9CO0FBQ0EsMkJBQUtYLFNBQUwsQ0FBZU8sUUFBZixHQUEwQkcsS0FBS0UsU0FBL0I7O0FBRUE7QUFDSCxpQkFMRDtBQU1IO0FBRUo7Ozs7RUF2RW9EQywwRzs7QUFBcENsQyxvRiIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlkZW9CYWNrZ3JvdW5kIGZyb20gXCJAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vYmFja2dyb3VuZC9zY3JpcHRzL3ZpZGVvL3ZpZGVvLWJnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWl6YWJsZVZpZGVvQmFja2dyb3VuZCBleHRlbmRzIFZpZGVvQmFja2dyb3VuZCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB3cEN1c3RvbWl6ZShhcGkpIHtcbiAgICAgICAgdGhpcy5BUElfVVJMID0gY29saWJyaV9BRERJVElPTkFMX0pTX0RBVEEuYXBpX3VybDtcbiAgICAgICAgZm9yIChsZXQgb3B0IGluIHRoaXMub3B0cy53cFNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMud3BTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNldHRpbmcgPSB0aGlzLm9wdHMud3BTZXR0aW5nc1tvcHRdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy53cFNldHRpbmdCaW5kKHNldHRpbmcsIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcImV4dGVybmFsVXJsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydFlvdVR1YmVWaWRlbyhuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcImludGVybmFsVXJsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydFNlbGZIb3N0ZWRWaWRlbyhuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcInZpZGVvVHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9UeXBlID0gXCJuYXRpdmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSBcImV4dGVybmFsXCIpIHZpZGVvVHlwZSA9IFwieW91dHViZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VQcm92aWRlcih2aWRlb1R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCA9PT0gXCJwb3N0ZXJVcmxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke25ld1ZhbHVlfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnBvc3RlciA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VQcm92aWRlcihuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmV3VmFsdWUgPT09IFwieW91dHViZVwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RhcnRZb3VUdWJlVmlkZW8od3AuY3VzdG9taXplKHRoaXMub3B0cy53cFNldHRpbmdzWydleHRlcm5hbFVybCddKS5nZXQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RhcnRTZWxmSG9zdGVkVmlkZW8od3AuY3VzdG9taXplKHRoaXMub3B0cy53cFNldHRpbmdzWydpbnRlcm5hbFVybCddKS5nZXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXN0YXJ0WW91VHViZVZpZGVvKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmlkZW9EYXRhLm1pbWVUeXBlID0gXCJ2aWRlby94LXlvdXR1YmVcIjtcblxuICAgICAgICBzdXBlci5nZW5lcmF0ZVZpZGVvKCk7XG4gICAgfVxuXG4gICAgcmVzdGFydFNlbGZIb3N0ZWRWaWRlbyh2YWx1ZSkge1xuXG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLm1pbWVUeXBlID0gXCJ2aWRlby9tcDRcIjtcbiAgICAgICAgICAgIHN1cGVyLmdlbmVyYXRlVmlkZW8oKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy4kLmdldEpTT04oYCR7dGhpcy5BUElfVVJMfS9hdHRhY2htZW50LWRhdGEvJHt2YWx1ZX1gLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0RhdGEubWltZVR5cGUgPSBkYXRhLm1pbWVfdHlwZTtcblxuICAgICAgICAgICAgICAgIHN1cGVyLmdlbmVyYXRlVmlkZW8oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvanMva3ViZS92aWRlby1iYWNrZ3JvdW5kL2N1c3RvbWl6YWJsZS12aWRlby1iYWNrZ3JvdW5kLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n");

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__page_components_common_scripts_base_index__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__ = __webpack_require__(102);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__ = __webpack_require__(105);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar VideoBackground = function (_ColibriFrontComponen) {\n  _inherits(VideoBackground, _ColibriFrontComponen);\n\n  function VideoBackground() {\n    _classCallCheck(this, VideoBackground);\n\n    return _possibleConstructorReturn(this, (VideoBackground.__proto__ || Object.getPrototypeOf(VideoBackground)).apply(this, arguments));\n  }\n\n  _createClass(VideoBackground, [{\n    key: 'init',\n    value: function init() {\n      this.videoData = {};\n      this.handler = false;\n      this.debouncedSetPosition = jQuery.debounce(this.updateVideoBackground.bind(this), 100);\n    }\n  }, {\n    key: 'generateVideo',\n    value: function generateVideo() {\n      var _this2 = this;\n\n      for (var handle in __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */]) {\n        if (__WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */].hasOwnProperty(handle) && __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */][handle].test(this.videoData)) {\n          this.$element.empty();\n          this.handler = new __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */][handle](this.$element[0], this.videoData);\n          break;\n        }\n      }\n\n      this.handler.onLoad(function () {\n        _this2.$element.children('iframe,video').addClass('h-hide-sm-force');\n        _this2.debouncedSetPosition();\n        _this2.handler.onResize(function () {\n          return _this2.debouncedSetPosition();\n        });\n      });\n\n      if (window.hop) {\n        window.addResizeListener(this.$element.closest('.background-wrapper').parent()[0], this.debouncedSetPosition);\n        this.debouncedSetPosition();\n      }\n    }\n  }, {\n    key: 'updateVideoBackground',\n    value: function updateVideoBackground() {\n      if (this.handler.updateVideoSize) {\n        this.handler.updateVideoSize();\n      }\n      this.setPosition();\n    }\n  }, {\n    key: 'setPosition',\n    value: function setPosition() {\n      var _this3 = this;\n\n      this.handler.pause();\n      if (this.$element.children('iframe,video').eq(0).css('display') === 'none') {\n        return;\n      }\n\n      var $video = this.$element.children('iframe,video').eq(0),\n          posX = $video.is('iframe') ? 50 : this.opts.positionX,\n          posY = $video.is('iframe') ? 50 : this.opts.positionY,\n          x = Math.max($video.width() - this.$element.width(), 0) * parseFloat(posX) / 100,\n          y = Math.max($video.height() - this.$element.height(), 0) * parseFloat(posY) / 100;\n\n      $video.css({\n        transform: 'translate(-' + x + 'px,-' + y + 'px)',\n        '-webkit-transform': 'translate(-' + x + 'px,-' + y + 'px)'\n      });\n\n      this.$element.addClass('visible');\n\n      setTimeout(function () {\n        _this3.handler.play();\n      }, 100);\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      this.videoData = {\n        mimeType: this.opts.mimeType,\n        poster: this.opts.poster,\n        videoUrl: this.opts.video\n      };\n\n      if (!Object(__WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__[\"isMobile\"])()) {\n        this.generateVideo();\n      }\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      window.removeResizeListener(this.$element.closest('.background-wrapper').parent()[0], this.debouncedSetPosition);\n    }\n  }, {\n    key: 'restart',\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }], [{\n    key: 'componentName',\n    value: function componentName() {\n      return 'video-background';\n    }\n  }]);\n\n  return VideoBackground;\n}(__WEBPACK_IMPORTED_MODULE_0__page_components_common_scripts_base_index__[\"a\" /* ColibriFrontComponent */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VideoBackground);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vdmlkZW8tYmcuanM/YzNiMCJdLCJuYW1lcyI6WyJWaWRlb0JhY2tncm91bmQiLCJ2aWRlb0RhdGEiLCJoYW5kbGVyIiwiZGVib3VuY2VkU2V0UG9zaXRpb24iLCJqUXVlcnkiLCJkZWJvdW5jZSIsInVwZGF0ZVZpZGVvQmFja2dyb3VuZCIsImJpbmQiLCJoYW5kbGUiLCJIYW5kbGVycyIsImhhc093blByb3BlcnR5IiwidGVzdCIsIiRlbGVtZW50IiwiZW1wdHkiLCJvbkxvYWQiLCJjaGlsZHJlbiIsImFkZENsYXNzIiwib25SZXNpemUiLCJ3aW5kb3ciLCJob3AiLCJhZGRSZXNpemVMaXN0ZW5lciIsImNsb3Nlc3QiLCJwYXJlbnQiLCJ1cGRhdGVWaWRlb1NpemUiLCJzZXRQb3NpdGlvbiIsInBhdXNlIiwiZXEiLCJjc3MiLCIkdmlkZW8iLCJwb3NYIiwiaXMiLCJvcHRzIiwicG9zaXRpb25YIiwicG9zWSIsInBvc2l0aW9uWSIsIngiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJwYXJzZUZsb2F0IiwieSIsImhlaWdodCIsInRyYW5zZm9ybSIsInNldFRpbWVvdXQiLCJwbGF5IiwibWltZVR5cGUiLCJwb3N0ZXIiLCJ2aWRlb1VybCIsInZpZGVvIiwiaXNNb2JpbGUiLCJnZW5lcmF0ZVZpZGVvIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJzdG9wIiwic3RhcnQiLCJDb2xpYnJpRnJvbnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7SUFFcUJBLGU7Ozs7Ozs7Ozs7OzJCQUtaO0FBQ0wsV0FBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLFdBQUtDLE9BQUwsR0FBZSxLQUFmO0FBQ0EsV0FBS0Msb0JBQUwsR0FBNEJDLE9BQU9DLFFBQVAsQ0FDMUIsS0FBS0MscUJB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O0FBR2ZDLGtCQUFVLEtBQUtoQixJQUFMLENBQVVpQjtBQUhMLE9BQWpCOztBQU1BLFVBQUksQ0FBQ0MseUVBQVFBLEVBQWIsRUFBaUI7QUFDZixhQUFLQyxhQUFMO0FBQ0Q7QUFDRjs7OzJCQUNNO0FBQ0xoQyxhQUFPaUMsb0JBQVAsQ0FDRSxLQUFLdkMsUUFBTCxDQUFjUyxPQUFkLENBQXNCLHFCQUF0QixFQUE2Q0MsTUFBN0MsR0FBc0QsQ0FBdEQsQ0FERixFQUVFLEtBQUtuQixvQkFGUDtBQUlEOzs7OEJBQ1M7QUFDUixXQUFLaUQsSUFBTDtBQUNBLFdBQUtDLEtBQUw7QUFDRDs7O29DQXBHc0I7QUFDckIsYUFBTyxrQkFBUDtBQUNEOzs7O0VBSDBDQyx5Rzs7QUFBeEJ0RCx3RSIsImZpbGUiOiIxMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xpYnJpRnJvbnRDb21wb25lbnQgfSBmcm9tICdAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9iYXNlL2luZGV4JztcbmltcG9ydCBIYW5kbGVycyBmcm9tICcuL2hhbmRsZXJzL2hhbmRsZXJzJztcbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnQC9jb21tb24vdXRpbHMvaXMtbW9iaWxlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlkZW9CYWNrZ3JvdW5kIGV4dGVuZHMgQ29saWJyaUZyb250Q29tcG9uZW50IHtcbiAgc3RhdGljIGNvbXBvbmVudE5hbWUoKSB7XG4gICAgcmV0dXJuICd2aWRlby1iYWNrZ3JvdW5kJztcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52aWRlb0RhdGEgPSB7fTtcbiAgICB0aGlzLmhhbmRsZXIgPSBmYWxzZTtcbiAgICB0aGlzLmRlYm91bmNlZFNldFBvc2l0aW9uID0galF1ZXJ5LmRlYm91bmNlKFxuICAgICAgdGhpcy51cGRhdGVWaWRlb0JhY2tncm91bmQuYmluZCh0aGlzKSxcbiAgICAgIDEwMCxcbiAgICApO1xuICB9XG5cbiAgZ2VuZXJhdGVWaWRlbygpIHtcbiAgICBmb3IgKGxldCBoYW5kbGUgaW4gSGFuZGxlcnMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgSGFuZGxlcnMuaGFzT3duUHJvcGVydHkoaGFuZGxlKSAmJlxuICAgICAgICBIYW5kbGVyc1toYW5kbGVdLnRlc3QodGhpcy52aWRlb0RhdGEpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmhhbmRsZXIgPSBuZXcgSGFuZGxlcnNbaGFuZGxlXSh0aGlzLiRlbGVtZW50WzBdLCB0aGlzLnZpZGVvRGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlci5vbkxvYWQoKCkgPT4ge1xuICAgICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignaWZyYW1lLHZpZGVvJykuYWRkQ2xhc3MoJ2gtaGlkZS1zbS1mb3JjZScpO1xuICAgICAgdGhpcy5kZWJvdW5jZWRTZXRQb3NpdGlvbigpO1xuICAgICAgdGhpcy5oYW5kbGVyLm9uUmVzaXplKCgpID0+IHRoaXMuZGVib3VuY2VkU2V0UG9zaXRpb24oKSk7XG4gICAgfSk7XG5cbiAgICBpZiAod2luZG93LmhvcCkge1xuICAgICAgd2luZG93LmFkZFJlc2l6ZUxpc3RlbmVyKFxuICAgICAgICB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJy5iYWNrZ3JvdW5kLXdyYXBwZXInKS5wYXJlbnQoKVswXSxcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTZXRQb3NpdGlvbixcbiAgICAgICk7XG4gICAgICB0aGlzLmRlYm91bmNlZFNldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVZpZGVvQmFja2dyb3VuZCgpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyLnVwZGF0ZVZpZGVvU2l6ZSkge1xuICAgICAgdGhpcy5oYW5kbGVyLnVwZGF0ZVZpZGVvU2l6ZSgpO1xuICAgIH1cbiAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gIH1cbiAgc2V0UG9zaXRpb24oKSB7XG4gICAgdGhpcy5oYW5kbGVyLnBhdXNlKCk7XG4gICAgaWYgKFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuY2hpbGRyZW4oJ2lmcmFtZSx2aWRlbycpXG4gICAgICAgIC5lcSgwKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJ1xuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCAkdmlkZW8gPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdpZnJhbWUsdmlkZW8nKS5lcSgwKSxcbiAgICAgIHBvc1ggPSAkdmlkZW8uaXMoJ2lmcmFtZScpID8gNTAgOiB0aGlzLm9wdHMucG9zaXRpb25YLFxuICAgICAgcG9zWSA9ICR2aWRlby5pcygnaWZyYW1lJykgPyA1MCA6IHRoaXMub3B0cy5wb3NpdGlvblksXG4gICAgICB4ID1cbiAgICAgICAgKE1hdGgubWF4KCR2aWRlby53aWR0aCgpIC0gdGhpcy4kZWxlbWVudC53aWR0aCgpLCAwKSAqXG4gICAgICAgICAgcGFyc2VGbG9hdChwb3NYKSkgL1xuICAgICAgICAxMDAsXG4gICAgICB5ID1cbiAgICAgICAgKE1hdGgubWF4KCR2aWRlby5oZWlnaHQoKSAtIHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCksIDApICpcbiAgICAgICAgICBwYXJzZUZsb2F0KHBvc1kpKSAvXG4gICAgICAgIDEwMDtcblxuICAgICR2aWRlby5jc3Moe1xuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKC0ke3h9cHgsLSR7eX1weClgLFxuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogYHRyYW5zbGF0ZSgtJHt4fXB4LC0ke3l9cHgpYCxcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVyLnBsYXkoKTtcbiAgICB9LCAxMDApO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy52aWRlb0RhdGEgPSB7XG4gICAgICBtaW1lVHlwZTogdGhpcy5vcHRzLm1pbWVUeXBlLFxuICAgICAgcG9zdGVyOiB0aGlzLm9wdHMucG9zdGVyLFxuICAgICAgdmlkZW9Vcmw6IHRoaXMub3B0cy52aWRlbyxcbiAgICB9O1xuXG4gICAgaWYgKCFpc01vYmlsZSgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlVmlkZW8oKTtcbiAgICB9XG4gIH1cbiAgc3RvcCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIoXG4gICAgICB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJy5iYWNrZ3JvdW5kLXdyYXBwZXInKS5wYXJlbnQoKVswXSxcbiAgICAgIHRoaXMuZGVib3VuY2VkU2V0UG9zaXRpb24sXG4gICAgKTtcbiAgfVxuICByZXN0YXJ0KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbGlicmktZWRpdG9yL3BhZ2UtY29tcG9uZW50cy9jb21tb24vYmFja2dyb3VuZC9zY3JpcHRzL3ZpZGVvL3ZpZGVvLWJnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n");

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__native_handler__ = __webpack_require__(103);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__youtube_handler__ = __webpack_require__(104);\n\n\n\nvar Handlers = {\n  native: __WEBPACK_IMPORTED_MODULE_0__native_handler__[\"a\" /* default */],\n  youtube: __WEBPACK_IMPORTED_MODULE_1__youtube_handler__[\"a\" /* default */]\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Handlers);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvaGFuZGxlcnMuanM/MzczNyJdLCJuYW1lcyI6WyJIYW5kbGVycyIsIm5hdGl2ZSIsIk5hdGl2ZUhhbmRsZXIiLCJ5b3V0dWJlIiwiWW91VHViZUhhbmRsZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLElBQU1BLFdBQVc7QUFDZkMsVUFBUUMsZ0VBRE87QUFFZkMsV0FBU0MsaUVBQWNBO0FBRlIsQ0FBakI7O0FBS2VKLGlFQUFmIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXRpdmVIYW5kbGVyIGZyb20gJy4vbmF0aXZlLWhhbmRsZXInO1xuaW1wb3J0IFlvdVR1YmVIYW5kbGVyIGZyb20gJy4veW91dHViZS1oYW5kbGVyJztcblxuY29uc3QgSGFuZGxlcnMgPSB7XG4gIG5hdGl2ZTogTmF0aXZlSGFuZGxlcixcbiAgeW91dHViZTogWW91VHViZUhhbmRsZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVycztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvY29tbW9uL2JhY2tncm91bmQvc2NyaXB0cy92aWRlby9oYW5kbGVycy9oYW5kbGVycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///102\n");

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_handler__ = __webpack_require__(61);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar NativeHandler = function (_BaseHandler) {\n  _inherits(NativeHandler, _BaseHandler);\n\n  function NativeHandler() {\n    _classCallCheck(this, NativeHandler);\n\n    return _possibleConstructorReturn(this, (NativeHandler.__proto__ || Object.getPrototypeOf(NativeHandler)).apply(this, arguments));\n  }\n\n  _createClass(NativeHandler, [{\n    key: 'isPaused',\n    value: function isPaused() {\n      return this.video.paused;\n    }\n  }, {\n    key: 'ready',\n    value: function ready() {\n      var _this2 = this;\n\n      if (this.settings.poster) {\n        this.element.style.backgroundImage = 'url(\"' + this.settings.poster + '\")';\n      }\n\n      if (!this.settings.videoUrl) {\n        return;\n      }\n\n      var video = document.createElement('video');\n\n      video.id = this.settings.id || '';\n\n      // video.autoplay = 'autoplay';\n      video.loop = 'loop';\n      video.muted = 'muted';\n\n      if (this.settings.width) {\n        video.width = this.settings.width;\n      }\n\n      if (this.settings.height) {\n        video.height = this.settings.height;\n      }\n\n      video.addEventListener('play', function () {\n        _this2.trigger('play');\n      });\n\n      video.addEventListener('pause', function () {\n        _this2.trigger('pause');\n      });\n\n      video.addEventListener('loadeddata', function () {\n        _this2.loaded();\n      });\n\n      this.video = video;\n      this.setVideo(video);\n      video.src = this.settings.videoUrl;\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.video.pause();\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this.video.play();\n    }\n  }], [{\n    key: 'test',\n    value: function test(settings) {\n      var video = document.createElement('video');\n      return video.canPlayType(settings.mimeType);\n    }\n  }]);\n\n  return NativeHandler;\n}(__WEBPACK_IMPORTED_MODULE_0__base_handler__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (NativeHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvbmF0aXZlLWhhbmRsZXIuanM/ZmVkMyJdLCJuYW1lcyI6WyJOYXRpdmVIYW5kbGVyIiwidmlkZW8iLCJwYXVzZWQiLCJzZXR0aW5ncyIsInBvc3RlciIsImVsZW1lbnQiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsInZpZGVvVXJsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJsb29wIiwibXV0ZWQiLCJ3aWR0aCIsImhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIiwibG9hZGVkIiwic2V0VmlkZW8iLCJzcmMiLCJwYXVzZSIsInBsYXkiLCJjYW5QbGF5VHlwZSIsIm1pbWVUeXBlIiwiQmFzZUhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztJQUVxQkEsYTs7Ozs7Ozs7Ozs7K0JBTVI7QUFDVCxhQUFPLEtBQUtDLEtBQUwsQ0FBV0MsTUFBbEI7QUFDRDs7OzRCQUVPO0FBQUE7O0FBQ04sVUFBSSxLQUFLQyxRQUFMLENBQWNDLE1BQWxCLEVBQTBCO0FBQ3hCLGFBQUtDLE9BQUwsQ0FBYUMsS0FBYixDQUFtQkMsZUFBbkIsYUFBNkMsS0FBS0osUUFBTCxDQUFjQyxNQUEzRDtBQUNEOztBQUVELFVBQUksQ0FBQyxLQUFLRCxRQUFMLENBQWNLLFFBQW5CLEVBQTZCO0FBQzNCO0FBQ0Q7O0FBRUQsVUFBSVAsUUFBUVEsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFaOztBQUVBVCxZQUFNVSxFQUFOLEdBQVcsS0FBS1IsUUFBTCxDQUFjUSxFQUFkLElBQW9CLEVBQS9COztBQUVBO0FBQ0FWLFlBQU1XLElBQU4sR0FBYSxNQUFiO0FBQ0FYLFlBQU1ZLEtBQU4sR0FBYyxPQUFkOztBQUVBLFVBQUksS0FBS1YsUUFBTCxDQUFjVyxLQUFsQixFQUF5QjtBQUN2QmIsY0FBTWEsS0FBTixHQUFjLEtBQUtYLFFBQUwsQ0FBY1csS0FBNUI7QUFDRDs7QUFFRCxVQUFJLEtBQUtYLFFBQUwsQ0FBY1ksTUFBbEIsRUFBMEI7QUFDeEJkLGNBQU1jLE1BQU4sR0FBZSxLQUFLWixRQUFMLENBQWNZLE1BQTdCO0FBQ0Q7O0FBRURkLFlBQU1lLGdCQUFOLENBQXVCLE1BQXZCLEVBQStCLFlBQU07QUFDbkMsZUFBS0MsT0FBTCxDQUFhLE1BQWI7QUFDRCxPQUZEOztBQUlBaEIsWUFBTWUsZ0JBQU4sQ0FBdUIsT0FBdkIsRUFBZ0MsWUFBTTtBQUNwQyxlQUFLQyxPQUFMLENBQWEsT0FBYjtBQUNELE9BRkQ7O0FBSUFoQixZQUFNZSxnQkFBTixDQUF1QixZQUF2QixFQUFxQyxZQUFNO0FBQ3pDLGVBQUtFLE1BQUw7QUFDRCxPQUZEOztBQUlBLFdBQUtqQixLQUFMLEdBQWFBLEtBQWI7QUFDQSxXQUFLa0IsUUFBTCxDQUFjbEIsS0FBZDtBQUNBQSxZQUFNbUIsR0FBTixHQUFZLEtBQUtqQixRQUFMLENBQWNLLFFBQTFCO0FBQ0Q7Ozs0QkFFTztBQUNOLFdBQUtQLEtBQUwsQ0FBV29CLEtBQVg7QUFDRDs7OzJCQUVNO0FBQ0wsV0FBS3BCLEtBQUwsQ0FBV3FCLElBQVg7QUFDRDs7O3lCQXpEV25CLFEsRUFBVTtBQUNwQixVQUFJRixRQUFRUSxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQVo7QUFDQSxhQUFPVCxNQUFNc0IsV0FBTixDQUFrQnBCLFNBQVNxQixRQUEzQixDQUFQO0FBQ0Q7Ozs7RUFKd0NDLDhEOztBQUF0QnpCLHNFIiwiZmlsZSI6IjEwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlSGFuZGxlciBmcm9tICcuL2Jhc2UtaGFuZGxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdGl2ZUhhbmRsZXIgZXh0ZW5kcyBCYXNlSGFuZGxlciB7XG4gIHN0YXRpYyB0ZXN0KHNldHRpbmdzKSB7XG4gICAgdmFyIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICByZXR1cm4gdmlkZW8uY2FuUGxheVR5cGUoc2V0dGluZ3MubWltZVR5cGUpO1xuICB9XG5cbiAgaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlkZW8ucGF1c2VkO1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucG9zdGVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybChcIiR7dGhpcy5zZXR0aW5ncy5wb3N0ZXJ9XCIpYDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2V0dGluZ3MudmlkZW9VcmwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuXG4gICAgdmlkZW8uaWQgPSB0aGlzLnNldHRpbmdzLmlkIHx8ICcnO1xuXG4gICAgLy8gdmlkZW8uYXV0b3BsYXkgPSAnYXV0b3BsYXknO1xuICAgIHZpZGVvLmxvb3AgPSAnbG9vcCc7XG4gICAgdmlkZW8ubXV0ZWQgPSAnbXV0ZWQnO1xuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3Mud2lkdGgpIHtcbiAgICAgIHZpZGVvLndpZHRoID0gdGhpcy5zZXR0aW5ncy53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5oZWlnaHQpIHtcbiAgICAgIHZpZGVvLmhlaWdodCA9IHRoaXMuc2V0dGluZ3MuaGVpZ2h0O1xuICAgIH1cblxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCAoKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3BsYXknKTtcbiAgICB9KTtcblxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKCdwYXVzZScpO1xuICAgIH0pO1xuXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkZGF0YScsICgpID0+IHtcbiAgICAgIHRoaXMubG9hZGVkKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZGVvID0gdmlkZW87XG4gICAgdGhpcy5zZXRWaWRlbyh2aWRlbyk7XG4gICAgdmlkZW8uc3JjID0gdGhpcy5zZXR0aW5ncy52aWRlb1VybDtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMudmlkZW8ucGF1c2UoKTtcbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy52aWRlby5wbGF5KCk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvY29tbW9uL2JhY2tncm91bmQvc2NyaXB0cy92aWRlby9oYW5kbGVycy9uYXRpdmUtaGFuZGxlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///103\n");

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_handler__ = __webpack_require__(61);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @global YT */\n\n\n\nvar VIDEO_ID_REGEX = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n\nvar YouTubeHandler = function (_BaseHandler) {\n  _inherits(YouTubeHandler, _BaseHandler);\n\n  function YouTubeHandler(element, settings) {\n    var _ret;\n\n    _classCallCheck(this, YouTubeHandler);\n\n    var _this = _possibleConstructorReturn(this, (YouTubeHandler.__proto__ || Object.getPrototypeOf(YouTubeHandler)).call(this, element, settings));\n\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(YouTubeHandler, [{\n    key: 'ready',\n    value: function ready() {\n      var _this2 = this;\n\n      if (this.settings.poster) {\n        this.element.style.backgroundImage = 'url(\"' + this.settings.poster + '\")';\n      }\n\n      if ('YT' in window) {\n        window.YT.ready(function () {\n          _this2.loadVideo();\n        });\n      } else {\n        var tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        tag.onload = function () {\n          window.YT.ready(function () {\n            _this2.loadVideo();\n          });\n        };\n\n        document.getElementsByTagName('head')[0].appendChild(tag);\n      }\n    }\n  }, {\n    key: 'getVideoID',\n    value: function getVideoID() {\n      var matches = this.settings.videoUrl.match(VIDEO_ID_REGEX);\n\n      if (matches && matches.length >= 2) {\n        return matches[1];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'getYTOptions',\n    value: function getYTOptions() {\n      var _this3 = this;\n\n      var options = {\n        videoId: this.getVideoID(),\n        events: {\n          onReady: function onReady(e) {\n            var ytVideo = e.target;\n            ytVideo.mute();\n            ytVideo.setPlaybackQuality('auto');\n            _this3.play();\n            _this3.loaded();\n          },\n          onStateChange: function onStateChange(e) {\n            if (window.YT.PlayerState.PLAYING === e.data) {\n              _this3.trigger('play');\n            } else if (window.YT.PlayerState.PAUSED === e.data) {\n              _this3.trigger('pause');\n            } else if (window.YT.PlayerState.ENDED === e.data) {\n              e.target.playVideo();\n            }\n          },\n          onError: function onError(e) {\n            _this3.player.getIframe().style.display = 'none';\n          }\n        },\n        playerVars: {\n          autoplay: 1,\n          controls: 0,\n          disablekb: 1,\n          fs: 0,\n          iv_load_policy: 3,\n          loop: 1,\n          modestbranding: 1,\n          playsinline: 1,\n          rel: 0,\n          showinfo: 0\n        }\n      };\n\n      if (this.settings.height) {\n        options['height'] = this.settings.height;\n      } else {\n        options['height'] = 1080;\n      }\n\n      if (this.settings.width) {\n        options['width'] = this.settings.width;\n      } else {\n        options['width'] = 1920;\n      }\n      // height: this.settings.height,\n      // width: this.settings.width,\n\n      return options;\n    }\n  }, {\n    key: 'loadVideo',\n    value: function loadVideo() {\n      var video = document.createElement('div'),\n          YT = window.YT;\n\n      this.setVideo(video);\n      this.player = new window.YT.Player(video, this.getYTOptions());\n    }\n  }, {\n    key: 'updateVideoSize',\n    value: function updateVideoSize() {\n      if (!this.player) {\n        return;\n      }\n      var $iframe = jQuery(this.player.getIframe()),\n          size = this.calcVideosSize();\n      $iframe.css(size);\n      $iframe.addClass('ready');\n    }\n  }, {\n    key: 'calcVideosSize',\n    value: function calcVideosSize() {\n      var width = jQuery(this.element).outerWidth(),\n          height = jQuery(this.element).outerHeight(),\n          aspectRatio = '16:9'.split(':'),\n          proportion = aspectRatio[0] / aspectRatio[1],\n          keepWidth = width / height > proportion,\n          magnifier = 1;\n\n      return {\n        width: magnifier * (keepWidth ? width : height * proportion),\n        height: magnifier * (keepWidth ? width / proportion : height)\n      };\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      if (!!this.player && !!this.player.playVideo) {\n        if (!this.isPlaying) {\n          this.isPlaying = true;\n          this.player.playVideo();\n        }\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (!!this.player && !!this.player.pauseVideo && !this.isPlaying) {\n        this.isPlaying = false;\n        this.player.pauseVideo();\n      }\n    }\n  }, {\n    key: 'isPaused',\n    value: function isPaused() {\n      return YT.PlayerState.PAUSED === this.player.getPlayerState();\n    }\n  }, {\n    key: 'loaded',\n    value: function loaded() {\n      this.updateVideoSize();\n      _get(YouTubeHandler.prototype.__proto__ || Object.getPrototypeOf(YouTubeHandler.prototype), 'loaded', this).call(this);\n    }\n  }, {\n    key: 'addResizeBind',\n    value: function addResizeBind() {\n      var _this4 = this;\n\n      this.onResize(function () {\n        return _this4.updateVideoSize();\n      }, 50);\n      _get(YouTubeHandler.prototype.__proto__ || Object.getPrototypeOf(YouTubeHandler.prototype), 'addResizeBind', this).call(this);\n    }\n  }], [{\n    key: 'test',\n    value: function test(settings) {\n      return 'video/x-youtube' === settings.mimeType;\n    }\n  }]);\n\n  return YouTubeHandler;\n}(__WEBPACK_IMPORTED_MODULE_0__base_handler__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (YouTubeHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///104\n");

/***/ }),
/* 105 */
/***/ (function(module, exports) {

eval("module.exports = isMobile;\nmodule.exports.isMobile = isMobile;\n\nvar mobileRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;\n\nvar tabletRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;\n\nfunction isMobile(opts) {\n  if (!opts) {\n    opts = {};\n  }\n  var ua = opts.ua;\n  if (!ua && typeof navigator !== 'undefined') {\n    ua = navigator.userAgent;\n  }\n  if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {\n    ua = ua.headers['user-agent'];\n  }\n  if (typeof ua !== 'string') {\n    return false;\n  }\n\n  return opts.tablet ? tabletRE.test(ua) : mobileRE.test(ua);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL3V0aWxzL2lzLW1vYmlsZS5qcz8zZDNjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc01vYmlsZSIsIm1vYmlsZVJFIiwidGFibGV0UkUiLCJvcHRzIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwidGFibGV0IiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQVAsR0FBaUJDLFFBQWpCO0FBQ0FGLE9BQU9DLE9BQVAsQ0FBZUMsUUFBZixHQUEwQkEsUUFBMUI7O0FBRUEsSUFBSUMsV0FBVyxpVUFBZjs7QUFFQSxJQUFJQyxXQUFXLDRWQUFmOztBQUVBLFNBQVNGLFFBQVQsQ0FBa0JHLElBQWxCLEVBQXdCO0FBQ3RCLE1BQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1RBLFdBQU8sRUFBUDtBQUNEO0FBQ0QsTUFBSUMsS0FBS0QsS0FBS0MsRUFBZDtBQUNBLE1BQUksQ0FBQ0EsRUFBRCxJQUFPLE9BQU9DLFNBQVAsS0FBcUIsV0FBaEMsRUFBNkM7QUFDM0NELFNBQUtDLFVBQVVDLFNBQWY7QUFDRDtBQUNELE1BQUlGLE1BQU1BLEdBQUdHLE9BQVQsSUFBb0IsT0FBT0gsR0FBR0csT0FBSCxDQUFXLFlBQVgsQ0FBUCxLQUFvQyxRQUE1RCxFQUFzRTtBQUNwRUgsU0FBS0EsR0FBR0csT0FBSCxDQUFXLFlBQVgsQ0FBTDtBQUNEO0FBQ0QsTUFBSSxPQUFPSCxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDMUIsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBT0QsS0FBS0ssTUFBTCxHQUFjTixTQUFTTyxJQUFULENBQWNMLEVBQWQsQ0FBZCxHQUFrQ0gsU0FBU1EsSUFBVCxDQUFjTCxFQUFkLENBQXpDO0FBQ0QiLCJmaWxlIjoiMTA1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBpc01vYmlsZTtcclxubW9kdWxlLmV4cG9ydHMuaXNNb2JpbGUgPSBpc01vYmlsZTtcclxuXHJcbnZhciBtb2JpbGVSRSA9IC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllc1s0Nl0wfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vL2k7XHJcblxyXG52YXIgdGFibGV0UkUgPSAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXNbNDZdMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyAoY2V8cGhvbmUpfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pO1xyXG5cclxuZnVuY3Rpb24gaXNNb2JpbGUob3B0cykge1xyXG4gIGlmICghb3B0cykge1xyXG4gICAgb3B0cyA9IHt9O1xyXG4gIH1cclxuICB2YXIgdWEgPSBvcHRzLnVhO1xyXG4gIGlmICghdWEgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICB9XHJcbiAgaWYgKHVhICYmIHVhLmhlYWRlcnMgJiYgdHlwZW9mIHVhLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHVhID0gdWEuaGVhZGVyc1sndXNlci1hZ2VudCddO1xyXG4gIH1cclxuICBpZiAodHlwZW9mIHVhICE9PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9wdHMudGFibGV0ID8gdGFibGV0UkUudGVzdCh1YSkgOiBtb2JpbGVSRS50ZXN0KHVhKTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL3V0aWxzL2lzLW1vYmlsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///105\n");

/***/ }),
/* 106 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'dropdown-menu';\n\n  var arrowRightSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-right\" class=\"svg-inline--fa fa-angle-right fa-w-8\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\"><path fill=\"currentColor\" d=\"M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z\"></path></svg>';\n  var arrowDownSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-down\" class=\"svg-inline--fa fa-angle-down fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"></path></svg>';\n  var arrowUpSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-up\" class=\"svg-inline--fa fa-angle-up fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z\"></path></svg>';\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      menuSelector: '.colibri-menu',\n      offCanvasWrapper: '.colibri-menu-container',\n      arrowSelector: 'svg.svg-inline--fa',\n      linkSelector: '.menu-item-has-children > a, .page_item_has_children > a',\n      menuLinkSelector: ' > .menu-item-has-children > a, > .page_item_has_children > a',\n      subMenuLinkSelector: ' ul .menu-item-has-children > a, ul .page_item_has_children > a',\n      $menu: null\n    };\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var _this = this;\n\n      var $menu = this.$element.find(this.opts.menuSelector).first();\n      this.opts.$menu = $menu;\n\n      this.stop();\n      this.addLiListener();\n      this.addSvgArrows();\n      this.addReverseMenuLogic();\n\n      /** TODO @catalin table menu logic needs work because it does not work*/\n      this.addTabletMenuLogic();\n\n      $(document).ready(function () {\n        _this.addMenuScrollSpy($menu);\n      });\n    },\n    stop: function stop() {\n      this.removeAllSvgArrows();\n      this.removeListeners();\n    },\n    copyLiEventTaA: function copyLiEventTaA(e) {\n      var tagName = '';\n      if (e.target && e.target.tagName) {\n        tagName = e.target.tagName;\n      }\n      if (tagName.toLowerCase() === 'a') {\n        return;\n      }\n      var a = $(e.target).find('> a');\n      a[0].click();\n    },\n    addLiListener: function addLiListener() {\n      this.opts.$menu.find('li').on('click', this.copyLiEventTaA);\n    },\n    addSvgArrows: function addSvgArrows() {\n      var menuType = this.opts.data ? this.opts.data.type ? this.opts.data.type : null : null;\n      switch (menuType) {\n        case 'horizontal':\n          this.addHorizontalMenuSvgArrows();\n          break;\n        case 'vertical':\n          this.addVerticalMenuSvgArrow();\n          break;\n      }\n    },\n    addHorizontalMenuSvgArrows: function addHorizontalMenuSvgArrows() {\n      var $menu = this.opts.$menu;\n      var arrowSelector = this.opts.arrowSelector;\n      var menuLinkSelector = this.opts.menuLinkSelector;\n      var subMenuLinkSelector = this.opts.subMenuLinkSelector;\n\n      $menu.find(menuLinkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowDownSvg);\n          $(this).append(arrowUpSvg);\n        }\n      });\n      $menu.find(subMenuLinkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowRightSvg);\n        }\n      });\n    },\n    addVerticalMenuSvgArrow: function addVerticalMenuSvgArrow() {\n      var $menu = this.opts.$menu;\n      var arrowSelector = this.opts.arrowSelector;\n      var linkSelector = this.opts.linkSelector;\n      $menu.find(linkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowRightSvg);\n        }\n      });\n    },\n    removeAllSvgArrows: function removeAllSvgArrows() {\n      if (this.opts.$menu) {\n        this.opts.$menu.find(this.opts.arrowSelector).remove();\n      }\n    },\n    removeListeners: function removeListeners() {\n      var $menu = this.opts.$menu;\n      $menu.off('mouseover.navigation');\n      $menu.find('li').off('click', this.copyLiEventTaA);\n      this.removeTabletLogic();\n    },\n    removeTabletLogic: function removeTabletLogic() {\n      var $menu = this.opts.$menu;\n      $menu.off('tap.navigation');\n    },\n    addReverseMenuLogic: function addReverseMenuLogic() {\n      var $menu = this.opts.$menu;\n      var self = this;\n      $menu.on('mouseover.navigation', 'li', function () {\n        $menu.find('li.hover').removeClass('hover');\n        self.setOpenReverseClass($menu, $(this));\n      });\n    },\n    setOpenReverseClass: function setOpenReverseClass($menu, $item) {\n      // level 0 - not in dropdown\n      if (this.getItemLevel($menu, $item) > 0) {\n        var $submenu = $item.children('ul');\n        var subItemDoesNotFit = $submenu.length && $item.offset().left + $item.width() + 300 > window.innerWidth;\n        var parentsAreReversed = $submenu.length && $item.closest('.open-reverse').length;\n\n        if (subItemDoesNotFit || parentsAreReversed) {\n          $submenu.addClass('open-reverse');\n        } else {\n          if ($submenu.length) {\n            $submenu.removeClass('open-reverse');\n          }\n        }\n      }\n    },\n    getItemLevel: function getItemLevel($menu, $item) {\n      var menuSelector = this.opts.menuSelector;\n      var temp2 = $item.parentsUntil(menuSelector);\n      var temp = temp2.filter('li');\n      return temp.length;\n    },\n    addTabletMenuLogic: function addTabletMenuLogic() {\n      var self = this;\n      var $menu = this.opts.$menu;\n      if (!this.opts.clickOnLink) {\n        this.opts.clickOnLink = this.clickOnLink.bind(this);\n      }\n      if (!this.opts.clickOnArrow) {\n        this.opts.clickOnArrow = this.clickOnArrow.bind(this);\n      }\n\n      $menu.off('tap.navigation', this.opts.clickOnArrow);\n      $menu.on('tap.navigation', 'li.menu-item > a svg', this.opts.clickOnArrow);\n\n      $menu.off('tap.navigation', this.opts.clickOnLink);\n      $menu.on('tap.navigation', 'li.menu-item > a', this.opts.clickOnLink);\n    },\n    clickOnLink: function clickOnLink(event) {\n      var arrowWasClicked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var self = this;\n      var $this = $(event.target);\n      var $item = $this.closest('li');\n      var $link = $this.closest('a');\n      var $menu = this.opts.$menu;\n      var $submenu = $item.children('ul');\n\n      if ($submenu.length) {\n        if (self.isSelectedItem($item)) {\n          var href = $link.attr('href');\n\n          // do nothing if nothing\n          if (href.indexOf('#') === 0) {\n            var anchor = href.replace('#', '').trim();\n\n            if (!anchor || !$('#' + anchor).length) {\n              return;\n            }\n          }\n          event.stopPropagation();\n          if (arrowWasClicked) {\n            event.preventDefault();\n          }\n          self.deselectItems($menu, $item);\n        } else {\n          event.stopPropagation();\n          event.preventDefault();\n          self.selectItem($menu, $item);\n        }\n      } else {\n        event.stopPropagation();\n        if (arrowWasClicked || !arrowWasClicked && self.isSelectedItem($item)) {\n          event.preventDefault();\n        }\n        self.deselectItems($menu, $item);\n      }\n    },\n    clickOnArrow: function clickOnArrow(event) {\n      this.clickOnLink(event, true);\n    },\n    selectItem: function selectItem($menu, $item) {\n      this.deselectItems($menu, $item);\n      $item.attr('data-selected-item', true);\n      this.clearMenuHovers($menu, $item);\n      $item.addClass('hover');\n      this.setOpenReverseClass($menu, $item);\n      var self = this;\n      $('body').on('tap.navigation-clear-selection', '*', function () {\n        var $this = jQuery(this);\n        self.clearSelectionWhenTapOutside($this, $menu);\n      });\n\n      $(window).on('scroll.navigation-clear-selection', function () {\n        var $this = jQuery(this);\n        self.clearSelectionWhenTapOutside($this, $menu);\n      });\n    },\n    deselectItems: function deselectItems($menu, $item) {\n      $item.removeClass('hover');\n      $menu.find('[data-selected-item]').each(function () {\n        var $item = $(this);\n        $item.removeAttr('data-selected-item');\n        var $submenu = $menu.children('ul');\n\n        //TODO @catalin, check if this mobile menu code is needed\n        if ($menu.is('.mobile-menu')) {\n          $submenu.slideDown();\n        }\n      });\n    },\n    isSelectedItem: function isSelectedItem($item) {\n      return $item.is('[data-selected-item]');\n    },\n    clearMenuHovers: function clearMenuHovers($menu, except) {\n      var self = this;\n      $menu.find('li.hover').each(function () {\n        if (except && self.containsSelectedItem($(this))) {\n          return;\n        }\n        $(this).removeClass('hover');\n      });\n    },\n    containsSelectedItem: function containsSelectedItem($item) {\n      return $item.find('[data-selected-item]').length > 0 || $item.is('[data-selected-item]');\n    },\n    clearSelectionWhenTapOutside: function clearSelectionWhenTapOutside($this, $menu) {\n      $('body').off('tap.navigation-clear-selection');\n      $(window).off('scroll.navigation-clear-selection');\n      if ($this.is($menu) || $.contains($menu[0], this)) {\n        return;\n      }\n      this.clearMenuHovers($menu);\n    },\n    addMenuScrollSpy: function addMenuScrollSpy(startFrom) {\n      var $menu = startFrom;\n      var _offset = 20;\n      if ($.fn.scrollSpy) {\n        $menu.find('a').scrollSpy({\n          onChange: function onChange() {\n            $menu.find('.current-menu-item,.current_page_item').removeClass('current-menu-item current_page_item');\n            $(this).closest('li').addClass('current-menu-item current_page_item');\n          },\n          onLeave: function onLeave() {\n            $(this).closest('li').removeClass('current-menu-item current_page_item');\n          },\n\n          smoothScrollAnchor: true,\n          offset: function offset() {\n            var $fixed = $menu.closest('[data-colibri-component=\"navigation\"]');\n            if ($fixed.length) {\n              return $fixed[0].getBoundingClientRect().height + _offset;\n            }\n\n            return _offset;\n          }\n        });\n      }\n\n      $(window).trigger('smoothscroll.update');\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///106\n");

/***/ }),
/* 107 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'navigation';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      data: {\n        sticky: {\n          className: 'h-navigation_sticky',\n          startAfterNode: {\n            enabled: false,\n            selector: ''\n          },\n          animations: {\n            enabled: false,\n            currentInAnimationClass: '',\n            currentOutAnimationClass: '',\n            allInAnimationsClasses: '',\n            allOutAnimationsClasses: '',\n            duration: 0\n          },\n          zIndex: 9999,\n          responsiveWidth: true,\n          center: true,\n          useShrink: true,\n          toBottom: false,\n          useNativeSticky: false,\n          always: false\n        },\n        overlap: false,\n        overlapIsActive: false\n      }\n    };\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    this.computeOverlapPaddingDelayed = jQuery.debounce(this.computeOverlapPadding.bind(this), 10);\n\n    if (!this.scriptCallIsValid()) {\n      return;\n    }\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var data = {};\n      if (this.opts.data) {\n        data = this.opts.data;\n      }\n      if (data.sticky) {\n        this.startSticky(data.sticky);\n      }\n\n      if (data.overlap) {\n        this.startOverlap();\n      }\n    },\n\n\n    //TODO @catalin this is a temporary workaround, until the issue: #0030376 is fixed\n    scriptCallIsValid: function scriptCallIsValid() {\n      var isInCustomizer = Colibri.isCustomizerPreview();\n      if (!isInCustomizer) {\n        return true;\n      }\n      var vueNavSelector = '.h-navigation_outer';\n      var vueNav = $(this.$element).closest(vueNavSelector).get(0);\n      if (!vueNav) {\n        return true;\n      }\n      if (vueNav.__vue__) {\n        return true;\n      }\n      return false;\n    },\n    startOverlap: function startOverlap() {\n      var self = this;\n      var $target = this.$element.closest('[data-colibri-navigation-overlap]');\n      //for backward compatibility reasons\n      if ($target.length === 0) {\n        $target = this.$element;\n      }\n      this.overlapTarget = $target.get(0);\n      this.overlapIsActive = true;\n      $(window).bind('resize.overlap orientationchange.overlap', this.computeOverlapPaddingDelayed);\n      window.addResizeListener(this.overlapTarget, this.computeOverlapPaddingDelayed);\n      self.computeOverlapPadding();\n    },\n    stopOverlap: function stopOverlap() {\n      this.overlapIsActive = false;\n      if (this.$sheet) {\n        document.head.removeChild(this.$sheet);\n        this.$sheet = null;\n      }\n      $(window).off('.overlap');\n      window.removeResizeListener(this.overlapTarget, this.computeOverlapPaddingDelayed);\n    },\n    computeOverlapPadding: function computeOverlapPadding() {\n      if (!this.overlapIsActive) {\n        return;\n      }\n      if (!this.$sheet) {\n        this.$sheet = document.createElement('style');\n        document.head.appendChild(this.$sheet);\n      }\n      var paddingTop = this.overlapTarget.offsetHeight + 'px !important;';\n      this.$sheet.innerHTML = '.h-navigation-padding{padding-top:' + paddingTop + '}';\n    },\n    startSticky: function startSticky(data) {\n      var self = this;\n\n      this.$element.data('stickData', data);\n      this.$element.fixTo('body', data);\n\n      if (!Colibri.isCustomizerPreview()) {\n        this.prepareSticky();\n      }\n\n      this.$element.bind('fixto-added.sticky', function () {\n        self.$element.attr('data-in-sticky-state', true);\n      });\n\n      this.$element.bind('fixto-removed.sticky', function () {\n        self.$element.removeAttr('data-in-sticky-state');\n      });\n\n      $(window).bind('resize.sticky orientationchange.sticky', function () {\n        setTimeout(self.resizeCallback.bind(self), 50);\n      });\n      $(window).trigger('resize.sticky');\n    },\n    stopSticky: function stopSticky() {\n      var instance = this.fixToInstance();\n      if (instance) {\n        instance.destroy();\n        $(window).off('.sticky');\n        this.$element.removeData('fixto-instance');\n      }\n    },\n    stop: function stop() {\n      this.stopSticky();\n      this.stopOverlap();\n    },\n    prepareSticky: function prepareSticky() {\n      var self = this;\n\n      this.normal = this.$element.find('[data-nav-normal]');\n      this.sticky = this.$element.find('[data-nav-sticky]');\n\n      this.sticky.find('span[data-placeholder]').each(function () {\n        $(this).parent().attr('data-placeholder', $(this).attr('data-placeholder'));\n        $(this).remove();\n      });\n\n      if (!this.sticky.length || !this.sticky.children().length) {\n        return;\n      }\n\n      this.$element.bind('fixto-added.sticky', function () {\n        self.moveElementsToSticky();\n      });\n\n      this.$element.bind('fixto-removed.sticky', function () {\n        self.moveElementsToNormal();\n      });\n    },\n    moveElementsToSticky: function moveElementsToSticky() {\n      var stickyEls = this.sticky.find('[data-placeholder]');\n      var self = this;\n      stickyEls.each(function (index, el) {\n        $this = $(this);\n\n        var type = $this.attr('data-placeholder');\n\n        var content = self.normal.find('[data-placeholder-provider=' + type + '] .h-column__content >');\n        var stickyEquiv = $this;\n\n        if (stickyEquiv && content.length) {\n          $(stickyEquiv).append(content);\n        }\n      });\n\n      this.normal.hide();\n      this.sticky.show();\n    },\n    moveElementsToNormal: function moveElementsToNormal() {\n      var stickyEls = this.sticky.find('[data-placeholder]');\n      var self = this;\n      stickyEls.each(function (index, el) {\n        $this = $(this);\n\n        var type = $this.attr('data-placeholder');\n\n        var content = self.sticky.find('[data-placeholder=' + type + '] >');\n        var equiv = self.normal.find('[data-placeholder-provider=' + type + '] .h-column__content');\n\n        if (equiv && content.length) {\n          $(equiv).append(content);\n        }\n      });\n\n      this.normal.show();\n      this.sticky.hide();\n    },\n    fixToInstance: function fixToInstance() {\n      var data = this.$element.data();\n      if (data && data.fixtoInstance) {\n        return data.fixtoInstance;\n      }\n      return false;\n    },\n    resizeCallback: function resizeCallback() {\n      if (window.innerWidth < 1024) {\n        var data = this.$element.data();\n        var stickData = data.stickData;\n\n        if (!stickData) {\n          return;\n        }\n\n        var fixToInstance = data.fixtoInstance;\n        if (!fixToInstance) {\n          return true;\n        }\n\n        if (window.innerWidth <= 767) {\n          if (!stickData.stickyOnMobile) {\n            fixToInstance.stop();\n          }\n        } else {\n          if (!stickData.stickyOnTablet) {\n            fixToInstance.stop();\n          }\n        }\n      } else {\n        var data = this.$element.data();\n        if (!data) {\n          return;\n        }\n\n        var fixToInstance = data.fixtoInstance;\n        if (!fixToInstance) {\n          return true;\n        }\n\n        fixToInstance.refresh();\n        fixToInstance.start();\n      }\n    }\n  };\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/***/ (function(module, exports) {

eval("(function ($, window, document) {\n  // Start Computed Style. Please do not modify this module here. Modify it from its own repo. See address below.\n\n  /*! Computed Style - v0.1.0 - 2012-07-19\n   * https://github.com/bbarakaci/computed-style\n   * Copyright (c) 2012 Burak Barakaci; Licensed MIT */\n  var computedStyle = function () {\n    var computedStyle = {\n      getAll: function getAll(element) {\n        return document.defaultView.getComputedStyle(element);\n      },\n      get: function get(element, name) {\n        return this.getAll(element)[name];\n      },\n      toFloat: function toFloat(value) {\n        return parseFloat(value, 10) || 0;\n      },\n      getFloat: function getFloat(element, name) {\n        return this.toFloat(this.get(element, name));\n      },\n      _getAllCurrentStyle: function _getAllCurrentStyle(element) {\n        return element.currentStyle;\n      }\n    };\n\n    if (document.documentElement.currentStyle) {\n      computedStyle.getAll = computedStyle._getAllCurrentStyle;\n    }\n\n    return computedStyle;\n  }();\n\n  // End Computed Style. Modify whatever you want to.\n\n  var mimicNode = function () {\n    /*\n    Class Mimic Node\n    Dependency : Computed Style\n    Tries to mimick a dom node taking his styles, dimensions. May go to his repo if gets mature.\n    */\n\n    function MimicNode(element) {\n      this.element = element;\n      this.replacer = document.createElement('div');\n      this.replacer.style.visibility = 'hidden';\n      this.hide();\n      element.parentNode.insertBefore(this.replacer, element);\n    }\n\n    MimicNode.prototype = {\n      replace: function replace() {\n        var rst = this.replacer.style;\n        var styles = computedStyle.getAll(this.element);\n\n        // rst.width = computedStyle.width(this.element) + 'px';\n        // rst.height = this.element.offsetHeight + 'px';\n\n        // Setting offsetWidth\n        rst.width = this._width();\n        rst.height = this._height();\n\n        // Adopt margins\n        rst.marginTop = styles.marginTop;\n        rst.marginBottom = styles.marginBottom;\n        rst.marginLeft = styles.marginLeft;\n        rst.marginRight = styles.marginRight;\n\n        // Adopt positioning\n        rst.cssFloat = styles.cssFloat;\n        rst.styleFloat = styles.styleFloat; //ie8;\n        rst.position = styles.position;\n        rst.top = styles.top;\n        rst.right = styles.right;\n        rst.bottom = styles.bottom;\n        rst.left = styles.left;\n        // rst.borderStyle = styles.borderStyle;\n\n        rst.display = styles.display;\n      },\n      hide: function hide() {\n        this.replacer.style.display = 'none';\n      },\n      _width: function _width() {\n        return this.element.getBoundingClientRect().width + 'px';\n      },\n      _widthOffset: function _widthOffset() {\n        return this.element.offsetWidth + 'px';\n      },\n      _height: function _height() {\n        return jQuery(this.element).outerHeight() + 'px';\n      },\n      _heightOffset: function _heightOffset() {\n        return this.element.offsetHeight + 'px';\n      },\n      destroy: function destroy() {\n        $(this.replacer).remove();\n\n        // set properties to null to break references\n        for (var prop in this) {\n          if (this.hasOwnProperty(prop)) {\n            this[prop] = null;\n          }\n        }\n      }\n    };\n\n    var bcr = document.documentElement.getBoundingClientRect();\n    if (!bcr.width) {\n      MimicNode.prototype._width = MimicNode.prototype._widthOffset;\n      MimicNode.prototype._height = MimicNode.prototype._heightOffset;\n    }\n\n    return {\n      MimicNode: MimicNode,\n      computedStyle: computedStyle\n    };\n  }();\n\n  // Class handles vendor prefixes\n  function Prefix() {\n    // Cached vendor will be stored when it is detected\n    this._vendor = null;\n\n    //this._dummy = document.createElement('div');\n  }\n\n  Prefix.prototype = {\n    _vendors: {\n      webkit: {\n        cssPrefix: '-webkit-',\n        jsPrefix: 'Webkit'\n      },\n      moz: {\n        cssPrefix: '-moz-',\n        jsPrefix: 'Moz'\n      },\n      ms: {\n        cssPrefix: '-ms-',\n        jsPrefix: 'ms'\n      },\n      opera: {\n        cssPrefix: '-o-',\n        jsPrefix: 'O'\n      }\n    },\n\n    _prefixJsProperty: function _prefixJsProperty(vendor, prop) {\n      return vendor.jsPrefix + prop[0].toUpperCase() + prop.substr(1);\n    },\n    _prefixValue: function _prefixValue(vendor, value) {\n      return vendor.cssPrefix + value;\n    },\n    _valueSupported: function _valueSupported(prop, value, dummy) {\n      // IE8 will throw Illegal Argument when you attempt to set a not supported value.\n      try {\n        dummy.style[prop] = value;\n        return dummy.style[prop] === value;\n      } catch (er) {\n        return false;\n      }\n    },\n\n\n    /**\n     * Returns true if the property is supported\n     * @param {string} prop Property name\n     * @returns {boolean}\n     */\n    propertySupported: function propertySupported(prop) {\n      // Supported property will return either inine style value or an empty string.\n      // Undefined means property is not supported.\n      return document.documentElement.style[prop] !== undefined;\n    },\n\n\n    /**\n     * Returns prefixed property name for js usage\n     * @param {string} prop Property name\n     * @returns {string|null}\n     */\n    getJsProperty: function getJsProperty(prop) {\n      // Try native property name first.\n      if (this.propertySupported(prop)) {\n        return prop;\n      }\n\n      // Prefix it if we know the vendor already\n      if (this._vendor) {\n        return this._prefixJsProperty(this._vendor, prop);\n      }\n\n      // We don't know the vendor, try all the possibilities\n      var prefixed;\n      for (var vendor in this._vendors) {\n        prefixed = this._prefixJsProperty(this._vendors[vendor], prop);\n        if (this.propertySupported(prefixed)) {\n          // Vendor detected. Cache it.\n          this._vendor = this._vendors[vendor];\n          return prefixed;\n        }\n      }\n\n      // Nothing worked\n      return null;\n    },\n\n\n    /**\n     * Returns supported css value for css property. Could be used to check support or get prefixed value string.\n     * @param {string} prop Property\n     * @param {string} value Value name\n     * @returns {string|null}\n     */\n    getCssValue: function getCssValue(prop, value) {\n      // Create dummy element to test value\n      var dummy = document.createElement('div');\n\n      // Get supported property name\n      var jsProperty = this.getJsProperty(prop);\n\n      // Try unprefixed value\n      if (this._valueSupported(jsProperty, value, dummy)) {\n        return value;\n      }\n\n      var prefixedValue;\n\n      // If we know the vendor already try prefixed value\n      if (this._vendor) {\n        prefixedValue = this._prefixValue(this._vendor, value);\n        if (this._valueSupported(jsProperty, prefixedValue, dummy)) {\n          return prefixedValue;\n        }\n      }\n\n      // Try all vendors\n      for (var vendor in this._vendors) {\n        prefixedValue = this._prefixValue(this._vendors[vendor], value);\n        if (this._valueSupported(jsProperty, prefixedValue, dummy)) {\n          // Vendor detected. Cache it.\n          this._vendor = this._vendors[vendor];\n          return prefixedValue;\n        }\n      }\n      // No support for value\n      return null;\n    }\n  };\n\n  var prefix = new Prefix();\n\n  // We will need this frequently. Lets have it as a global until we encapsulate properly.\n  var transformJsProperty = prefix.getJsProperty('transform');\n\n  // Will hold if browser creates a positioning context for fixed elements.\n  var fixedPositioningContext;\n\n  // Checks if browser creates a positioning context for fixed elements.\n  // Transform rule will create a positioning context on browsers who follow the spec.\n  // Ie for example will fix it according to documentElement\n  // TODO: Other css rules also effects. perspective creates at chrome but not in firefox. transform-style preserve3d effects.\n  function checkFixedPositioningContextSupport() {\n    var support = false;\n    var parent = document.createElement('div');\n    var child = document.createElement('div');\n    parent.appendChild(child);\n    parent.style[transformJsProperty] = 'translate(0)';\n    // Make sure there is space on top of parent\n    parent.style.marginTop = '10px';\n    parent.style.visibility = 'hidden';\n    child.style.position = 'fixed';\n    child.style.top = 0;\n    document.body.appendChild(parent);\n    var rect = child.getBoundingClientRect();\n    // If offset top is greater than 0 meand transformed element created a positioning context.\n    if (rect.top > 0) {\n      support = true;\n    }\n    // Remove dummy content\n    document.body.removeChild(parent);\n    return support;\n  }\n\n  // It will return null if position sticky is not supported\n  var nativeStickyValue = prefix.getCssValue('position', 'sticky');\n\n  // It will return null if position fixed is not supported\n  var fixedPositionValue = prefix.getCssValue('position', 'fixed');\n\n  // Dirty business\n  var ie = navigator.appName === 'Microsoft Internet Explorer';\n  var ieversion;\n\n  if (ie) {\n    ieversion = parseFloat(navigator.appVersion.split('MSIE')[1]);\n  }\n\n  function FixTo(child, parent, options) {\n    this.child = child;\n    this._$child = $(child);\n    this.parent = parent;\n    this.options = {\n      className: 'fixto-fixed',\n      startAfterNode: {\n        enabled: false,\n        selector: ''\n      },\n      animations: {\n        enabled: false,\n        currentInAnimationClass: '',\n        currentOutAnimationClass: '',\n        allInAnimationsClasses: '',\n        allOutAnimationsClasses: '',\n        duration: 0\n      },\n      top: 0,\n      zIndex: ''\n    };\n    this._setOptions(options);\n\n    this._initAnimations();\n  }\n\n  FixTo.prototype = {\n    // Returns the total outerHeight of the elements passed to mind option. Will return 0 if none.\n    _mindtop: function _mindtop() {\n      var top = 0;\n      if (this._$mind) {\n        var el;\n        var rect;\n        var height;\n        for (var i = 0, l = this._$mind.length; i < l; i++) {\n          el = this._$mind[i];\n          rect = el.getBoundingClientRect();\n          if (rect.height) {\n            top += rect.height;\n          } else {\n            var styles = computedStyle.getAll(el);\n            top += el.offsetHeight + computedStyle.toFloat(styles.marginTop) + computedStyle.toFloat(styles.marginBottom);\n          }\n        }\n      }\n      return top;\n    },\n    _updateOutAnimationDuration: function _updateOutAnimationDuration() {\n      var animationDuration = this.options.animations.duration;\n      if (isNaN(animationDuration)) {\n        animationDuration = 0;\n      }\n\n      this._animationDuration = animationDuration;\n    },\n    _initAnimations: function _initAnimations() {\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      this._$child.removeClass(animations.allOutAnimationsClasses);\n\n      var self = this;\n      this._updateOutAnimationDuration();\n\n      this._animationOutDebounce = $.debounce(function () {\n        self._$child.removeClass(self.options.animations.allOutAnimationsClasses);\n        self._inOutAnimation = false;\n        self._unfix();\n        self._removeTransitionFromOutAnimation();\n      }, this._animationDuration);\n\n      this._animationInDebounce = $.debounce(function () {\n        self._inInAnimation = false;\n        self._$child.removeClass(self.options.animations.allInAnimationsClasses);\n      }, this._animationDuration);\n    },\n    _removeTransitionFromOutAnimation: function _removeTransitionFromOutAnimation() {\n      var noTransitionClass = 'h-global-transition-disable';\n      this._$child.addClass(noTransitionClass);\n\n      var childTransitionDuration = this._$child.css('transition-duration');\n      var isNumberRegex = /\\d+/;\n      var transitionDurationInS = childTransitionDuration.match(isNumberRegex)[0];\n      if (!transitionDurationInS) {\n        transitionDurationInS = 0;\n      }\n\n      var transitionDurationInMs = transitionDurationInS * 1000;\n      var transitionBuffer = 500;\n      var transitionDuration = transitionDurationInMs + transitionBuffer;\n      var self = this;\n      setTimeout(function () {\n        if (!self._$child) {\n          return;\n        }\n        self._$child.removeClass(noTransitionClass);\n      }, transitionDuration);\n    },\n    _passedStartAfterNode: function _passedStartAfterNode() {\n      var $startAfterNode = this._$startAfterNode;\n      if ($startAfterNode && $startAfterNode.length > 0) {\n        var offsetTop = this._afterElementOffsetTop;\n        var height = $startAfterNode.outerHeight();\n        return this._scrollTop > offsetTop + height;\n      }\n      return true;\n    },\n\n    // Public method to stop the behaviour of this instance.\n    stop: function stop() {\n      this._stop();\n      this._running = false;\n    },\n\n\n    // Public method starts the behaviour of this instance.\n    start: function start() {\n      // Start only if it is not running not to attach event listeners multiple times.\n      if (!this._running) {\n        this._start();\n        this._running = true;\n      }\n    },\n\n\n    //Public method to destroy fixto behaviour\n    destroy: function destroy() {\n      this.stop();\n\n      this._destroy();\n\n      // Remove jquery data from the element\n      this._$child.removeData('fixto-instance');\n\n      // set properties to null to break references\n      for (var prop in this) {\n        if (this.hasOwnProperty(prop)) {\n          this[prop] = null;\n        }\n      }\n    },\n    _setOptions: function _setOptions(options) {\n      $.extend(true, this.options, options);\n      if (this.options.mind) {\n        this._$mind = $(this.options.mind);\n      }\n      if (this.options.startAfterNode.enabled && this.options.startAfterNode.selector) {\n        this._$startAfterNode = $(this.options.startAfterNode.selector);\n      }\n    },\n    setOptions: function setOptions(options) {\n      this._setOptions(options);\n      this.refresh();\n    },\n\n\n    // Methods could be implemented by subclasses\n\n    _stop: function _stop() {},\n    _start: function _start() {},\n    _destroy: function _destroy() {},\n    refresh: function refresh() {}\n  };\n\n  // Class FixToContainer\n  function FixToContainer(child, parent, options) {\n    /** FIXME If you have a saved navigation with sticky, when you enter the page, this class creates two objects\n     * and because of that there are two events listeners. There should be only one instance of this class for each\n     * navigation\n     */\n    if (!child || !this._scriptCallIsValid(child)) {\n      return;\n    }\n    FixTo.call(this, child, parent, options);\n    this._replacer = new mimicNode.MimicNode(child);\n    this._ghostNode = this._replacer.replacer;\n\n    this._saveStyles();\n\n    this._saveViewportHeight();\n\n    // Create anonymous functions and keep references to register and unregister events.\n    this._proxied_onscroll = this._bind(this._onscroll, this);\n    this._proxied_onresize = this._bind(this._onresize, this);\n\n    this.start();\n  }\n\n  FixToContainer.prototype = new FixTo();\n\n  $.extend(FixToContainer.prototype, {\n    // Returns an anonymous function that will call the given function in the given context\n    _bind: function _bind(fn, context) {\n      return function () {\n        return fn.call(context);\n      };\n    },\n\n\n    // at ie8 maybe only in vm window resize event fires everytime an element is resized.\n    _toresize: ieversion === 8 ? document.documentElement : window,\n\n    //TODO @catalin this is a temporary workaround, until the issue: #0030376 is fixed\n    _scriptCallIsValid: function _scriptCallIsValid(child) {\n      var isInCustomizer = Colibri.isCustomizerPreview();\n      if (!isInCustomizer) {\n        return true;\n      }\n      var vueNavSelector = '.h-navigation_outer';\n      var vueNav = $(child).closest(vueNavSelector).get(0);\n      if (!vueNav) {\n        return true;\n      }\n      if (vueNav.__vue__) {\n        return true;\n      }\n      return false;\n    },\n\n    _onscroll: function _onscroll() {\n      /**\n       * TODO @catalin, now sometimes the child height is 0, other times is correct that ruins the out animation logic,\n       * until that is fixed this is a workaround to that problem. When the child height will always be correct remove\n       * this condition.\n       */\n      if (this._$child.outerHeight() === 0) {\n        return;\n      }\n      this._scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      this._parentBottom = this.parent.offsetHeight + this._fullOffset('offsetTop', this.parent);\n      if (this.options.startAfterNode && !this._passedStartAfterNode()) {\n        if (this.fixed && !this._inOutAnimation) {\n          this._unfixFromScrollListener();\n        }\n        return;\n      }\n      // if (this.options.mindBottomPadding !== false) {\n      //     this._parentBottom -= computedStyle.getFloat(this.parent, 'paddingBottom');\n      // }\n\n      // if (this.options.toBottom) {\n      //     this._fix();\n      //     this._adjust();\n      //     return\n      // }\n\n      // if (this.options.toBottom) {\n      //     this.options.top = this._viewportHeight - computedStyle.toFloat(computedStyle.getAll(this.child).height) - this.options.topSpacing;\n      // }\n      if (!this.fixed) {\n        var childStyles = computedStyle.getAll(this.child);\n\n        if (this._scrollTop < this._parentBottom && this._scrollTop > this._fullOffset('offsetTop', this.child) - this.options.top - this._mindtop() && this._viewportHeight > this.child.offsetHeight + computedStyle.toFloat(childStyles.marginTop) + computedStyle.toFloat(childStyles.marginBottom) || this.options.toBottom) {\n          this._fix();\n          this._adjust();\n        }\n      } else {\n        if (this.options.toBottom) {\n          if (this._scrollTop >= this._fullOffset('offsetTop', this._ghostNode)) {\n            this._unfixFromScrollListener();\n            return;\n          }\n        } else {\n          if (this._scrollTop > this._parentBottom || this._scrollTop <= this._fullOffset('offsetTop', this._ghostNode) - this.options.top - this._mindtop()) {\n            this._unfixFromScrollListener();\n            return;\n          }\n        }\n        this._adjust();\n      }\n    },\n\n    _adjust: function _adjust() {\n      var top = 0;\n      var mindTop = this._mindtop();\n      var diff = 0;\n      var childStyles = computedStyle.getAll(this.child);\n      var context = null;\n\n      if (fixedPositioningContext) {\n        // Get positioning context.\n        context = this._getContext();\n        if (context) {\n          // There is a positioning context. Top should be according to the context.\n          top = Math.abs(context.getBoundingClientRect().top);\n        }\n      }\n\n      diff = this._parentBottom - this._scrollTop - (this.child.offsetHeight + computedStyle.toFloat(childStyles.marginBottom) + mindTop + this.options.top);\n\n      if (diff > 0) {\n        diff = 0;\n      }\n\n      if (this.options.toBottom) {\n        // this.child.style.top = (diff + mindTop + top + this.options.top) - computedStyle.toFloat(childStyles.marginTop) + 'px';\n      } else {\n        var _top = this.options.top;\n        if (_top === 0) {\n          _top = $('body').offset().top;\n        }\n\n        this.child.style.top = Math.round(diff + mindTop + top + _top - computedStyle.toFloat(childStyles.marginTop)) + 'px';\n      }\n    },\n\n    // Calculate cumulative offset of the element.\n    // Optionally according to context\n    _fullOffset: function _fullOffset(offsetName, elm, context) {\n      var offset = elm[offsetName];\n      var offsetParent = elm.offsetParent;\n\n      // Add offset of the ascendent tree until we reach to the document root or to the given context\n      while (offsetParent !== null && offsetParent !== context) {\n        offset = offset + offsetParent[offsetName];\n        offsetParent = offsetParent.offsetParent;\n      }\n\n      return offset;\n    },\n\n    // Get positioning context of the element.\n    // We know that the closest parent that a transform rule applied will create a positioning context.\n    _getContext: function _getContext() {\n      var parent;\n      var element = this.child;\n      var context = null;\n      var styles;\n\n      // Climb up the treee until reaching the context\n      while (!context) {\n        parent = element.parentNode;\n        if (parent === document.documentElement) {\n          return null;\n        }\n\n        styles = computedStyle.getAll(parent);\n        // Element has a transform rule\n        if (styles[transformJsProperty] !== 'none') {\n          context = parent;\n          break;\n        }\n        element = parent;\n      }\n      return context;\n    },\n\n\n    _fix: function _fix() {\n      var child = this.child;\n      var childStyle = child.style;\n      var childStyles = computedStyle.getAll(child);\n      var left = child.getBoundingClientRect().left;\n      var width = childStyles.width;\n\n      this._saveStyles();\n\n      if (document.documentElement.currentStyle) {\n        // Function for ie<9. When hasLayout is not triggered in ie7, he will report currentStyle as auto, clientWidth as 0. Thus using offsetWidth.\n        // Opera also falls here\n\n        width = child.offsetWidth;\n        if (childStyles.boxSizing !== 'border-box') {\n          width = width - (computedStyle.toFloat(childStyles.paddingLeft) + computedStyle.toFloat(childStyles.paddingRight) + computedStyle.toFloat(childStyles.borderLeftWidth) + computedStyle.toFloat(childStyles.borderRightWidth));\n        }\n\n        width += 'px';\n      }\n\n      // Ie still fixes the container according to the viewport.\n      if (fixedPositioningContext) {\n        var context = this._getContext();\n        // if(context) {\n        //     // There is a positioning context. Left should be according to the context.\n        //     left = child.getBoundingClientRect().left - context.getBoundingClientRect().left;\n        // } else {\n        left = this._$child.offset().left;\n        // }\n      }\n\n      this._replacer.replace();\n\n      childStyle.left =\n      /*left + \"px\"; */left - computedStyle.toFloat(childStyles.marginLeft) + 'px';\n      childStyle.width = width;\n\n      childStyle.position = 'fixed';\n      if (this.options.toBottom) {\n        childStyle.top = '';\n        childStyle.bottom = this.options.top + computedStyle.toFloat(childStyles.marginBottom) + 'px';\n      } else {\n        childStyle.bottom = '';\n        var _top = this.options.top;\n\n        if (_top === 0) {\n          _top = $('body').offset().top;\n        }\n        childStyle.top = this._mindtop() + _top - computedStyle.toFloat(childStyles.marginTop) + 'px';\n      }\n\n      if (this.options.zIndex) {\n        this.child.style.zIndex = this.options.zIndex;\n      }\n\n      this._$child.addClass(this.options.className);\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      if (animations.enabled) {\n        this._$child.addClass(animations.currentInAnimationClass);\n        if (!this._inInAnimation) {\n          this._inInAnimation = true;\n          this._animationInDebounce();\n        }\n      }\n      this.fixed = true;\n      this._$child.trigger('fixto-added');\n    },\n    _unfixFromScrollListener: function _unfixFromScrollListener() {\n      if (this.options.animations.enabled) {\n        this._unfixTriggerAnimation();\n      } else {\n        this._unfix();\n      }\n    },\n    _getAfterElementOffsetTop: function _getAfterElementOffsetTop() {\n      var $node = this._$startAfterNode;\n      var defaultValue = 0;\n      if ($node && $node.length > 0) {\n        var elem = $node.get(0);\n        var distance = 0;\n        do {\n          // Increase our distance counter\n          distance += elem.offsetTop;\n\n          // Set the element to it's parent\n          elem = elem.offsetParent;\n        } while (elem);\n        distance = distance < defaultValue ? defaultValue : distance;\n        return distance;\n      }\n      return defaultValue;\n    },\n\n    _unfix: function _unfix() {\n      this._replacer.hide();\n      var childStyle = this.child.style;\n      childStyle.position = this._childOriginalPosition;\n      childStyle.top = this._childOriginalTop;\n      childStyle.bottom = this._childOriginalBottom;\n      childStyle.width = this._childOriginalWidth;\n      childStyle.left = this._childOriginalLeft;\n      childStyle.zIndex = this._childOriginalZIndex;\n      if (!this.options.always) {\n        this._$child.removeClass(this.options.className);\n        this._$child.trigger('fixto-removed');\n      }\n      this.fixed = false;\n    },\n    _unfixTriggerAnimation: function _unfixTriggerAnimation() {\n      this._animationInDebounce.flush();\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      this._$child.removeClass(animations.allOutAnimationsClasses);\n      if (animations.enabled) {\n        this._$child.addClass(animations.currentOutAnimationClass);\n      }\n      this._inOutAnimation = true;\n      this._animationOutDebounce();\n    },\n    _saveStyles: function _saveStyles() {\n      this._animationOutDebounce.flush();\n      var childStyle = this.child.style;\n      this._childOriginalPosition = childStyle.position;\n      if (this.options.toBottom) {\n        this._childOriginalTop = '';\n        this._childOriginalBottom = childStyle.bottom;\n      } else {\n        this._childOriginalTop = childStyle.top;\n        this._childOriginalBottom = '';\n      }\n      this._childOriginalWidth = childStyle.width;\n      this._childOriginalLeft = childStyle.left;\n      this._childOriginalZIndex = childStyle.zIndex;\n      this._afterElementOffsetTop = this._getAfterElementOffsetTop();\n    },\n    _onresize: function _onresize() {\n      this.refresh();\n    },\n    _saveViewportHeight: function _saveViewportHeight() {\n      // ie8 doesn't support innerHeight\n      this._viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n    },\n    _stop: function _stop() {\n      // Unfix the container immediately.\n      this._unfix();\n      // remove event listeners\n      $(window).unbind('scroll.fixto mousewheel', this._proxied_onscroll);\n      $(this._toresize).unbind('resize.fixto', this._proxied_onresize);\n    },\n    _start: function _start() {\n      // Trigger onscroll to have the effect immediately.\n      this._onscroll();\n\n      // Attach event listeners\n      $(window).bind('scroll.fixto mousewheel', this._proxied_onscroll);\n      $(this._toresize).bind('resize.fixto', this._proxied_onresize);\n    },\n    _destroy: function _destroy() {\n      // Destroy mimic node instance\n      this._replacer.destroy();\n    },\n    refresh: function refresh() {\n      this._saveViewportHeight();\n      this._unfix();\n      this._onscroll();\n    }\n  });\n\n  function NativeSticky(child, parent, options) {\n    FixTo.call(this, child, parent, options);\n    this.start();\n  }\n\n  NativeSticky.prototype = new FixTo();\n\n  $.extend(NativeSticky.prototype, {\n    _start: function _start() {\n      var childStyles = computedStyle.getAll(this.child);\n\n      this._childOriginalPosition = childStyles.position;\n      this._childOriginalTop = childStyles.top;\n\n      this.child.style.position = nativeStickyValue;\n      this.refresh();\n    },\n    _stop: function _stop() {\n      this.child.style.position = this._childOriginalPosition;\n      this.child.style.top = this._childOriginalTop;\n    },\n    refresh: function refresh() {\n      this.child.style.top = this._mindtop() + this.options.top + 'px';\n    }\n  });\n\n  var fixTo = function fixTo(childElement, parentElement, options) {\n    if (nativeStickyValue && !options || nativeStickyValue && options && options.useNativeSticky !== false) {\n      // Position sticky supported and user did not disabled the usage of it.\n      return new NativeSticky(childElement, parentElement, options);\n    } else if (fixedPositionValue) {\n      // Position fixed supported\n\n      if (fixedPositioningContext === undefined) {\n        // We don't know yet if browser creates fixed positioning contexts. Check it.\n        fixedPositioningContext = checkFixedPositioningContextSupport();\n      }\n\n      return new FixToContainer(childElement, parentElement, options);\n    } else {\n      return 'Neither fixed nor sticky positioning supported';\n    }\n  };\n\n  /*\n  No support for ie lt 8\n  */\n\n  if (ieversion < 8) {\n    fixTo = function fixTo() {\n      return 'not supported';\n    };\n  }\n\n  // Let it be a jQuery Plugin\n  $.fn.fixTo = function (targetSelector, options) {\n    var $targets = $(targetSelector);\n\n    var i = 0;\n    return this.each(function () {\n      // Check the data of the element.\n      var instance = $(this).data('fixto-instance');\n\n      // If the element is not bound to an instance, create the instance and save it to elements data.\n      if (!instance) {\n        $(this).data('fixto-instance', fixTo(this, $targets[i], options));\n      } else {\n        // If we already have the instance here, expect that targetSelector parameter will be a string\n        // equal to a public methods name. Run the method on the instance without checking if\n        // it exists or it is a public method or not. Cause nasty errors when necessary.\n        var method = targetSelector;\n        instance[method].call(instance, options);\n      }\n      i++;\n    });\n  };\n\n  /*\n      Expose\n  */\n\n  return {\n    FixToContainer: FixToContainer,\n    fixTo: fixTo,\n    computedStyle: computedStyle,\n    mimicNode: mimicNode\n  };\n})(window.jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'overlap';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      data: {}\n    };\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var self = this;\n      $(window).bind('resize.overlap orientationchange.overlap', function () {\n        setTimeout(self.resizeCallback.bind(self), 50);\n      });\n      self.resizeCallback();\n    },\n    stop: function stop() {\n      $(window).off('.overlap');\n      if (this.$sheet) {\n        document.head.removeChild(this.$sheet);\n        this.$sheet = null;\n      }\n    },\n    computePadding: function computePadding() {\n      if (!this.$sheet) {\n        this.$sheet = document.createElement('style');\n        document.head.appendChild(this.$sheet);\n      }\n      var paddingTop = this.$element[0].getBoundingClientRect().height + 'px !important;';\n      this.$sheet.innerHTML = '.h-navigation-padding{padding-top:' + paddingTop + '}';\n    },\n    resizeCallback: function resizeCallback() {\n      this.computePadding();\n    }\n  };\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL25hdmlnYXRpb24vc2NyaXB0cy9vdmVybGFwLmpzPzY5NDQiXSwibmFtZXMiOlsiJCIsIkNvbGlicmkiLCJjbGFzc05hbWUiLCJDb21wb25lbnQiLCJlbGVtZW50Iiwib3B0aW9ucyIsIm5hbWVzcGFjZSIsImRlZmF1bHRzIiwiZGF0YSIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJwcm90b3R5cGUiLCJzZWxmIiwid2luZG93IiwiYmluZCIsInNldFRpbWVvdXQiLCJyZXNpemVDYWxsYmFjayIsInN0b3AiLCJvZmYiLCIkc2hlZXQiLCJkb2N1bWVudCIsImhlYWQiLCJyZW1vdmVDaGlsZCIsImNvbXB1dGVQYWRkaW5nIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicGFkZGluZ1RvcCIsIiRlbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGVpZ2h0IiwiaW5uZXJIVE1MIiwiaW5oZXJpdHMiLCJQbHVnaW4iLCJjcmVhdGUiLCJhdXRvbG9hZCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxVQUFTQSxDQUFULEVBQVlDLE9BQVosRUFBcUI7QUFDcEIsTUFBSUMsWUFBWSxTQUFoQjs7QUFFQSxNQUFJQyxZQUFZLFNBQVpBLFNBQVksQ0FBU0MsT0FBVCxFQUFrQkMsT0FBbEIsRUFBMkI7QUFDekMsU0FBS0MsU0FBTCxHQUFpQkosU0FBakI7QUFDQSxTQUFLSyxRQUFMLEdBQWdCO0FBQ2RDLFlBQU07QUFEUSxLQUFoQjs7QUFJQTtBQUNBUCxZQUFRUSxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7O0FBRUE7QUFDQSxTQUFLQyxLQUFMO0FBQ0QsR0FYRDs7QUFhQVIsWUFBVVMsU0FBVixHQUFzQjtBQUNwQkQsU0FEb0IsbUJBQ1o7QUFDTixVQUFJRSxPQUFPLElBQVg7QUFDQWIsUUFBRWMsTUFBRixFQUFVQyxJQUFWLENBQWUsMENBQWYsRUFBMkQsWUFBVztBQUNwRUMsbUJBQVdILEtBQUtJLGNBQUwsQ0FBb0JGLElBQXBCLENBQXlCRixJQUF6QixDQUFYLEVBQTJDLEVBQTNDO0FBQ0QsT0FGRDtBQUdBQSxXQUFLSSxjQUFMO0FBQ0QsS0FQbUI7QUFTcEJDLFFBVG9CLGtCQVNiO0FBQ0xsQixRQUFFYyxNQUFGLEVBQVVLLEdBQVYsQ0FBYyxVQUFkO0FBQ0EsVUFBSSxLQUFLQyxNQUFULEVBQWlCO0FBQ2ZDLGlCQUFTQyxJQUFULENBQWNDLFdBQWQsQ0FBMEIsS0FBS0gsTUFBL0I7QUFDQSxhQUFLQSxNQUFMLEdBQWMsSUFBZDtBQUNEO0FBQ0YsS0FmbUI7QUFpQnBCSSxrQkFqQm9CLDRCQWlCSDtBQUNmLFVBQUksQ0FBQyxLQUFLSixNQUFWLEVBQWtCO0FBQ2hCLGFBQUtBLE1BQUwsR0FBY0MsU0FBU0ksYUFBVCxDQUF1QixPQUF2QixDQUFkO0FBQ0FKLGlCQUFTQyxJQUFULENBQWNJLFdBQWQsQ0FBMEIsS0FBS04sTUFBL0I7QUFDRDtBQUNELFVBQUlPLGFBQ0YsS0FBS0MsUUFBTCxDQUFjLENBQWQsRUFBaUJDLHFCQUFqQixHQUF5Q0MsTUFBekMsR0FBa0QsZ0JBRHBEO0FBRUEsV0FBS1YsTUFBTCxDQUFZVyxTQUFaLEdBQ0UsdUNBQXVDSixVQUF2QyxHQUFvRCxHQUR0RDtBQUVELEtBMUJtQjtBQTRCcEJWLGtCQTVCb0IsNEJBNEJIO0FBQ2YsV0FBS08sY0FBTDtBQUNEO0FBOUJtQixHQUF0QjtBQWdDQXJCLFlBQVU2QixRQUFWLENBQW1CL0IsT0FBbkI7QUFDQUEsVUFBUUMsU0FBUixJQUFxQkMsU0FBckI7O0FBRUFGLFVBQVFnQyxNQUFSLENBQWVDLE1BQWYsQ0FBc0JoQyxTQUF0QjtBQUNBRCxVQUFRZ0MsTUFBUixDQUFlRSxRQUFmLENBQXdCakMsU0FBeEI7QUFDRCxDQXJERCxFQXFER2tDLE1BckRILEVBcURXbkMsT0FyRFgiLCJmaWxlIjoiMTA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCQsIENvbGlicmkpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICdvdmVybGFwJztcblxuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMubmFtZXNwYWNlID0gY2xhc3NOYW1lO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBkYXRhOiB7fSxcbiAgICB9O1xuXG4gICAgLy8gUGFyZW50IENvbnN0cnVjdG9yXG4gICAgQ29saWJyaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gSW5pdGlhbGl6YXRpb25cbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH07XG5cbiAgQ29tcG9uZW50LnByb3RvdHlwZSA9IHtcbiAgICBzdGFydCgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICQod2luZG93KS5iaW5kKCdyZXNpemUub3ZlcmxhcCBvcmllbnRhdGlvbmNoYW5nZS5vdmVybGFwJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldFRpbWVvdXQoc2VsZi5yZXNpemVDYWxsYmFjay5iaW5kKHNlbGYpLCA1MCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGYucmVzaXplQ2FsbGJhY2soKTtcbiAgICB9LFxuXG4gICAgc3RvcCgpIHtcbiAgICAgICQod2luZG93KS5vZmYoJy5vdmVybGFwJyk7XG4gICAgICBpZiAodGhpcy4kc2hlZXQpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0aGlzLiRzaGVldCk7XG4gICAgICAgIHRoaXMuJHNoZWV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZVBhZGRpbmcoKSB7XG4gICAgICBpZiAoIXRoaXMuJHNoZWV0KSB7XG4gICAgICAgIHRoaXMuJHNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLiRzaGVldCk7XG4gICAgICB9XG4gICAgICB2YXIgcGFkZGluZ1RvcCA9XG4gICAgICAgIHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgJ3B4ICFpbXBvcnRhbnQ7JztcbiAgICAgIHRoaXMuJHNoZWV0LmlubmVySFRNTCA9XG4gICAgICAgICcuaC1uYXZpZ2F0aW9uLXBhZGRpbmd7cGFkZGluZy10b3A6JyArIHBhZGRpbmdUb3AgKyAnfSc7XG4gICAgfSxcblxuICAgIHJlc2l6ZUNhbGxiYWNrKCkge1xuICAgICAgdGhpcy5jb21wdXRlUGFkZGluZygpO1xuICAgIH0sXG4gIH07XG4gIENvbXBvbmVudC5pbmhlcml0cyhDb2xpYnJpKTtcbiAgQ29saWJyaVtjbGFzc05hbWVdID0gQ29tcG9uZW50O1xuXG4gIENvbGlicmkuUGx1Z2luLmNyZWF0ZShjbGFzc05hbWUpO1xuICBDb2xpYnJpLlBsdWdpbi5hdXRvbG9hZChjbGFzc05hbWUpO1xufSkoalF1ZXJ5LCBDb2xpYnJpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvbmF2aWdhdGlvbi9zY3JpcHRzL292ZXJsYXAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'masonry';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {};\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    this.start();\n  };\n\n  function attributeExistsAndFalse($node, attrName) {\n    if ($node[0].hasAttribute(attrName) && $node.attr(attrName) != 'true') {\n      return true;\n    }\n  }\n  function showMasonry($node) {\n    // check for old version of masonry, atribute not used anymore//\n    if (attributeExistsAndFalse($node, 'data-show-masonry') || attributeExistsAndFalse($node, 'show-masonry')) {\n      return false;\n    }\n    return true;\n  }\n  Component.prototype = {\n    start: function start() {\n      var masonry = this.$element;\n      if (!showMasonry(masonry)) {\n        return;\n      }\n\n      masonry.masonry({\n        itemSelector: '.masonry-item',\n        columnWidth: '.masonry-item',\n        percentPosition: true\n      });\n\n      (function () {\n        var images = masonry.find('img');\n        var loadedImages = 0;\n        var completed = 0;\n\n        function imageLoaded() {\n          loadedImages++;\n          if (images.length === loadedImages) {\n            try {\n              masonry.data().masonry.layout();\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        }\n\n        images.each(function () {\n          if (this.complete) {\n            completed++;\n            imageLoaded();\n          } else {\n            $(this).on('load', imageLoaded);\n            $(this).on('error', imageLoaded);\n          }\n        });\n\n        if (images.length !== completed) {\n          if (document.readyState == 'complete') {\n            setTimeout(function () {\n              masonry.data().masonry.layout();\n            }, 10);\n          }\n        }\n\n        $(window).on('load', function () {\n          masonry.data().masonry.layout();\n        });\n      })();\n    },\n    stop: function stop() {\n      try {\n        var masonry = this.$element;\n        masonry.masonry('destroy');\n      } catch (e) {}\n    },\n    restart: function restart() {\n      this.stop();\n      this.start();\n    },\n    loadImages: function loadImages() {}\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL21hc29ucnkuanM/YzIxMyJdLCJuYW1lcyI6WyIkIiwiQ29saWJyaSIsImNsYXNzTmFtZSIsIkNvbXBvbmVudCIsImVsZW1lbnQiLCJvcHRpb25zIiwibmFtZXNwYWNlIiwiZGVmYXVsdHMiLCJhcHBseSIsImFyZ3VtZW50cyIsInN0YXJ0IiwiYXR0cmlidXRlRXhpc3RzQW5kRmFsc2UiLCIkbm9kZSIsImF0dHJOYW1lIiwiaGFzQXR0cmlidXRlIiwiYXR0ciIsInNob3dNYXNvbnJ5IiwicHJvdG90eXBlIiwibWFzb25yeSIsIiRlbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwiY29sdW1uV2lkdGgiLCJwZXJjZW50UG9zaXRpb24iLCJpbWFnZXMiLCJmaW5kIiwibG9hZGVkSW1hZ2VzIiwiY29tcGxldGVkIiwiaW1hZ2VMb2FkZWQiLCJsZW5ndGgiLCJkYXRhIiwibGF5b3V0IiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImVhY2giLCJjb21wbGV0ZSIsIm9uIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwic2V0VGltZW91dCIsIndpbmRvdyIsInN0b3AiLCJyZXN0YXJ0IiwibG9hZEltYWdlcyIsImluaGVyaXRzIiwiUGx1Z2luIiwiY3JlYXRlIiwiYXV0b2xvYWQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZQyxPQUFaLEVBQXFCO0FBQ3BCLE1BQUlDLFlBQVksU0FBaEI7O0FBRUEsTUFBSUMsWUFBWSxTQUFaQSxTQUFZLENBQVNDLE9BQVQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3pDLFNBQUtDLFNBQUwsR0FBaUJKLFNBQWpCO0FBQ0EsU0FBS0ssUUFBTCxHQUFnQixFQUFoQjtBQUNBO0FBQ0FOLFlBQVFPLEtBQVIsQ0FBYyxJQUFkLEVBQW9CQyxTQUFwQjtBQUNBLFNBQUtDLEtBQUw7QUFDRCxHQU5E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dXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigkLCBDb2xpYnJpKSB7XHJcbiAgdmFyIGNsYXNzTmFtZSA9ICdtYXNvbnJ5JztcclxuXHJcbiAgdmFyIENvbXBvbmVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMubmFtZXNwYWNlID0gY2xhc3NOYW1lO1xyXG4gICAgdGhpcy5kZWZhdWx0cyA9IHt9O1xyXG4gICAgLy8gUGFyZW50IENvbnN0cnVjdG9yXHJcbiAgICBDb2xpYnJpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gYXR0cmlidXRlRXhpc3RzQW5kRmFsc2UoJG5vZGUsIGF0dHJOYW1lKSB7XHJcbiAgICBpZiAoJG5vZGVbMF0uaGFzQXR0cmlidXRlKGF0dHJOYW1lKSAmJiAkbm9kZS5hdHRyKGF0dHJOYW1lKSAhPSAndHJ1ZScpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHNob3dNYXNvbnJ5KCRub2RlKSB7XHJcbiAgICAvLyBjaGVjayBmb3Igb2xkIHZlcnNpb24gb2YgbWFzb25yeSwgYXRyaWJ1dGUgbm90IHVzZWQgYW55bW9yZS8vXHJcbiAgICBpZiAoXHJcbiAgICAgIGF0dHJpYnV0ZUV4aXN0c0FuZEZhbHNlKCRub2RlLCAnZGF0YS1zaG93LW1hc29ucnknKSB8fFxyXG4gICAgICBhdHRyaWJ1dGVFeGlzdHNBbmRGYWxzZSgkbm9kZSwgJ3Nob3ctbWFzb25yeScpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIENvbXBvbmVudC5wcm90b3R5cGUgPSB7XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgdmFyIG1hc29ucnkgPSB0aGlzLiRlbGVtZW50O1xyXG4gICAgICBpZiAoIXNob3dNYXNvbnJ5KG1hc29ucnkpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXNvbnJ5Lm1hc29ucnkoe1xyXG4gICAgICAgIGl0ZW1TZWxlY3RvcjogJy5tYXNvbnJ5LWl0ZW0nLFxyXG4gICAgICAgIGNvbHVtbldpZHRoOiAnLm1hc29ucnktaXRlbScsXHJcbiAgICAgICAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW1hZ2VzID0gbWFzb25yeS5maW5kKCdpbWcnKTtcclxuICAgICAgICB2YXIgbG9hZGVkSW1hZ2VzID0gMDtcclxuICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW1hZ2VMb2FkZWQoKSB7XHJcbiAgICAgICAgICBsb2FkZWRJbWFnZXMrKztcclxuICAgICAgICAgIGlmIChpbWFnZXMubGVuZ3RoID09PSBsb2FkZWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBtYXNvbnJ5LmRhdGEoKS5tYXNvbnJ5LmxheW91dCgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW1hZ2VzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZWQrKztcclxuICAgICAgICAgICAgaW1hZ2VMb2FkZWQoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQodGhpcykub24oJ2xvYWQnLCBpbWFnZUxvYWRlZCk7XHJcbiAgICAgICAgICAgICQodGhpcykub24oJ2Vycm9yJywgaW1hZ2VMb2FkZWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoaW1hZ2VzLmxlbmd0aCAhPT0gY29tcGxldGVkKSB7XHJcbiAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgbWFzb25yeS5kYXRhKCkubWFzb25yeS5sYXlvdXQoKTtcclxuICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBtYXNvbnJ5LmRhdGEoKS5tYXNvbnJ5LmxheW91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KSgpO1xyXG4gICAgfSxcclxuICAgIHN0b3AoKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IG1hc29ucnkgPSB0aGlzLiRlbGVtZW50O1xyXG4gICAgICAgIG1hc29ucnkubWFzb25yeSgnZGVzdHJveScpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgfSxcclxuICAgIHJlc3RhcnQoKSB7XHJcbiAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICB9LFxyXG4gICAgbG9hZEltYWdlcygpIHt9LFxyXG4gIH07XHJcblxyXG4gIENvbXBvbmVudC5pbmhlcml0cyhDb2xpYnJpKTtcclxuICBDb2xpYnJpW2NsYXNzTmFtZV0gPSBDb21wb25lbnQ7XHJcbiAgQ29saWJyaS5QbHVnaW4uY3JlYXRlKGNsYXNzTmFtZSk7XHJcbiAgQ29saWJyaS5QbHVnaW4uYXV0b2xvYWQoY2xhc3NOYW1lKTtcclxufSkoalF1ZXJ5LCBDb2xpYnJpKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbGlicmktZWRpdG9yL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9tYXNvbnJ5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'footer-parallax';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      activeClasses: {\n        header: 'h-footer-parallax-header-class',\n        content: 'h-footer-parallax-content-class',\n        footer: 'h-footer-parallax',\n        container: 'new-stacking-context'\n      },\n      selectors: {\n        /**\n         * TODO @catalin, when the .header .content and .footer classes can be found in the customizer remove the\n         * classes inserted in the vue components\n         */\n\n        header: '.page-header, .header',\n        content: '.page-content, .content',\n        container: '#page-top'\n      }\n    };\n\n    this.bindedResizeListener = this.resizeListener.bind(this);\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var selectors = this.opts.selectors;\n      var activeClasses = this.opts.activeClasses;\n      this.$content = $(selectors.content).first();\n      this.$header = $(selectors.header).first();\n      this.$container = $(selectors.container);\n\n      //TODO this.opts.enabled does not work, it does not update. When it will work this line should be replaced with\n      //if (this.opts.enabled) {\n      // if (this.$element.attr('data-enabled') !== 'true') {\n      //   return;\n      // }\n      this.$container.addClass(activeClasses.container);\n      this.$header.addClass(activeClasses.header);\n      this.$content.addClass(activeClasses.content);\n      this.$element.addClass(activeClasses.footer);\n\n      window.addResizeListener(this.$element[0], this.bindedResizeListener);\n      this.updateSiblingStyle();\n    },\n    stop: function stop() {\n      var activeClasses = this.opts.activeClasses;\n      if (this.$element.hasClass(activeClasses.footer)) {\n        this.$container.removeClass(activeClasses.container);\n        this.$header.removeClass(activeClasses.header);\n        this.$content.removeClass(activeClasses.content);\n        this.$element.removeClass(activeClasses.footer);\n        window.removeResizeListener(this.$element[0], this.bindedResizeListener);\n        this.$content.css('margin-bottom', '');\n      }\n    },\n    restart: function restart() {\n      this.stop();\n      this.start();\n    },\n    resizeListener: function resizeListener() {\n      this.updateSiblingStyle();\n    },\n    updateSiblingStyle: function updateSiblingStyle() {\n      var footerHeight = this.$element.outerHeight();\n      this.$content.css('margin-bottom', footerHeight + 'px');\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2Zvb3Rlci9zY3JpcHRzL2Zvb3Rlci1wYXJhbGF4LmpzPzE0YTEiXSwibmFtZXMiOlsiJCIsIkNvbGlicmkiLCJjbGFzc05hbWUiLCJDb21wb25lbnQiLCJlbGVtZW50Iiwib3B0aW9ucyIsIm5hbWVzcGFjZSIsImRlZmF1bHRzIiwiYWN0aXZlQ2xhc3NlcyIsImhlYWRlciIsImNvbnRlbnQiLCJmb290ZXIiLCJjb250YWluZXIiLCJzZWxlY3RvcnMiLCJiaW5kZWRSZXNpemVMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwiYmluZCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJwcm90b3R5cGUiLCJvcHRzIiwiJGNvbnRlbnQiLCJmaXJzdCIsIiRoZWFkZXIiLCIkY29udGFpbmVyIiwiYWRkQ2xhc3MiLCIkZWxlbWVudCIsIndpbmRvdyIsImFkZFJlc2l6ZUxpc3RlbmVyIiwidXBkYXRlU2libGluZ1N0eWxlIiwic3RvcCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsImNzcyIsInJlc3RhcnQiLCJmb290ZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsImluaGVyaXRzIiwiUGx1Z2luIiwiY3JlYXRlIiwiYXV0b2xvYWQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZQyxPQUFaLEVBQXFCO0FBQ3BCLE1BQUlDLFlBQVksaUJBQWhCOztBQUVBLE1BQUlDLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxPQUFULEVBQWtCQyxPQUFsQixFQUEyQjtBQUN6QyxTQUFLQyxTQUFMLEdBQWlCSixTQUFqQjtBQUNBLFNBQUtLLFFBQUwsR0FBZ0I7QUFDZEMscUJBQWU7QUFDYkMsZ0JBQVEsZ0NBREs7QUFFYkMsaUJBQVMsaUNBRkk7QUFHYkMsZ0JBQVEsbUJBSEs7QUFJYkMsbUJBQVc7QUFKRSxP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IENvbGlicmkpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICdmb290ZXItcGFyYWxsYXgnO1xuXG4gIHZhciBDb21wb25lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBjbGFzc05hbWU7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIGFjdGl2ZUNsYXNzZXM6IHtcbiAgICAgICAgaGVhZGVyOiAnaC1mb290ZXItcGFyYWxsYXgtaGVhZGVyLWNsYXNzJyxcbiAgICAgICAgY29udGVudDogJ2gtZm9vdGVyLXBhcmFsbGF4LWNvbnRlbnQtY2xhc3MnLFxuICAgICAgICBmb290ZXI6ICdoLWZvb3Rlci1wYXJhbGxheCcsXG4gICAgICAgIGNvbnRhaW5lcjogJ25ldy1zdGFja2luZy1jb250ZXh0JyxcbiAgICAgIH0sXG4gICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE8gQGNhdGFsaW4sIHdoZW4gdGhlIC5oZWFkZXIgLmNvbnRlbnQgYW5kIC5mb290ZXIgY2xhc3NlcyBjYW4gYmUgZm91bmQgaW4gdGhlIGN1c3RvbWl6ZXIgcmVtb3ZlIHRoZVxuICAgICAgICAgKiBjbGFzc2VzIGluc2VydGVkIGluIHRoZSB2dWUgY29tcG9uZW50c1xuICAgICAgICAgKi9cblxuICAgICAgICBoZWFkZXI6ICcucGFnZS1oZWFkZXIsIC5oZWFkZXInLFxuICAgICAgICBjb250ZW50OiAnLnBhZ2UtY29udGVudCwgLmNvbnRlbnQnLFxuICAgICAgICBjb250YWluZXI6ICcjcGFnZS10b3AnLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5iaW5kZWRSZXNpemVMaXN0ZW5lciA9IHRoaXMucmVzaXplTGlzdGVuZXIuYmluZCh0aGlzKTtcblxuICAgIC8vIFBhcmVudCBDb25zdHJ1Y3RvclxuICAgIENvbGlicmkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBJbml0aWFsaXphdGlvblxuICAgIHRoaXMuc3RhcnQoKTtcbiAgfTtcblxuICBDb21wb25lbnQucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0KCkge1xuICAgICAgY29uc3Qgc2VsZWN0b3JzID0gdGhpcy5vcHRzLnNlbGVjdG9ycztcbiAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSB0aGlzLm9wdHMuYWN0aXZlQ2xhc3NlcztcbiAgICAgIHRoaXMuJGNvbnRlbnQgPSAkKHNlbGVjdG9ycy5jb250ZW50KS5maXJzdCgpO1xuICAgICAgdGhpcy4kaGVhZGVyID0gJChzZWxlY3RvcnMuaGVhZGVyKS5maXJzdCgpO1xuICAgICAgdGhpcy4kY29udGFpbmVyID0gJChzZWxlY3RvcnMuY29udGFpbmVyKTtcblxuICAgICAgLy9UT0RPIHRoaXMub3B0cy5lbmFibGVkIGRvZXMgbm90IHdvcmssIGl0IGRvZXMgbm90IHVwZGF0ZS4gV2hlbiBpdCB3aWxsIHdvcmsgdGhpcyBsaW5lIHNob3VsZCBiZSByZXBsYWNlZCB3aXRoXG4gICAgICAvL2lmICh0aGlzLm9wdHMuZW5hYmxlZCkge1xuICAgICAgLy8gaWYgKHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lbmFibGVkJykgIT09ICd0cnVlJykge1xuICAgICAgLy8gICByZXR1cm47XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250YWluZXIpO1xuICAgICAgdGhpcy4kaGVhZGVyLmFkZENsYXNzKGFjdGl2ZUNsYXNzZXMuaGVhZGVyKTtcbiAgICAgIHRoaXMuJGNvbnRlbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250ZW50KTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5mb290ZXIpO1xuXG4gICAgICB3aW5kb3cuYWRkUmVzaXplTGlzdGVuZXIodGhpcy4kZWxlbWVudFswXSwgdGhpcy5iaW5kZWRSZXNpemVMaXN0ZW5lcik7XG4gICAgICB0aGlzLnVwZGF0ZVNpYmxpbmdTdHlsZSgpO1xuICAgIH0sXG4gICAgc3RvcCgpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSB0aGlzLm9wdHMuYWN0aXZlQ2xhc3NlcztcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKGFjdGl2ZUNsYXNzZXMuZm9vdGVyKSkge1xuICAgICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250YWluZXIpO1xuICAgICAgICB0aGlzLiRoZWFkZXIucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5oZWFkZXIpO1xuICAgICAgICB0aGlzLiRjb250ZW50LnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzZXMuY29udGVudCk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5mb290ZXIpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIoXG4gICAgICAgICAgdGhpcy4kZWxlbWVudFswXSxcbiAgICAgICAgICB0aGlzLmJpbmRlZFJlc2l6ZUxpc3RlbmVyLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLiRjb250ZW50LmNzcygnbWFyZ2luLWJvdHRvbScsICcnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc3RhcnQoKSB7XG4gICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9LFxuICAgIHJlc2l6ZUxpc3RlbmVyKCkge1xuICAgICAgdGhpcy51cGRhdGVTaWJsaW5nU3R5bGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZVNpYmxpbmdTdHlsZSgpIHtcbiAgICAgIGxldCBmb290ZXJIZWlnaHQgPSB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgICB0aGlzLiRjb250ZW50LmNzcygnbWFyZ2luLWJvdHRvbScsIGZvb3RlckhlaWdodCArICdweCcpO1xuICAgIH0sXG4gIH07XG5cbiAgQ29tcG9uZW50LmluaGVyaXRzKENvbGlicmkpO1xuICBDb2xpYnJpW2NsYXNzTmFtZV0gPSBDb21wb25lbnQ7XG4gIENvbGlicmkuUGx1Z2luLmNyZWF0ZShjbGFzc05hbWUpO1xuICBDb2xpYnJpLlBsdWdpbi5hdXRvbG9hZChjbGFzc05hbWUpO1xufSkoalF1ZXJ5LCBDb2xpYnJpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvZm9vdGVyL3NjcmlwdHMvZm9vdGVyLXBhcmFsYXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2Nzcy90aGVtZS5zY3NzPzU1MGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvY3NzL3RoZW1lLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL2N1c3RvbWl6ZXIuc2Nzcz9kNGQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjExMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL2N1c3RvbWl6ZXIuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL3ByZXZpZXcuc2Nzcz9iMTZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjExNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL3ByZXZpZXcuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///114\n");

/***/ })
/******/ ]);
