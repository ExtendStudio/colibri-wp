/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 91);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj8wY2I4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJqUXVlcnlcIlxuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzP2ZmYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQXlDO0FBQ2hEO0FBQ0EsSUFBSSxvQ0FBUSxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0dBQUU7QUFDckIsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV2RW1pdHRlciB2MS4xLjBcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICkgPT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIHZhciBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggdmFyIGk9MDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (name, definition) {\n\n  if (true) {\n    module.exports = definition();\n  } else if (typeof define == 'function' && _typeof(define.amd) == 'object') {\n    define(definition);\n  } else {\n    this[name] = definition();\n  }\n})('Colibri', function () {\n  var $ = jQuery;\n  if (typeof jQuery === 'undefined') {\n    throw new Error('Colibri requires jQuery');\n  }\n\n  ;(function ($) {\n    var version = $.fn.jquery.split('.');\n    if (version[0] === 1 && version[1] < 8) {\n      throw new Error('Colibri requires at least jQuery v1.8');\n    }\n  })(jQuery);\n\n  var _Colibri;\n\n  var lib_prefix = \"colibri.\";\n\n  ;(function () {\n    // Inherits\n    Function.prototype.inherits = function (parent) {\n      var F = function F() {};\n      F.prototype = parent.prototype;\n      var f = new F();\n\n      for (var prop in this.prototype) {\n        f[prop] = this.prototype[prop];\n      }\n      this.prototype = f;\n      this.prototype.super = parent.prototype;\n    };\n\n    // Core Class\n    _Colibri = function Colibri(element, options) {\n      options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};\n\n      this.$element = $(element);\n      var instanceId = this.$element.data('colibri-id');\n\n      var instanceData = _Colibri.getData(instanceId);\n      this.instance = instanceId;\n\n      var elementData = this.$element.data();\n\n      this.opts = $.extend(true, {}, this.defaults, $.fn[lib_prefix + this.namespace].options, elementData, instanceData, options);\n      this.$target = typeof this.opts.target === 'string' ? $(this.opts.target) : null;\n    };\n\n    _Colibri.getData = function (id) {\n      if (window.colibriData && window.colibriData[id]) {\n        return window.colibriData[id];\n      }\n\n      return {};\n    };\n\n    _Colibri.isCustomizerPreview = function () {\n      return !!window.colibriCustomizerPreviewData;\n    };\n    // Core Functionality\n    _Colibri.prototype = {\n      updateOpts: function updateOpts(updatedData) {\n        var instanceId = this.instance;\n        var instanceData = $.extend(true, {}, this.defaults, _Colibri.getData(instanceId));\n        var updatedDataWithDefault = updatedData ? updatedData : {};\n        this.opts = $.extend(true, this.opts, instanceData, updatedDataWithDefault);\n      },\n      getInstance: function getInstance() {\n        return this.$element.data('fn.' + this.namespace);\n      },\n      hasTarget: function hasTarget() {\n        return !(this.$target === null);\n      },\n      callback: function callback(type) {\n        var args = [].slice.call(arguments).splice(1);\n\n        // on element callback\n        if (this.$element) {\n          args = this._fireCallback($._data(this.$element[0], 'events'), type, this.namespace, args);\n        }\n\n        // on target callback\n        if (this.$target) {\n          args = this._fireCallback($._data(this.$target[0], 'events'), type, this.namespace, args);\n        }\n\n        // opts callback\n        if (this.opts && this.opts.callbacks && $.isFunction(this.opts.callbacks[type])) {\n          return this.opts.callbacks[type].apply(this, args);\n        }\n\n        return args;\n      },\n      _fireCallback: function _fireCallback(events, type, eventNamespace, args) {\n        if (events && typeof events[type] !== 'undefined') {\n          var len = events[type].length;\n          for (var i = 0; i < len; i++) {\n            var namespace = events[type][i].namespace;\n            if (namespace === eventNamespace) {\n              var value = events[type][i].handler.apply(this, args);\n            }\n          }\n        }\n\n        return typeof value === 'undefined' ? args : value;\n      }\n    };\n  })();\n\n  (function (Colibri) {\n    Colibri.Plugin = {\n      create: function create(classname, pluginname) {\n        pluginname = typeof pluginname === 'undefined' ? classname.toLowerCase() : pluginname;\n        pluginname = lib_prefix + pluginname;\n\n        $.fn[pluginname] = function (method, options) {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var name = 'fn.' + pluginname;\n          var val = [];\n\n          this.each(function () {\n            var $this = $(this),\n                data = $this.data(name);\n            options = (typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' ? method : options;\n\n            if (!data) {\n              // Initialization\n              $this.data(name, {});\n              data = new Colibri[classname](this, options);\n              $this.data(name, data);\n            }\n\n            // Call methods\n            if (typeof method === 'string') {\n              if ($.isFunction(data[method])) {\n                var methodVal = data[method].apply(data, args);\n                if (methodVal !== undefined) {\n                  val.push(methodVal);\n                }\n              } else {\n                $.error('No such method \"' + method + '\" for ' + classname);\n              }\n            }\n          });\n\n          return val.length === 0 || val.length === 1 ? val.length === 0 ? this : val[0] : val;\n        };\n\n        $.fn[pluginname].options = {};\n\n        return this;\n      },\n      autoload: function autoload(pluginname) {\n        var arr = pluginname.split(',');\n        var len = arr.length;\n\n        for (var i = 0; i < len; i++) {\n          var name = arr[i].toLowerCase().split(',').map(function (s) {\n            return lib_prefix + s.trim();\n          }).join(',');\n          this.autoloadQueue.push(name);\n        }\n\n        return this;\n      },\n      autoloadQueue: [],\n      startAutoload: function startAutoload() {\n        if (!window.MutationObserver || this.autoloadQueue.length === 0) {\n          return;\n        }\n\n        var self = this;\n        var observer = new MutationObserver(function (mutations) {\n          mutations.forEach(function (mutation) {\n            var newNodes = mutation.addedNodes;\n            if (newNodes.length === 0 || newNodes.length === 1 && newNodes.nodeType === 3) {\n              return;\n            }\n\n            self.startAutoloadOnce();\n          });\n        });\n\n        // pass in the target node, as well as the observer options\n        observer.observe(document, {\n          subtree: true,\n          childList: true\n        });\n      },\n\n      startAutoloadOnce: function startAutoloadOnce() {\n        var self = this;\n        var $nodes = $('[data-colibri-component]').not('[data-loaded]').not('[data-disabled]');\n        $nodes.each(function () {\n          var $el = $(this);\n          var pluginname = lib_prefix + $el.data('colibri-component');\n\n          if (self.autoloadQueue.indexOf(pluginname) !== -1) {\n            $el.attr('data-loaded', true);\n            try {\n              $el[pluginname]();\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        });\n      },\n      watch: function watch() {\n        Colibri.Plugin.startAutoloadOnce();\n        Colibri.Plugin.startAutoload();\n      }\n    };\n\n    $(window).on('load', function () {\n      Colibri.Plugin.watch();\n    });\n  })(_Colibri);\n\n  (function (Colibri) {\n    Colibri.Animation = function (element, effect, callback) {\n      this.namespace = 'animation';\n      this.defaults = {};\n\n      // Parent Constructor\n      Colibri.apply(this, arguments);\n\n      // Initialization\n      this.effect = effect;\n      this.completeCallback = typeof callback === 'undefined' ? false : callback;\n      this.prefixes = ['', '-moz-', '-o-animation-', '-webkit-'];\n      this.queue = [];\n\n      this.start();\n    };\n\n    Colibri.Animation.prototype = {\n      start: function start() {\n        if (this.isSlideEffect()) {\n          this.setElementHeight();\n        }\n\n        this.addToQueue();\n        this.clean();\n        this.animate();\n      },\n      addToQueue: function addToQueue() {\n        this.queue.push(this.effect);\n      },\n      setElementHeight: function setElementHeight() {\n        this.$element.height(this.$element.outerHeight());\n      },\n      removeElementHeight: function removeElementHeight() {\n        this.$element.css('height', '');\n      },\n      isSlideEffect: function isSlideEffect() {\n        return this.effect === 'slideDown' || this.effect === 'slideUp';\n      },\n      isHideableEffect: function isHideableEffect() {\n        var effects = ['fadeOut', 'slideUp', 'flipOut', 'zoomOut', 'slideOutUp', 'slideOutRight', 'slideOutLeft'];\n\n        return $.inArray(this.effect, effects) !== -1;\n      },\n      isToggleEffect: function isToggleEffect() {\n        return this.effect === 'show' || this.effect === 'hide';\n      },\n      storeHideClasses: function storeHideClasses() {\n        if (this.$element.hasClass('hide-sm')) {\n          this.$element.data('hide-sm-class', true);\n        } else if (this.$element.hasClass('hide-md')) {\n          this.$element.data('hide-md-class', true);\n        }\n      },\n      revertHideClasses: function revertHideClasses() {\n        if (this.$element.data('hide-sm-class')) {\n          this.$element.addClass('hide-sm').removeData('hide-sm-class');\n        } else if (this.$element.data('hide-md-class')) {\n          this.$element.addClass('hide-md').removeData('hide-md-class');\n        } else {\n          this.$element.addClass('hide');\n        }\n      },\n      removeHideClass: function removeHideClass() {\n        if (this.$element.data('hide-sm-class')) {\n          this.$element.removeClass('hide-sm');\n        } else {\n          if (this.$element.data('hide-md-class')) {\n            this.$element.removeClass('hide-md');\n          } else {\n            this.$element.removeClass('hide');\n            this.$element.removeClass('force-hide');\n          }\n        }\n      },\n      animate: function animate() {\n        this.storeHideClasses();\n        if (this.isToggleEffect()) {\n          return this.makeSimpleEffects();\n        }\n\n        this.$element.addClass('colibri-animated');\n        this.$element.addClass(this.queue[0]);\n        this.removeHideClass();\n\n        var _callback = this.queue.length > 1 ? null : this.completeCallback;\n        this.complete('AnimationEnd', $.proxy(this.makeComplete, this), _callback);\n      },\n      makeSimpleEffects: function makeSimpleEffects() {\n        if (this.effect === 'show') {\n          this.removeHideClass();\n        } else if (this.effect === 'hide') {\n          this.revertHideClasses();\n        }\n\n        if (typeof this.completeCallback === 'function') {\n          this.completeCallback(this);\n        }\n      },\n      makeComplete: function makeComplete() {\n        if (this.$element.hasClass(this.queue[0])) {\n          this.clean();\n          this.queue.shift();\n\n          if (this.queue.length) {\n            this.animate();\n          }\n        }\n      },\n      complete: function complete(type, make, callback) {\n        var events = type.split(' ').map(function (type) {\n          return type.toLowerCase() + ' webkit' + type + ' o' + type + ' MS' + type;\n        });\n\n        this.$element.one(events.join(' '), $.proxy(function () {\n          if (typeof make === 'function') {\n            make();\n          }\n          if (this.isHideableEffect()) {\n            this.revertHideClasses();\n          }\n          if (this.isSlideEffect()) {\n            this.removeElementHeight();\n          }\n          if (typeof callback === 'function') {\n            callback(this);\n          }\n\n          this.$element.off(event);\n        }, this));\n      },\n      clean: function clean() {\n        this.$element.removeClass('colibri-animated').removeClass(this.queue[0]);\n      }\n    };\n\n    // Inheritance\n    Colibri.Animation.inherits(Colibri);\n  })(_Colibri);\n\n  (function ($) {\n    var animationName = lib_prefix + 'animation';\n    $.fn[animationName] = function (effect, callback) {\n      var name = 'fn.animation';\n\n      return this.each(function () {\n        var $this = $(this),\n            data = $this.data(name);\n\n        $this.data(name, {});\n        $this.data(name, data = new _Colibri.Animation(this, effect, callback));\n      });\n    };\n\n    $.fn[animationName].options = {};\n\n    _Colibri.animate = function ($target, effect, callback) {\n      $target[animationName](effect, callback);\n      return $target;\n    };\n  })(jQuery);\n\n  (function (Colibri) {\n    Colibri.Detect = function () {};\n\n    Colibri.Detect.prototype = {\n      isMobile: function isMobile() {\n        return (/(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent)\n        );\n      },\n      isDesktop: function isDesktop() {\n        return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent);\n      },\n      isMobileScreen: function isMobileScreen() {\n        return $(window).width() <= 768;\n      },\n      isTabletScreen: function isTabletScreen() {\n        return $(window).width() >= 768 && $(window).width() <= 1024;\n      },\n      isDesktopScreen: function isDesktopScreen() {\n        return $(window).width() > 1024;\n      }\n    };\n  })(_Colibri);\n\n  (function (Colibri) {\n    Colibri.Utils = function () {};\n\n    Colibri.Utils.prototype = {\n      disableBodyScroll: function disableBodyScroll() {\n        var $body = $('html');\n        var windowWidth = window.innerWidth;\n\n        if (!windowWidth) {\n          var documentElementRect = document.documentElement.getBoundingClientRect();\n          windowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n        }\n\n        var isOverflowing = document.body.clientWidth < windowWidth;\n        var scrollbarWidth = this.measureScrollbar();\n\n        $body.css('overflow', 'hidden');\n        if (isOverflowing) {\n          $body.css('padding-right', scrollbarWidth);\n        }\n      },\n      measureScrollbar: function measureScrollbar() {\n        var $body = $('body');\n        var scrollDiv = document.createElement('div');\n        scrollDiv.className = 'scrollbar-measure';\n\n        $body.append(scrollDiv);\n        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        $body[0].removeChild(scrollDiv);\n        return scrollbarWidth;\n      },\n      enableBodyScroll: function enableBodyScroll() {\n        $('html').css({ 'overflow': '', 'padding-right': '' });\n      }\n    };\n  })(_Colibri);\n\n  return _Colibri;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n\n}( window, function factory() {\n  'use strict';\n\n  var matchesMethod = ( function() {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if ( ElemProto.matches ) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if ( ElemProto.matchesSelector ) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];\n\n    for ( var i=0; i < prefixes.length; i++ ) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if ( ElemProto[ method ] ) {\n        return method;\n      }\n    }\n  })();\n\n  return function matchesSelector( elem, selector ) {\n    return elem[ matchesMethod ]( selector );\n  };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yLmpzPzk4ZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBeUM7QUFDaEQ7QUFDQSxJQUFJLG9DQUFRLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQSxvR0FBRTtBQUNyQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIG1hdGNoZXNTZWxlY3RvciB2Mi4wLjJcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXMgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xuICAgIH1cbiAgICAvLyBjaGVjayB1bi1wcmVmaXhlZFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xuXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xuICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgfVxuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xuICB9O1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n( function( window, factory ) {\n  /* jshint strict: false */ /* globals define, module */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See https://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * Chrome & Safari measure the outer-width on style.width on border-box elems\n   * IE11 & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n  // round value for browser zoom. desandro/masonry#928\n  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;\n  getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n  body.removeChild( div );\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanM/NDlkMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sSUFBeUM7QUFDaEQ7QUFDQSxJQUFJLG9DQUFRLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQSxvR0FBRTtBQUNyQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdCQUF3QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGdldFNpemUgdjIuMC4zXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLyogZ2xvYmFscyBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cFxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXG4gKiBkbyBvbiBmaXJzdCBnZXRTaXplKCkgcmF0aGVyIHRoYW4gb24gcGFnZSBsb2FkIGZvciBGaXJlZm94IGJ1Z1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJveCBzaXppbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvKipcbiAgICogQ2hyb21lICYgU2FmYXJpIG1lYXN1cmUgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXG4gICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZGl2ICk7XG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xuICBnZXRTaXplLmlzQm94U2l6ZU91dGVyID0gaXNCb3hTaXplT3V0ZXI7XG5cbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__colibri_kube_component__ = __webpack_require__(100);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_1__colibri_kube_component__[\"a\"]; });\n\n\n\n__WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.registerPlugin = function (name, plugin, autoload) {\n  if (typeof name.componentName === 'function') {\n    autoload = plugin;\n    plugin = name;\n    name = plugin.componentName();\n  }\n\n  __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a[name] = plugin;\n  // Colibri[name].inherits(Colibri);\n  __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Plugin.create(name);\n\n  if (autoload !== false) {\n    __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Plugin.autoload(name);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvaW5kZXguanM/ZTEyMiJdLCJuYW1lcyI6WyJDb2xpYnJpIiwicmVnaXN0ZXJQbHVnaW4iLCJuYW1lIiwicGx1Z2luIiwiYXV0b2xvYWQiLCJjb21wb25lbnROYW1lIiwiUGx1Z2luIiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFFQUEsaUVBQU9BLENBQUNDLGNBQVIsR0FBeUIsVUFBU0MsSUFBVCxFQUFlQyxNQUFmLEVBQXVCQyxRQUF2QixFQUFpQztBQUN4RCxNQUFJLE9BQU9GLEtBQUtHLGFBQVosS0FBOEIsVUFBbEMsRUFBOEM7QUFDNUNELGVBQVdELE1BQVg7QUFDQUEsYUFBU0QsSUFBVDtBQUNBQSxXQUFPQyxPQUFPRSxhQUFQLEVBQVA7QUFDRDs7QUFFREwsbUVBQU9BLENBQUNFLElBQVIsSUFBZ0JDLE1BQWhCO0FBQ0E7QUFDQUgsbUVBQU9BLENBQUNNLE1BQVIsQ0FBZUMsTUFBZixDQUFzQkwsSUFBdEI7O0FBRUEsTUFBSUUsYUFBYSxLQUFqQixFQUF3QjtBQUN0QkoscUVBQU9BLENBQUNNLE1BQVIsQ0FBZUYsUUFBZixDQUF3QkYsSUFBeEI7QUFDRDtBQUNGLENBZEQiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29saWJyaSBmcm9tICdAcm9vdC9zdGF0aWMtZnJlZS9jb2xpYnJpJztcbmltcG9ydCBDb2xpYnJpRnJvbnRDb21wb25lbnQgZnJvbSAnLi9jb2xpYnJpLWt1YmUtY29tcG9uZW50JztcblxuQ29saWJyaS5yZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uKG5hbWUsIHBsdWdpbiwgYXV0b2xvYWQpIHtcbiAgaWYgKHR5cGVvZiBuYW1lLmNvbXBvbmVudE5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhdXRvbG9hZCA9IHBsdWdpbjtcbiAgICBwbHVnaW4gPSBuYW1lO1xuICAgIG5hbWUgPSBwbHVnaW4uY29tcG9uZW50TmFtZSgpO1xuICB9XG5cbiAgQ29saWJyaVtuYW1lXSA9IHBsdWdpbjtcbiAgLy8gQ29saWJyaVtuYW1lXS5pbmhlcml0cyhDb2xpYnJpKTtcbiAgQ29saWJyaS5QbHVnaW4uY3JlYXRlKG5hbWUpO1xuXG4gIGlmIChhdXRvbG9hZCAhPT0gZmFsc2UpIHtcbiAgICBDb2xpYnJpLlBsdWdpbi5hdXRvbG9hZChuYW1lKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgQ29saWJyaSBhcyBDb2xpYnJpRnJvbnRlbmQsIENvbGlicmlGcm9udENvbXBvbmVudCB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbGlicmktZWRpdG9yL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9iYXNlL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BaseHandler = function () {\n  function BaseHandler(element, settings) {\n    _classCallCheck(this, BaseHandler);\n\n    this.settings = settings;\n    this.element = element;\n    this.isPlaying = false;\n\n    this.ready();\n  }\n\n  _createClass(BaseHandler, [{\n    key: 'ready',\n    value: function ready() {}\n  }, {\n    key: 'play',\n    value: function play() {}\n  }, {\n    key: 'pause',\n    value: function pause() {}\n  }, {\n    key: 'isPaused',\n    value: function isPaused() {}\n  }, {\n    key: 'setVideo',\n    value: function setVideo(node) {\n      node.className = 'colibri-video-background-item';\n      this.element.innerHTML = '';\n      this.element.appendChild(node);\n      this.addResizeBind();\n    }\n  }, {\n    key: 'trigger',\n    value: function trigger(name) {\n      var evt;\n\n      if ('function' === typeof window.Event) {\n        evt = new Event(name);\n      } else {\n        evt = document.createEvent('Event');\n        evt.initEvent(name, true, true);\n      }\n\n      this.element.dispatchEvent(evt);\n    }\n  }, {\n    key: 'loaded',\n    value: function loaded() {\n      this.trigger('video-bg-loaded');\n    }\n  }, {\n    key: 'addResizeBind',\n    value: function addResizeBind() {\n      var _this = this;\n\n      this.trigger('video-bg-resize');\n      this.onResize(function () {\n        _this.trigger('video-bg-resize');\n      });\n    }\n  }, {\n    key: 'onLoad',\n    value: function onLoad(callback) {\n      jQuery(this.element).on('video-bg-loaded', callback);\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize(callback) {\n      var debounce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\n      callback = jQuery.debounce(callback, debounce);\n      jQuery(window).resize(callback);\n      jQuery(window).on('orientationchange', callback);\n    }\n  }], [{\n    key: 'test',\n    value: function test() {\n      return false;\n    }\n  }]);\n\n  return BaseHandler;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (BaseHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvYmFzZS1oYW5kbGVyLmpzP2IxZWQiXSwibmFtZXMiOlsiQmFzZUhhbmRsZXIiLCJlbGVtZW50Iiwic2V0dGluZ3MiLCJpc1BsYXlpbmciLCJyZWFkeSIsIm5vZGUiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImFkZFJlc2l6ZUJpbmQiLCJuYW1lIiwiZXZ0Iiwid2luZG93IiwiRXZlbnQiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXIiLCJvblJlc2l6ZSIsImNhbGxiYWNrIiwialF1ZXJ5Iiwib24iLCJkZWJvdW5jZSIsInJlc2l6ZSJdLCJtYXBwaW5ncyI6Ijs7OztJQUFxQkEsVztBQUNuQix1QkFBWUMsT0FBWixFQUFxQkMsUUFBckIsRUFBK0I7QUFBQTs7QUFDN0IsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLEtBQWpCOztBQUVBLFNBQUtDLEtBQUw7QUFDRDs7Ozs0QkFFTyxDQUFFOzs7MkJBRUgsQ0FBRTs7OzRCQUVELENBQUU7OzsrQkFFQyxDQUFFOzs7NkJBRUpDLEksRUFBTTtBQUNiQSxXQUFLQyxTQUFMLEdBQWlCLCtCQUFqQjtBQUNBLFdBQUtMLE9BQUwsQ0FBYU0sU0FBYixHQUF5QixFQUF6QjtBQUNBLFdBQUtOLE9BQUwsQ0FBYU8sV0FBYixDQUF5QkgsSUFBekI7QUFDQSxXQUFLSSxhQUFMO0FBQ0Q7Ozs0QkFNT0MsSSxFQUFNO0FBQ1osVUFBSUMsR0FBSjs7QUFFQSxVQUFJLGVBQWUsT0FBT0MsT0FBT0MsS0FBakMsRUFBd0M7QUFDdENGLGNBQU0sSUFBSUUsS0FBSixDQUFVSCxJQUFWLENBQU47QUFDRCxPQUZELE1BRU87QUFDTEMsY0FBTUcsU0FBU0MsV0FBVCxDQUFxQixPQUFyQixDQUFOO0FBQ0FKLFlBQUlLLFNBQUosQ0FBY04sSUFBZCxFQUFvQixJQUFwQixFQUEwQixJQUExQjtBQUNEOztBQUVELFdBQUtULE9BQUwsQ0FBYWdCLGFBQWIsQ0FBMkJOLEdBQTNCO0FBQ0Q7Ozs2QkFFUTtBQUNQLFdBQUtPLE9BQUwsQ0FBYSxpQkFBYjtBQUNEOzs7b0NBRWU7QUFBQTs7QUFDZCxXQUFLQSxPQUFMLENBQWEsaUJBQWI7QUFDQSxXQUFLQyxRQUFMLENBQWMsWUFBTTtBQUNsQixjQUFLRCxPQUFMLENBQWEsaUJBQWI7QUFDRCxPQUZEO0FBR0Q7OzsyQkFFTUUsUSxFQUFVO0FBQ2ZDLGFBQU8sS0FBS3BCLE9BQVosRUFBcUJxQixFQUFyQixDQUF3QixpQkFBeEIsRUFBMkNGLFFBQTNDO0FBQ0Q7Ozs2QkFFUUEsUSxFQUEwQjtBQUFBLFVBQWhCRyxRQUFnQix1RUFBTCxHQUFLOztBQUNqQ0gsaUJBQVdDLE9BQU9FLFFBQVAsQ0FBZ0JILFFBQWhCLEVBQTBCRyxRQUExQixDQUFYO0FBQ0FGLGFBQU9ULE1BQVAsRUFBZVksTUFBZixDQUFzQkosUUFBdEI7QUFDQUMsYUFBT1QsTUFBUCxFQUFlVSxFQUFmLENBQWtCLG1CQUFsQixFQUF1Q0YsUUFBdkM7QUFDRDs7OzJCQXBDYTtBQUNaLGFBQU8sS0FBUDtBQUNEOzs7Ozs7QUExQmtCcEIsb0UiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHNldHRpbmdzKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIHRoaXMucmVhZHkoKTtcbiAgfVxuXG4gIHJlYWR5KCkge31cblxuICBwbGF5KCkge31cblxuICBwYXVzZSgpIHt9XG5cbiAgaXNQYXVzZWQoKSB7fVxuXG4gIHNldFZpZGVvKG5vZGUpIHtcbiAgICBub2RlLmNsYXNzTmFtZSA9ICdjb2xpYnJpLXZpZGVvLWJhY2tncm91bmQtaXRlbSc7XG4gICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB0aGlzLmFkZFJlc2l6ZUJpbmQoKTtcbiAgfVxuXG4gIHN0YXRpYyB0ZXN0KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRyaWdnZXIobmFtZSkge1xuICAgIHZhciBldnQ7XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHdpbmRvdy5FdmVudCkge1xuICAgICAgZXZ0ID0gbmV3IEV2ZW50KG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGxvYWRlZCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3ZpZGVvLWJnLWxvYWRlZCcpO1xuICB9XG5cbiAgYWRkUmVzaXplQmluZCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3ZpZGVvLWJnLXJlc2l6ZScpO1xuICAgIHRoaXMub25SZXNpemUoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKCd2aWRlby1iZy1yZXNpemUnKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uTG9hZChjYWxsYmFjaykge1xuICAgIGpRdWVyeSh0aGlzLmVsZW1lbnQpLm9uKCd2aWRlby1iZy1sb2FkZWQnLCBjYWxsYmFjayk7XG4gIH1cblxuICBvblJlc2l6ZShjYWxsYmFjaywgZGVib3VuY2UgPSAxMDApIHtcbiAgICBjYWxsYmFjayA9IGpRdWVyeS5kZWJvdW5jZShjYWxsYmFjaywgZGVib3VuY2UpO1xuICAgIGpRdWVyeSh3aW5kb3cpLnJlc2l6ZShjYWxsYmFjayk7XG4gICAgalF1ZXJ5KHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlJywgY2FsbGJhY2spO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvYmFzZS1oYW5kbGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'offcanvas';\n\n  var Component = function Component(element, options) {\n    this.namespace = 'offcanvas';\n    this.defaults = {\n      target: null, // selector\n      push: true, // boolean\n      width: '250px', // string\n      direction: 'left', // string: left or right\n      toggleEvent: 'click',\n      clickOutside: true, // boolean\n      animationOpen: 'slideInLeft',\n      animationClose: 'slideOutLeft',\n      callbacks: ['open', 'opened', 'close', 'closed'],\n      offcanvasOverlayId: null,\n      $overlayElement: null,\n      targetId: null\n    };\n\n    console.log('offcanvas script');\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Services\n    this.utils = new Colibri.Utils();\n    this.detect = new Colibri.Detect();\n\n    // Initialization\n    this.start();\n  };\n\n  // Functionality\n  Component.prototype = {\n    start: function start() {\n      if (!this.hasTarget()) {\n        return;\n      }\n      var overlayId = this.opts.offcanvasOverlayId;\n      var $overlayElement = $('#' + overlayId + '.offscreen-overlay');\n      this.opts.$overlayElement = $overlayElement;\n\n      // this.stop();\n\n      this.buildTargetWidth();\n      this.buildAnimationDirection();\n\n      this.$close = this.getCloseLink();\n      this.$element.on(this.opts.toggleEvent + '.' + this.namespace, $.proxy(this.toggle, this));\n      this.$target.addClass('offcanvas');\n      this.$target.trigger('colibri.offcanvas.ready');\n\n      this.moveOffcanvasToBody();\n\n      this.addOffcanvasOverlayLogic();\n    },\n    stop: function stop() {\n      this.closeAll();\n      this.removeOffcanvasElements();\n      this.$element.off('.' + this.namespace);\n      if (this.$close) {\n        this.$close.off('.' + this.namespace);\n      }\n      $(document).off('.' + this.namespace);\n    },\n    removeOffcanvasElements: function removeOffcanvasElements() {\n      // var targetId = this.opts.targetId;\n      // var $targetElement = $('#' + targetId + '.h-offcanvas-panel');\n\n      this.$target.remove();\n      this.opts.$overlayElement.remove();\n\n      // if ($targetElement && $targetElement.length > 0) {\n      //   for (var i = 0; i < $targetElement.length; i++) {\n      //     var offcanvasPanel = $targetElement[i];\n      //     var offcanvasPanelParent = offcanvasPanel.parentNode;\n      //     if (offcanvasPanelParent && offcanvasPanelParent.tagName === 'BODY') {\n      //       offcanvasPanelParent.removeChild(offcanvasPanel);\n      //     }\n      //   }\n      // }\n      //\n      // var overlayElements = this.opts.$overlayElement;\n      // if (overlayElements && overlayElements.length > 0) {\n      //   for (var j = 0; j < overlayElements.length; j++) {\n      //     var overlayElement = overlayElements[j];\n      //     var overlayElementParent = overlayElement.parentNode;\n      //     if (overlayElementParent && overlayElementParent.tagName === 'BODY') {\n      //       overlayElementParent.removeChild(overlayElement);\n      //     }\n      //   }\n      // }\n    },\n    moveOffcanvasToBody: function moveOffcanvasToBody() {\n      var offcanvasPanel = this.$target[0];\n      document.body.appendChild(offcanvasPanel);\n\n      var overlayElement = this.opts.$overlayElement[0];\n      document.body.appendChild(overlayElement);\n    },\n    addOffcanvasOverlayLogic: function addOffcanvasOverlayLogic() {\n      var $overlayElement = this.opts.$overlayElement;\n      var $offCanvasWrapper = this.$target;\n\n      if ($offCanvasWrapper.length) {\n        $overlayElement.on('scroll touchmove mousewheel', function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        });\n\n        $offCanvasWrapper.on('colibri.offcanvas.open', function () {\n          $overlayElement.addClass('h-offcanvas-opened');\n        });\n\n        $offCanvasWrapper.on('colibri.offcanvas.close', function () {\n          $overlayElement.removeClass('h-offcanvas-opened');\n        });\n      }\n    },\n    toggle: function toggle(e) {\n      if (this.isOpened()) {\n        this.close(e);\n      } else {\n        this.open(e);\n      }\n    },\n    buildTargetWidth: function buildTargetWidth() {\n      this.opts.width = $(window).width() < parseInt(this.opts.width) ? '100%' : this.opts.width;\n    },\n    buildAnimationDirection: function buildAnimationDirection() {\n      if (this.opts.direction === 'right') {\n        this.opts.animationOpen = 'slideInRight';\n        this.opts.animationClose = 'slideOutRight';\n      }\n    },\n    getCloseLink: function getCloseLink() {\n      return this.$target.find('.close');\n    },\n    open: function open(e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      if (!this.isOpened()) {\n        this.closeAll();\n        this.callback('open');\n\n        this.$target.addClass('offcanvas-' + this.opts.direction);\n        this.$target.css('width', Math.min(parseInt(this.opts.width), window.innerWidth - 100));\n        this.$target.css('right', '-' + Math.min(parseInt(this.opts.width), window.innerWidth - 100));\n\n        this.pushBody();\n\n        this.$target.trigger('colibri.offcanvas.open');\n        // this.$target.animation(this.opts.animationOpen, $.proxy(this.onOpened, this));\n        Colibri.animate(this.$target, this.opts.animationOpen, $.proxy(this.onOpened, this));\n        this.$element.trigger('colibri.offcanvas.open');\n      }\n    },\n    closeAll: function closeAll() {\n      var $elms = $(document).find('.offcanvas');\n      if ($elms.length !== 0) {\n        $elms.each(function () {\n          var $el = $(this);\n\n          if ($el.hasClass('open')) {\n            $el.css('width', '');\n            //.animation('hide');\n            Colibri.animate($el, 'hide');\n            $el.removeClass('open offcanvas-left offcanvas-right');\n          }\n        });\n\n        $(document).off('.' + this.namespace);\n        $('body').css('left', '');\n      }\n    },\n    close: function close(e) {\n      if (e) {\n        var $el = $(e.target);\n        var isTag = $el[0].tagName === 'A' || $el[0].tagName === 'BUTTON' || $el.parents('a').length;\n        if (isTag && $el.closest('.offcanvas').length !== 0 && !$el.hasClass('close')) {\n          return;\n        }\n\n        e.preventDefault();\n      }\n\n      if (this.isOpened()) {\n        // this.utils.enableBodyScroll();\n        this.callback('close');\n        this.pullBody();\n        this.$target.trigger('colibri.offcanvas.close');\n        // this.$target.animation(this.opts.animationClose, $.proxy(this.onClosed, this));\n        Colibri.animate(this.$target, this.opts.animationClose, $.proxy(this.onClosed, this));\n      }\n    },\n    isOpened: function isOpened() {\n      return this.$target.hasClass('open');\n    },\n    onOpened: function onOpened() {\n      if (this.opts.clickOutside) {\n        $(document).on('click.' + this.namespace + ' tap.' + this.namespace, $.proxy(this.close, this));\n      }\n      if (this.detect.isMobileScreen()) {\n        $('html').addClass('no-scroll');\n      }\n\n      $(document).on('keyup.' + this.namespace, $.proxy(this.handleKeyboard, this));\n      this.$close.on('click.' + this.namespace, $.proxy(this.close, this));\n\n      // this.utils.disableBodyScroll();\n      this.$target.addClass('open');\n      this.callback('opened');\n    },\n    onClosed: function onClosed() {\n      if (this.detect.isMobileScreen()) {\n        $('html').removeClass('no-scroll');\n      }\n\n      this.$target.css('width', '').removeClass('offcanvas-' + this.opts.direction);\n\n      this.$close.off('.' + this.namespace);\n      $(document).off('.' + this.namespace);\n\n      this.$target.removeClass('open');\n      this.callback('closed');\n\n      this.$target.trigger('colibri.offcanvas.closed');\n    },\n    handleKeyboard: function handleKeyboard(e) {\n      if (e.which === 27) {\n        this.close();\n      }\n    },\n    pullBody: function pullBody() {\n      if (this.opts.push) {\n        $('body').animate({ left: 0 }, 350, function () {\n          $(this).removeClass('offcanvas-push-body');\n        });\n      }\n    },\n    pushBody: function pushBody() {\n      if (this.opts.push) {\n        var properties = this.opts.direction === 'left' ? { left: this.opts.width } : { left: '-' + this.opts.width };\n        $('body').addClass('offcanvas-push-body').animate(properties, 200);\n      }\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(92);
__webpack_require__(117);
__webpack_require__(118);
module.exports = __webpack_require__(119);


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_libraries_jquery_extensions__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__common_libraries_detect_element_resize__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__root_static_free_masonryColibri__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__root_static_free_masonryColibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__root_static_free_masonryColibri__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__page_components_common_scripts_base___ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__kube_slideshow_customizable_slideshow__ = __webpack_require__(101);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__kube_video_background_customizable_video_background__ = __webpack_require__(104);\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_3__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].registerPlugin(__WEBPACK_IMPORTED_MODULE_4__kube_slideshow_customizable_slideshow__[\"a\" /* default */]);\n__WEBPACK_IMPORTED_MODULE_3__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].registerPlugin(__WEBPACK_IMPORTED_MODULE_5__kube_video_background_customizable_video_background__[\"a\" /* default */]);\n\n__WEBPACK_IMPORTED_MODULE_3__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */].getData = function (id) {\n    if (window.colibriFrontendData && window.colibriFrontendData[id]) {\n        return window.colibriFrontendData[id];\n    }\n\n    return {};\n};\n\nwindow.Colibri = __WEBPACK_IMPORTED_MODULE_3__page_components_common_scripts_base___[\"b\" /* ColibriFrontend */];\n\n__webpack_require__(110);\n__webpack_require__(111);\n__webpack_require__(64);\n\n//\n// // sticky\n//\n__webpack_require__(112);\n__webpack_require__(113);\n__webpack_require__(114);\n__webpack_require__(115);\n__webpack_require__(116);\n__webpack_require__(64);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL3RoZW1lLmpzP2U4NzAiXSwibmFtZXMiOlsiQ29saWJyaUZyb250ZW5kIiwicmVnaXN0ZXJQbHVnaW4iLCJDdXN0b21pemFibGVTbGlkZXNob3ciLCJDdXN0b21pemFibGVWaWRlb0JhY2tncm91bmQiLCJnZXREYXRhIiwiaWQiLCJ3aW5kb3ciLCJjb2xpYnJpRnJvbnRlbmREYXRhIiwiQ29saWJyaSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7O0FBR0E7QUFDQTtBQUNBOztBQUVBQSw4RkFBZUEsQ0FBQ0MsY0FBaEIsQ0FBK0JDLHVGQUEvQjtBQUNBRiw4RkFBZUEsQ0FBQ0MsY0FBaEIsQ0FBK0JFLHFHQUEvQjs7QUFFQUgsOEZBQWVBLENBQUNJLE9BQWhCLEdBQTBCLFVBQVVDLEVBQVYsRUFBYztBQUNwQyxRQUFJQyxPQUFPQyxtQkFBUCxJQUE4QkQsT0FBT0MsbUJBQVAsQ0FBMkJGLEVBQTNCLENBQWxDLEVBQWtFO0FBQzlELGVBQU9DLE9BQU9DLG1CQUFQLENBQTJCRixFQUEzQixDQUFQO0FBQ0g7O0FBRUQsV0FBTyxFQUFQO0FBQ0gsQ0FORDs7QUFTQUMsT0FBT0UsT0FBUCxHQUFpQlIsOEZBQWpCOztBQUdBUyxtQkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEdBQVI7QUFDQUEsbUJBQU9BLENBQUMsRUFBUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQUEsbUJBQU9BLENBQUMsR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEdBQVI7QUFDQUEsbUJBQU9BLENBQUMsR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEVBQVIiLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJAL2NvbW1vbi9saWJyYXJpZXMvanF1ZXJ5LWV4dGVuc2lvbnNcIjtcclxuaW1wb3J0IFwiQC9jb21tb24vbGlicmFyaWVzL2RldGVjdC1lbGVtZW50LXJlc2l6ZVwiO1xyXG5cclxuaW1wb3J0IFwiQHJvb3Qvc3RhdGljLWZyZWUvbWFzb25yeUNvbGlicmlcIjtcclxuXHJcblxyXG5pbXBvcnQge0NvbGlicmlGcm9udGVuZH0gZnJvbSBcIkAvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvXCI7XHJcbmltcG9ydCBDdXN0b21pemFibGVTbGlkZXNob3cgZnJvbSBcIi4va3ViZS9zbGlkZXNob3cvY3VzdG9taXphYmxlLXNsaWRlc2hvd1wiO1xyXG5pbXBvcnQgQ3VzdG9taXphYmxlVmlkZW9CYWNrZ3JvdW5kIGZyb20gXCIuL2t1YmUvdmlkZW8tYmFja2dyb3VuZC9jdXN0b21pemFibGUtdmlkZW8tYmFja2dyb3VuZFwiO1xyXG5cclxuQ29saWJyaUZyb250ZW5kLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbWl6YWJsZVNsaWRlc2hvdyk7XHJcbkNvbGlicmlGcm9udGVuZC5yZWdpc3RlclBsdWdpbihDdXN0b21pemFibGVWaWRlb0JhY2tncm91bmQpO1xyXG5cclxuQ29saWJyaUZyb250ZW5kLmdldERhdGEgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgIGlmICh3aW5kb3cuY29saWJyaUZyb250ZW5kRGF0YSAmJiB3aW5kb3cuY29saWJyaUZyb250ZW5kRGF0YVtpZF0pIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LmNvbGlicmlGcm9udGVuZERhdGFbaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7fTtcclxufTtcclxuXHJcblxyXG53aW5kb3cuQ29saWJyaSA9IENvbGlicmlGcm9udGVuZDtcclxuXHJcblxyXG5yZXF1aXJlKFwiQC9jb21tb24vbGlicmFyaWVzL21lc21lcml6ZS1zbW9vdGhzY3JvbGxcIik7XHJcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9tZW51L3NjcmlwdHMvZHJvcGRvd24tbWVudVwiKTtcclxucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL21lbnUvc2NyaXB0cy9vZmZjYW52YXNcIik7XHJcblxyXG4vL1xyXG4vLyAvLyBzdGlja3lcclxuLy9cclxucmVxdWlyZShcIkAvcGFnZS1jb21wb25lbnRzL25hdmlnYXRpb24vc2NyaXB0cy9uYXZpZ2F0aW9uXCIpO1xyXG5yZXF1aXJlKFwiQC9wYWdlLWNvbXBvbmVudHMvbmF2aWdhdGlvbi9zY3JpcHRzL2ZpeHRvXCIpO1xyXG5yZXF1aXJlKFwiQC9wYWdlLWNvbXBvbmVudHMvbmF2aWdhdGlvbi9zY3JpcHRzL292ZXJsYXBcIik7XHJcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9tYXNvbnJ5LmpzXCIpO1xyXG5yZXF1aXJlKFwiQC9wYWdlLWNvbXBvbmVudHMvZm9vdGVyL3NjcmlwdHMvZm9vdGVyLXBhcmFsYXguanNcIik7XHJcbnJlcXVpcmUoXCJAL3BhZ2UtY29tcG9uZW50cy9tZW51L3NjcmlwdHMvb2ZmY2FudmFzLmpzXCIpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvanMvdGhlbWUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92\n");

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_debounce__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_debounce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_debounce__);\n\n(function ($) {\n  if (!$.throttle) {\n    $.throttle = function (fn, threshhold, scope) {\n      threshhold || (threshhold = 250);\n      var last, deferTimer;\n      return function () {\n        var context = scope || this;\n\n        var now = +new Date(),\n            args = arguments;\n        if (last && now < last + threshhold) {\n          // hold on to it\n          clearTimeout(deferTimer);\n          deferTimer = setTimeout(function () {\n            last = now;\n            fn.apply(context, args);\n          }, threshhold);\n        } else {\n          last = now;\n          fn.apply(context, args);\n        }\n      };\n    };\n  }\n\n  if (!$.debounce) {\n    $.debounce = __WEBPACK_IMPORTED_MODULE_0_lodash_debounce___default.a;\n    // $.debounce = function(func, wait, immediate) {\n    //   var timeout;\n    //   return function() {\n    //     var context = this,\n    //       args = arguments;\n    //     var later = function() {\n    //       timeout = null;\n    //       if (!immediate) {\n    //         func.apply(context, args);\n    //       }\n    //     };\n    //     var callNow = immediate && !timeout;\n    //     clearTimeout(timeout);\n    //     timeout = setTimeout(later, wait);\n    //     if (callNow) {\n    //       func.apply(context, args);\n    //     }\n    //   };\n    // };\n  }\n  if (!$.event.special.tap) {\n    $.event.special.tap = {\n      setup: function setup(data, namespaces) {\n        var $elem = $(this);\n        $elem.bind('touchstart', $.event.special.tap.handler).bind('touchmove', $.event.special.tap.handler).bind('touchend', $.event.special.tap.handler);\n      },\n      teardown: function teardown(namespaces) {\n        var $elem = $(this);\n        $elem.unbind('touchstart', $.event.special.tap.handler).unbind('touchmove', $.event.special.tap.handler).unbind('touchend', $.event.special.tap.handler);\n      },\n      handler: function handler(event) {\n        var $elem = $(this);\n        $elem.data(event.type, 1);\n        if (event.type === 'touchend' && !$elem.data('touchmove')) {\n          event.type = 'tap';\n          $.event.handle.apply(this, arguments);\n        } else if ($elem.data('touchend')) {\n          $elem.removeData('touchstart touchmove touchend');\n        }\n      }\n    };\n  }\n})(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9qcXVlcnktZXh0ZW5zaW9ucy5qcz9jMWQyIl0sIm5hbWVzIjpbIiQiLCJ0aHJvdHRsZSIsImZuIiwidGhyZXNoaG9sZCIsInNjb3BlIiwibGFzdCIsImRlZmVyVGltZXIiLCJjb250ZXh0Iiwibm93IiwiRGF0ZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJkZWJvdW5jZSIsImV2ZW50Iiwic3BlY2lhbCIsInRhcCIsInNldHVwIiwiZGF0YSIsIm5hbWVzcGFjZXMiLCIkZWxlbSIsImJpbmQiLCJoYW5kbGVyIiwidGVhcmRvd24iLCJ1bmJpbmQiLCJ0eXBlIiwiaGFuZGxlIiwicmVtb3ZlRGF0YSIsIndpbmRvdyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsQ0FBQyxVQUFTQSxDQUFULEVBQVk7QUFDWCxNQUFJLENBQUNBLEVBQUVDLFFBQVAsRUFBaUI7QUFDZkQsTUFBRUMsUUFBRixHQUFhLFVBQVNDLEVBQVQsRUFBYUMsVUFBYixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDM0NELHFCQUFlQSxhQUFhLEdBQTVCO0FBQ0EsVUFBSUUsSUFBSixFQUFVQyxVQUFWO0FBQ0EsYUFBTyxZQUFXO0FBQ2hCLFlBQUlDLFVBQVVILFNBQVMsSUFBdkI7O0FBRUEsWUFBSUksTUFBTSxDQUFDLElBQUlDLElBQUosRUFBWDtBQUFBLFlBQ0VDLE9BQU9DLFNBRFQ7QUFFQSxZQUFJTixRQUFRRyxNQUFNSCxPQUFPRixVQUF6QixFQUFxQztBQUNuQztBQUNBUyx1QkFBYU4sVUFBYjtBQUNBQSx1QkFBYU8sV0FBVyxZQUFXO0FBQ2pDUixtQkFBT0csR0FBUDtBQUNBTixlQUFHWSxLQUFILENBQVNQLE9BQVQsRUFBa0JHLElBQWxCO0FBQ0QsV0FIWSxFQUdWUCxVQUhVLENBQWI7QUFJRCxTQVBELE1BT087QUFDTEUsaUJBQU9HLEdBQVA7QUFDQU4sYUFBR1ksS0FBSCxDQUFTUCxPQUFULEVBQWtCRyxJQUFsQjtBQUNEO0FBQ0YsT0FoQkQ7QUFpQkQsS0FwQkQ7QUFxQkQ7O0FBRUQsTUFBSSxDQUFDVixFQUFFZSxRQUFQLEVBQWlCO0FBQ2ZmLE1BQUVlLFFBQUYsR0FBYUEsdURBQWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBQ0QsTUFBSSxDQUFDZixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFyQixFQUEwQjtBQUN4QmxCLE1BQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLEdBQXNCO0FBQ3BCQyxXQURvQixpQkFDZEMsSUFEYyxFQUNSQyxVQURRLEVBQ0k7QUFDdEIsWUFBSUMsUUFBUXRCLEVBQUUsSUFBRixDQUFaO0FBQ0FzQixjQUNHQyxJQURILENBQ1EsWUFEUixFQUNzQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUQxQyxFQUVHRCxJQUZILENBRVEsV0FGUixFQUVxQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUZ6QyxFQUdHRCxJQUhILENBR1EsVUFIUixFQUdvQnZCLEVBQUVnQixLQUFGLENBQVFDLE9BQVIsQ0FBZ0JDLEdBQWhCLENBQW9CTSxPQUh4QztBQUlELE9BUG1CO0FBU3BCQyxjQVRvQixvQkFTWEosVUFUVyxFQVNDO0FBQ25CLFlBQUlDLFFBQVF0QixFQUFFLElBQUYsQ0FBWjtBQUNBc0IsY0FDR0ksTUFESCxDQUNVLFlBRFYsRUFDd0IxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FENUMsRUFFR0UsTUFGSCxDQUVVLFdBRlYsRUFFdUIxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FGM0MsRUFHR0UsTUFISCxDQUdVLFVBSFYsRUFHc0IxQixFQUFFZ0IsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxHQUFoQixDQUFvQk0sT0FIMUM7QUFJRCxPQWZtQjtBQWlCcEJBLGFBakJvQixtQkFpQlpSLEtBakJZLEVBaUJMO0FBQ2IsWUFBSU0sUUFBUXRCLEVBQUUsSUFBRixDQUFaO0FBQ0FzQixjQUFNRixJQUFOLENBQVdKLE1BQU1XLElBQWpCLEVBQXVCLENBQXZCO0FBQ0EsWUFBSVgsTUFBTVcsSUFBTixLQUFlLFVBQWYsSUFBNkIsQ0FBQ0wsTUFBTUYsSUFBTixDQUFXLFdBQVgsQ0FBbEMsRUFBMkQ7QUFDekRKLGdCQUFNVyxJQUFOLEdBQWEsS0FBYjtBQUNBM0IsWUFBRWdCLEtBQUYsQ0FBUVksTUFBUixDQUFlZCxLQUFmLENBQXFCLElBQXJCLEVBQTJCSCxTQUEzQjtBQUNELFNBSEQsTUFHTyxJQUFJVyxNQUFNRixJQUFOLENBQVcsVUFBWCxDQUFKLEVBQTRCO0FBQ2pDRSxnQkFBTU8sVUFBTixDQUFpQiwrQkFBakI7QUFDRDtBQUNGO0FBMUJtQixLQUF0QjtBQTRCRDtBQUNGLENBN0VELEVBNkVHQyxPQUFPQyxNQTdFViIsImZpbGUiOiI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuKGZ1bmN0aW9uKCQpIHtcbiAgaWYgKCEkLnRocm90dGxlKSB7XG4gICAgJC50aHJvdHRsZSA9IGZ1bmN0aW9uKGZuLCB0aHJlc2hob2xkLCBzY29wZSkge1xuICAgICAgdGhyZXNoaG9sZCB8fCAodGhyZXNoaG9sZCA9IDI1MCk7XG4gICAgICB2YXIgbGFzdCwgZGVmZXJUaW1lcjtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICAgICAgIHZhciBub3cgPSArbmV3IERhdGUoKSxcbiAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAobGFzdCAmJiBub3cgPCBsYXN0ICsgdGhyZXNoaG9sZCkge1xuICAgICAgICAgIC8vIGhvbGQgb24gdG8gaXRcbiAgICAgICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgICAgICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCEkLmRlYm91bmNlKSB7XG4gICAgJC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIC8vICQuZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAvLyAgIHZhciB0aW1lb3V0O1xuICAgIC8vICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgLy8gICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAvLyAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgLy8gICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAvLyAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICB9O1xuICAgIC8vICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAvLyAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIC8vICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgLy8gICAgIGlmIChjYWxsTm93KSB7XG4gICAgLy8gICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfTtcbiAgICAvLyB9O1xuICB9XG4gIGlmICghJC5ldmVudC5zcGVjaWFsLnRhcCkge1xuICAgICQuZXZlbnQuc3BlY2lhbC50YXAgPSB7XG4gICAgICBzZXR1cChkYXRhLCBuYW1lc3BhY2VzKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICAgICRlbGVtXG4gICAgICAgICAgLmJpbmQoJ3RvdWNoc3RhcnQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpXG4gICAgICAgICAgLmJpbmQoJ3RvdWNobW92ZScsICQuZXZlbnQuc3BlY2lhbC50YXAuaGFuZGxlcilcbiAgICAgICAgICAuYmluZCgndG91Y2hlbmQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgdGVhcmRvd24obmFtZXNwYWNlcykge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpO1xuICAgICAgICAkZWxlbVxuICAgICAgICAgIC51bmJpbmQoJ3RvdWNoc3RhcnQnLCAkLmV2ZW50LnNwZWNpYWwudGFwLmhhbmRsZXIpXG4gICAgICAgICAgLnVuYmluZCgndG91Y2htb3ZlJywgJC5ldmVudC5zcGVjaWFsLnRhcC5oYW5kbGVyKVxuICAgICAgICAgIC51bmJpbmQoJ3RvdWNoZW5kJywgJC5ldmVudC5zcGVjaWFsLnRhcC5oYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgIGhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKTtcbiAgICAgICAgJGVsZW0uZGF0YShldmVudC50eXBlLCAxKTtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgISRlbGVtLmRhdGEoJ3RvdWNobW92ZScpKSB7XG4gICAgICAgICAgZXZlbnQudHlwZSA9ICd0YXAnO1xuICAgICAgICAgICQuZXZlbnQuaGFuZGxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJGVsZW0uZGF0YSgndG91Y2hlbmQnKSkge1xuICAgICAgICAgICRlbGVtLnJlbW92ZURhdGEoJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufSkod2luZG93LmpRdWVyeSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL2xpYnJhcmllcy9qcXVlcnktZXh0ZW5zaW9ucy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93\n");

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n");

/***/ }),
/* 95 */
/***/ (function(module, exports) {

eval("/**\n * Detect Element Resize\n *\n * https://github.com/sdecima/javascript-detect-element-resize\n * Sebastian Decima\n *\n * version: 0.5.3\n **/\n\nvar attachEvent = document.attachEvent,\n    stylesCreated = false;\n\nfunction resetTriggers(element) {\n  var triggers = element.__resizeTriggers__,\n      expand = triggers.firstElementChild,\n      contract = triggers.lastElementChild,\n      expandChild = expand.firstElementChild;\n  contract.scrollLeft = contract.scrollWidth;\n  contract.scrollTop = contract.scrollHeight;\n  expandChild.style.width = expand.offsetWidth + 1 + 'px';\n  expandChild.style.height = expand.offsetHeight + 1 + 'px';\n  expand.scrollLeft = expand.scrollWidth;\n  expand.scrollTop = expand.scrollHeight;\n}\n\nfunction checkTriggers(element) {\n  return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;\n}\n\nfunction scrollListener(e) {\n  var element = this;\n  resetTriggers(this);\n  if (this.__resizeRAF__) {\n    cancelFrame(this.__resizeRAF__);\n  }\n  this.__resizeRAF__ = requestFrame(function () {\n    if (checkTriggers(element)) {\n      element.__resizeLast__.width = element.offsetWidth;\n      element.__resizeLast__.height = element.offsetHeight;\n      element.__resizeListeners__.forEach(function (fn) {\n        fn.call(element, e);\n      });\n    }\n  });\n}\n\nif (!attachEvent) {\n  var requestFrame = function () {\n    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {\n      return window.setTimeout(fn, 20);\n    };\n    return function (fn) {\n      return raf(fn);\n    };\n  }();\n\n  var cancelFrame = function () {\n    var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n    return function (id) {\n      return cancel(id);\n    };\n  }();\n\n  /* Detect CSS Animations support to detect element display/re-attach */\n  var animation = false,\n      animationstring = 'animation',\n      keyframeprefix = '',\n      animationstartevent = 'animationstart',\n      domPrefixes = 'Webkit Moz O ms'.split(' '),\n      startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),\n      pfx = '';\n  {\n    var elm = document.createElement('fakeelement');\n    if (elm.style.animationName !== undefined) {\n      animation = true;\n    }\n\n    if (animation === false) {\n      for (var i = 0; i < domPrefixes.length; i++) {\n        if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\n          pfx = domPrefixes[i];\n          animationstring = pfx + 'Animation';\n          keyframeprefix = '-' + pfx.toLowerCase() + '-';\n          animationstartevent = startEvents[i];\n          animation = true;\n          break;\n        }\n      }\n    }\n  }\n\n  var animationName = 'resizeanim';\n  var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';\n  var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';\n}\n\nfunction createStyles() {\n  if (!stylesCreated) {\n    //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360\n    var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \" \"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',\n        head = document.head || document.getElementsByTagName('head')[0],\n        style = document.createElement('style');\n\n    style.type = 'text/css';\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n\n    head.appendChild(style);\n    stylesCreated = true;\n  }\n}\n\nwindow.addResizeListener = function (element, fn) {\n  if (attachEvent) {\n    element.attachEvent('onresize', fn);\n  } else {\n    if (!element.__resizeTriggers__) {\n      if (getComputedStyle(element).position == 'static') {\n        element.style.position = 'relative';\n      }\n      createStyles();\n      element.__resizeLast__ = {};\n      element.__resizeListeners__ = [];\n      (element.__resizeTriggers__ = document.createElement('div')).className = 'resize-triggers';\n      element.__resizeTriggers__.innerHTML = '<div class=\"expand-trigger\"><div></div></div>' + '<div class=\"contract-trigger\"></div>';\n      element.appendChild(element.__resizeTriggers__);\n      resetTriggers(element);\n      element.addEventListener('scroll', scrollListener, true);\n\n      /* Listen for a css animation to detect element display/re-attach */\n      animationstartevent && element.__resizeTriggers__.addEventListener(animationstartevent, function (e) {\n        if (e.animationName == animationName) {\n          resetTriggers(element);\n        }\n      });\n    }\n    element.__resizeListeners__.push(fn);\n  }\n};\n\nwindow.removeResizeListener = function (element, fn) {\n  if (attachEvent) {\n    element.detachEvent('onresize', fn);\n  } else {\n    if (!(element && element.__resizeListeners__ && element.__resizeTriggers__)) {\n      return;\n    }\n    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n    if (!element.__resizeListeners__.length) {\n      element.removeEventListener('scroll', scrollListener);\n      element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95\n");

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__factory, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\r\n * Masonry PACKAGED v4.2.2\r\n * Cascading grid layout library\r\n * https://masonry.desandro.com\r\n * MIT License\r\n * by David DeSandro\r\n */\n\n/**\r\n * Bridget makes jQuery widgets\r\n * v2.0.1\r\n * MIT license\r\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n\n(function (window, factory) {\n  // universal module definition\n  /*jshint strict: false */ /* globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n      return factory(window, jQuery);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('jquery'));\n  } else {\n    // browser global\n    window.jQueryBridget = factory(window, window.jQuery);\n  }\n})(window, function factory(window, jQuery) {\n  'use strict';\n\n  // ----- utils ----- //\n\n  var arraySlice = Array.prototype.slice;\n\n  // helper function for logging errors\n  // $.error breaks jQuery chaining\n  var console = window.console;\n  var logError = typeof console == 'undefined' ? function () {} : function (message) {\n    console.error(message);\n  };\n\n  // ----- jQueryBridget ----- //\n\n  function jQueryBridget(namespace, PluginClass, $) {\n    $ = $ || jQuery || window.jQuery;\n    if (!$) {\n      return;\n    }\n\n    // add option method -> $().plugin('option', {...})\n    if (!PluginClass.prototype.option) {\n      // option setter\n      PluginClass.prototype.option = function (opts) {\n        // bail out if not an object\n        if (!$.isPlainObject(opts)) {\n          return;\n        }\n        this.options = $.extend(true, this.options, opts);\n      };\n    }\n\n    // make jQuery plugin\n    $.fn[namespace] = function (arg0 /*, arg1 */) {\n      if (typeof arg0 == 'string') {\n        // method call $().plugin( 'methodName', { options } )\n        // shift arguments by 1\n        var args = arraySlice.call(arguments, 1);\n        return methodCall(this, arg0, args);\n      }\n      // just $().plugin({ options })\n      plainCall(this, arg0);\n      return this;\n    };\n\n    // $().plugin('methodName')\n    function methodCall($elems, methodName, args) {\n      var returnValue;\n      var pluginMethodStr = '$().' + namespace + '(\"' + methodName + '\")';\n\n      $elems.each(function (i, elem) {\n        // get instance\n        var instance = $.data(elem, namespace);\n        if (!instance) {\n          logError(namespace + ' not initialized. Cannot call methods, i.e. ' + pluginMethodStr);\n          return;\n        }\n\n        var method = instance[methodName];\n        if (!method || methodName.charAt(0) == '_') {\n          logError(pluginMethodStr + ' is not a valid method');\n          return;\n        }\n\n        // apply method, get return value\n        var value = method.apply(instance, args);\n        // set return value if value is returned, use only first value\n        returnValue = returnValue === undefined ? value : returnValue;\n      });\n\n      return returnValue !== undefined ? returnValue : $elems;\n    }\n\n    function plainCall($elems, options) {\n      $elems.each(function (i, elem) {\n        var instance = $.data(elem, namespace);\n        if (instance) {\n          // set options & init\n          instance.option(options);\n          instance._init();\n        } else {\n          // initialize new instance\n          instance = new PluginClass(elem, options);\n          $.data(elem, namespace, instance);\n        }\n      });\n    }\n\n    updateJQuery($);\n  }\n\n  // ----- updateJQuery ----- //\n\n  // set $.bridget for v1 backwards compatibility\n  function updateJQuery($) {\n    if (!$ || $ && $.bridget) {\n      return;\n    }\n    $.bridget = jQueryBridget;\n  }\n\n  updateJQuery(jQuery || window.jQuery);\n\n  // -----  ----- //\n\n  return jQueryBridget;\n});\n\n/**\r\n * EvEmitter v1.1.0\r\n * Lil' event emitter\r\n * MIT License\r\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n(function (global, factory) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n})(typeof window != 'undefined' ? window : this, function () {\n\n  function EvEmitter() {}\n\n  var proto = EvEmitter.prototype;\n\n  proto.on = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    }\n    // set events hash\n    var events = this._events = this._events || {};\n    // set listeners array\n    var listeners = events[eventName] = events[eventName] || [];\n    // only add once\n    if (listeners.indexOf(listener) == -1) {\n      listeners.push(listener);\n    }\n\n    return this;\n  };\n\n  proto.once = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    }\n    // add event\n    this.on(eventName, listener);\n    // set once flag\n    // set onceEvents hash\n    var onceEvents = this._onceEvents = this._onceEvents || {};\n    // set onceListeners object\n    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};\n    // set flag\n    onceListeners[listener] = true;\n\n    return this;\n  };\n\n  proto.off = function (eventName, listener) {\n    var listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) {\n      return;\n    }\n    var index = listeners.indexOf(listener);\n    if (index != -1) {\n      listeners.splice(index, 1);\n    }\n\n    return this;\n  };\n\n  proto.emitEvent = function (eventName, args) {\n    var listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) {\n      return;\n    }\n    // copy over to avoid interference if .off() in listener\n    listeners = listeners.slice(0);\n    args = args || [];\n    // once stuff\n    var onceListeners = this._onceEvents && this._onceEvents[eventName];\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      var isOnce = onceListeners && onceListeners[listener];\n      if (isOnce) {\n        // remove listener\n        // remove before trigger to prevent recursion\n        this.off(eventName, listener);\n        // unset once flag\n        delete onceListeners[listener];\n      }\n      // trigger listener\n      listener.apply(this, args);\n    }\n\n    return this;\n  };\n\n  proto.allOff = function () {\n    delete this._events;\n    delete this._onceEvents;\n  };\n\n  return EvEmitter;\n});\n\n/*!\r\n * getSize v2.0.3\r\n * measure size of elements\r\n * MIT license\r\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n(function (window, factory) {\n  /* jshint strict: false */ /* globals define, module */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_2__factory = (factory), (__WEBPACK_LOCAL_MODULE_2__module = { id: \"get-size/get-size\", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_2__ = (typeof __WEBPACK_LOCAL_MODULE_2__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_2__factory.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module)) : __WEBPACK_LOCAL_MODULE_2__factory), (__WEBPACK_LOCAL_MODULE_2__module.loaded = true), __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n})(window, function factory() {\n  'use strict';\n\n  // -------------------------- helpers -------------------------- //\n\n  // get a number from a string, not a percentage\n\n  function getStyleSize(value) {\n    var num = parseFloat(value);\n    // not a percent like '100%', and a number\n    var isValid = value.indexOf('%') == -1 && !isNaN(num);\n    return isValid && num;\n  }\n\n  function noop() {}\n\n  var logError = typeof console == 'undefined' ? noop : function (message) {\n    console.error(message);\n  };\n\n  // -------------------------- measurements -------------------------- //\n\n  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];\n\n  var measurementsLength = measurements.length;\n\n  function getZeroSize() {\n    var size = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      size[measurement] = 0;\n    }\n    return size;\n  }\n\n  // -------------------------- getStyle -------------------------- //\n\n  /**\r\n   * getStyle, get style of element, check for Firefox bug\r\n   * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n   */\n  function getStyle(elem) {\n    var style = getComputedStyle(elem);\n    if (!style) {\n      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See https://bit.ly/getsizebug1');\n    }\n    return style;\n  }\n\n  // -------------------------- setup -------------------------- //\n\n  var isSetup = false;\n\n  var isBoxSizeOuter;\n\n  /**\r\n   * setup\r\n   * check isBoxSizerOuter\r\n   * do on first getSize() rather than on page load for Firefox bug\r\n   */\n  function setup() {\n    // setup once\n    if (isSetup) {\n      return;\n    }\n    isSetup = true;\n\n    // -------------------------- box sizing -------------------------- //\n\n    /**\r\n     * Chrome & Safari measure the outer-width on style.width on border-box elems\r\n     * IE11 & Firefox<29 measures the inner-width\r\n     */\n    var div = document.createElement('div');\n    div.style.width = '200px';\n    div.style.padding = '1px 2px 3px 4px';\n    div.style.borderStyle = 'solid';\n    div.style.borderWidth = '1px 2px 3px 4px';\n    div.style.boxSizing = 'border-box';\n\n    var body = document.body || document.documentElement;\n    body.appendChild(div);\n    var style = getStyle(div);\n    // round value for browser zoom. desandro/masonry#928\n    isBoxSizeOuter = Math.round(getStyleSize(style.width)) == 200;\n    getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n    body.removeChild(div);\n  }\n\n  // -------------------------- getSize -------------------------- //\n\n  function getSize(elem) {\n    setup();\n\n    // use querySeletor if elem is string\n    if (typeof elem == 'string') {\n      elem = document.querySelector(elem);\n    }\n\n    // do not proceed on non-objects\n    if (!elem || (typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) != 'object' || !elem.nodeType) {\n      return;\n    }\n\n    var style = getStyle(elem);\n\n    // if hidden, everything is 0\n    if (style.display == 'none') {\n      return getZeroSize();\n    }\n\n    var size = {};\n    size.width = elem.offsetWidth;\n    size.height = elem.offsetHeight;\n\n    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n    // get all measurements\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      var value = style[measurement];\n      var num = parseFloat(value);\n      // any 'auto', 'medium' value will be 0\n      size[measurement] = !isNaN(num) ? num : 0;\n    }\n\n    var paddingWidth = size.paddingLeft + size.paddingRight;\n    var paddingHeight = size.paddingTop + size.paddingBottom;\n    var marginWidth = size.marginLeft + size.marginRight;\n    var marginHeight = size.marginTop + size.marginBottom;\n    var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n    var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n    // overwrite width and height if we can get it from style\n    var styleWidth = getStyleSize(style.width);\n    if (styleWidth !== false) {\n      size.width = styleWidth + (\n      // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);\n    }\n\n    var styleHeight = getStyleSize(style.height);\n    if (styleHeight !== false) {\n      size.height = styleHeight + (\n      // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);\n    }\n\n    size.innerWidth = size.width - (paddingWidth + borderWidth);\n    size.innerHeight = size.height - (paddingHeight + borderHeight);\n\n    size.outerWidth = size.width + marginWidth;\n    size.outerHeight = size.height + marginHeight;\n\n    return size;\n  }\n\n  return getSize;\n});\n\n/**\r\n * matchesSelector v2.0.2\r\n * matchesSelector( element, '.selector' )\r\n * MIT license\r\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n(function (window, factory) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n})(window, function factory() {\n  'use strict';\n\n  var matchesMethod = function () {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if (ElemProto.matches) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if (ElemProto.matchesSelector) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if (ElemProto[method]) {\n        return method;\n      }\n    }\n  }();\n\n  return function matchesSelector(elem, selector) {\n    return elem[matchesMethod](selector);\n  };\n});\n\n/**\r\n * Fizzy UI utils v2.0.7\r\n * MIT license\r\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n(function (window, factory) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(60)], __WEBPACK_LOCAL_MODULE_4__ = ((function (matchesSelector) {\n      return factory(window, matchesSelector);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('desandro-matches-selector'));\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(window, window.matchesSelector);\n  }\n})(window, function factory(window, matchesSelector) {\n\n  var utils = {};\n\n  // ----- extend ----- //\n\n  // extends objects\n  utils.extend = function (a, b) {\n    for (var prop in b) {\n      a[prop] = b[prop];\n    }\n    return a;\n  };\n\n  // ----- modulo ----- //\n\n  utils.modulo = function (num, div) {\n    return (num % div + div) % div;\n  };\n\n  // ----- makeArray ----- //\n\n  var arraySlice = Array.prototype.slice;\n\n  // turn element or nodeList into an array\n  utils.makeArray = function (obj) {\n    if (Array.isArray(obj)) {\n      // use object if already an array\n      return obj;\n    }\n    // return empty array if undefined or null. #6\n    if (obj === null || obj === undefined) {\n      return [];\n    }\n\n    var isArrayLike = (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && typeof obj.length == 'number';\n    if (isArrayLike) {\n      // convert nodeList to array\n      return arraySlice.call(obj);\n    }\n\n    // array of single index\n    return [obj];\n  };\n\n  // ----- removeFrom ----- //\n\n  utils.removeFrom = function (ary, obj) {\n    var index = ary.indexOf(obj);\n    if (index != -1) {\n      ary.splice(index, 1);\n    }\n  };\n\n  // ----- getParent ----- //\n\n  utils.getParent = function (elem, selector) {\n    while (elem.parentNode && elem != document.body) {\n      elem = elem.parentNode;\n      if (matchesSelector(elem, selector)) {\n        return elem;\n      }\n    }\n  };\n\n  // ----- getQueryElement ----- //\n\n  // use element as selector string\n  utils.getQueryElement = function (elem) {\n    if (typeof elem == 'string') {\n      return document.querySelector(elem);\n    }\n    return elem;\n  };\n\n  // ----- handleEvent ----- //\n\n  // enable .ontype to trigger from .addEventListener( elem, 'type' )\n  utils.handleEvent = function (event) {\n    var method = 'on' + event.type;\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  // ----- filterFindElements ----- //\n\n  utils.filterFindElements = function (elems, selector) {\n    // make array of elems\n    elems = utils.makeArray(elems);\n    var ffElems = [];\n\n    elems.forEach(function (elem) {\n      // check that elem is an actual element\n      if (!(elem instanceof HTMLElement)) {\n        return;\n      }\n      // add elem if no selector\n      if (!selector) {\n        ffElems.push(elem);\n        return;\n      }\n      // filter & find items if we have a selector\n      // filter\n      if (matchesSelector(elem, selector)) {\n        ffElems.push(elem);\n      }\n      // find children\n      var childElems = elem.querySelectorAll(selector);\n      // concat childElems to filterFound array\n      for (var i = 0; i < childElems.length; i++) {\n        ffElems.push(childElems[i]);\n      }\n    });\n\n    return ffElems;\n  };\n\n  // ----- debounceMethod ----- //\n\n  utils.debounceMethod = function (_class, methodName, threshold) {\n    threshold = threshold || 100;\n    // original method\n    var method = _class.prototype[methodName];\n    var timeoutName = methodName + 'Timeout';\n\n    _class.prototype[methodName] = function () {\n      var timeout = this[timeoutName];\n      clearTimeout(timeout);\n\n      var args = arguments;\n      var _this = this;\n      this[timeoutName] = setTimeout(function () {\n        method.apply(_this, args);\n        delete _this[timeoutName];\n      }, threshold);\n    };\n  };\n\n  // ----- docReady ----- //\n\n  utils.docReady = function (callback) {\n    var readyState = document.readyState;\n    if (readyState == 'complete' || readyState == 'interactive') {\n      // do async to allow for other scripts to run. metafizzy/flickity#441\n      setTimeout(callback);\n    } else {\n      document.addEventListener('DOMContentLoaded', callback);\n    }\n  };\n\n  // ----- htmlInit ----- //\n\n  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\n  utils.toDashed = function (str) {\n    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {\n      return $1 + '-' + $2;\n    }).toLowerCase();\n  };\n\n  var console = window.console;\n  /**\r\n   * allow user to initialize classes via [data-namespace] or .js-namespace class\r\n   * htmlInit( Widget, 'widgetName' )\r\n   * options are parsed from data-namespace-options\r\n   */\n  utils.htmlInit = function (WidgetClass, namespace) {\n    utils.docReady(function () {\n      var dashedNamespace = utils.toDashed(namespace);\n      var dataAttr = 'data-' + dashedNamespace;\n      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');\n      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);\n      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));\n      var dataOptionsAttr = dataAttr + '-options';\n      var jQuery = window.jQuery;\n\n      elems.forEach(function (elem) {\n        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);\n        var options;\n        try {\n          options = attr && JSON.parse(attr);\n        } catch (error) {\n          // log error, do not initialize\n          if (console) {\n            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);\n          }\n          return;\n        }\n        // initialize\n        var instance = new WidgetClass(elem, options);\n        // make available via $().data('namespace')\n        if (jQuery) {\n          jQuery.data(elem, namespace, instance);\n        }\n      });\n    });\n  };\n\n  // -----  ----- //\n\n  return utils;\n});\n\n/**\r\n * Outlayer Item\r\n */\n\n(function (window, factory) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(25), __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_LOCAL_MODULE_5__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(require('ev-emitter'), require('get-size'));\n  } else {\n    // browser global\n    window.Outlayer = {};\n    window.Outlayer.Item = factory(window.EvEmitter, window.getSize);\n  }\n})(window, function factory(EvEmitter, getSize) {\n  'use strict';\n\n  // ----- helpers ----- //\n\n  function isEmptyObj(obj) {\n    for (var prop in obj) {\n      return false;\n    }\n    prop = null;\n    return true;\n  }\n\n  // -------------------------- CSS3 support -------------------------- //\n\n\n  var docElemStyle = document.documentElement.style;\n\n  var transitionProperty = typeof docElemStyle.transition == 'string' ? 'transition' : 'WebkitTransition';\n  var transformProperty = typeof docElemStyle.transform == 'string' ? 'transform' : 'WebkitTransform';\n\n  var transitionEndEvent = {\n    WebkitTransition: 'webkitTransitionEnd',\n    transition: 'transitionend'\n  }[transitionProperty];\n\n  // cache all vendor properties that could have vendor prefix\n  var vendorProperties = {\n    transform: transformProperty,\n    transition: transitionProperty,\n    transitionDuration: transitionProperty + 'Duration',\n    transitionProperty: transitionProperty + 'Property',\n    transitionDelay: transitionProperty + 'Delay'\n  };\n\n  // -------------------------- Item -------------------------- //\n\n  function Item(element, layout) {\n    if (!element) {\n      return;\n    }\n\n    this.element = element;\n    // parent layout class, i.e. Masonry, Isotope, or Packery\n    this.layout = layout;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n\n    this._create();\n  }\n\n  // inherit EvEmitter\n  var proto = Item.prototype = Object.create(EvEmitter.prototype);\n  proto.constructor = Item;\n\n  proto._create = function () {\n    // transition objects\n    this._transn = {\n      ingProperties: {},\n      clean: {},\n      onEnd: {}\n    };\n\n    this.css({\n      position: 'absolute'\n    });\n  };\n\n  // trigger specified handler for event type\n  proto.handleEvent = function (event) {\n    var method = 'on' + event.type;\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n\n  /**\r\n   * apply CSS styles to element\r\n   * @param {Object} style\r\n   */\n  proto.css = function (style) {\n    var elemStyle = this.element.style;\n\n    for (var prop in style) {\n      // use vendor property if available\n      var supportedProp = vendorProperties[prop] || prop;\n      elemStyle[supportedProp] = style[prop];\n    }\n  };\n\n  // measure position, and sets it\n  proto.getPosition = function () {\n    var style = getComputedStyle(this.element);\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n    var xValue = style[isOriginLeft ? 'left' : 'right'];\n    var yValue = style[isOriginTop ? 'top' : 'bottom'];\n    var x = parseFloat(xValue);\n    var y = parseFloat(yValue);\n    // convert percent to pixels\n    var layoutSize = this.layout.size;\n    if (xValue.indexOf('%') != -1) {\n      x = x / 100 * layoutSize.width;\n    }\n    if (yValue.indexOf('%') != -1) {\n      y = y / 100 * layoutSize.height;\n    }\n    // clean up 'auto' or other non-integer values\n    x = isNaN(x) ? 0 : x;\n    y = isNaN(y) ? 0 : y;\n    // remove padding from measurement\n    x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n    y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n    this.position.x = x;\n    this.position.y = y;\n  };\n\n  // set settled position, apply padding\n  proto.layoutPosition = function () {\n    var layoutSize = this.layout.size;\n    var style = {};\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n\n    // x\n    var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n    var xProperty = isOriginLeft ? 'left' : 'right';\n    var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n    var x = this.position.x + layoutSize[xPadding];\n    // set in percentage or pixels\n    style[xProperty] = this.getXValue(x);\n    // reset other property\n    style[xResetProperty] = '';\n\n    // y\n    var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n    var yProperty = isOriginTop ? 'top' : 'bottom';\n    var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n    var y = this.position.y + layoutSize[yPadding];\n    // set in percentage or pixels\n    style[yProperty] = this.getYValue(y);\n    // reset other property\n    style[yResetProperty] = '';\n\n    this.css(style);\n    this.emitEvent('layout', [this]);\n  };\n\n  proto.getXValue = function (x) {\n    var isHorizontal = this.layout._getOption('horizontal');\n    return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + '%' : x + 'px';\n  };\n\n  proto.getYValue = function (y) {\n    var isHorizontal = this.layout._getOption('horizontal');\n    return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + '%' : y + 'px';\n  };\n\n  proto._transitionTo = function (x, y) {\n    this.getPosition();\n    // get current x & y from top/left\n    var curX = this.position.x;\n    var curY = this.position.y;\n\n    var didNotMove = x == this.position.x && y == this.position.y;\n\n    // save end position\n    this.setPosition(x, y);\n\n    // if did not move and not transitioning, just go to layout\n    if (didNotMove && !this.isTransitioning) {\n      this.layoutPosition();\n      return;\n    }\n\n    var transX = x - curX;\n    var transY = y - curY;\n    var transitionStyle = {};\n    transitionStyle.transform = this.getTranslate(transX, transY);\n\n    this.transition({\n      to: transitionStyle,\n      onTransitionEnd: {\n        transform: this.layoutPosition\n      },\n      isCleaning: true\n    });\n  };\n\n  proto.getTranslate = function (x, y) {\n    // flip cooridinates if origin on right or bottom\n    var isOriginLeft = this.layout._getOption('originLeft');\n    var isOriginTop = this.layout._getOption('originTop');\n    x = isOriginLeft ? x : -x;\n    y = isOriginTop ? y : -y;\n    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n  };\n\n  // non transition + transform support\n  proto.goTo = function (x, y) {\n    this.setPosition(x, y);\n    this.layoutPosition();\n  };\n\n  proto.moveTo = proto._transitionTo;\n\n  proto.setPosition = function (x, y) {\n    this.position.x = parseFloat(x);\n    this.position.y = parseFloat(y);\n  };\n\n  // ----- transition ----- //\n\n  /**\r\n   * @param {Object} style - CSS\r\n   * @param {Function} onTransitionEnd\r\n   */\n\n  // non transition, just trigger callback\n  proto._nonTransition = function (args) {\n    this.css(args.to);\n    if (args.isCleaning) {\n      this._removeStyles(args.to);\n    }\n    for (var prop in args.onTransitionEnd) {\n      args.onTransitionEnd[prop].call(this);\n    }\n  };\n\n  /**\r\n   * proper transition\r\n   * @param {Object} args - arguments\r\n   *   @param {Object} to - style to transition to\r\n   *   @param {Object} from - style to start transition from\r\n   *   @param {Boolean} isCleaning - removes transition styles after transition\r\n   *   @param {Function} onTransitionEnd - callback\r\n   */\n  proto.transition = function (args) {\n    // redirect to nonTransition if no transition duration\n    if (!parseFloat(this.layout.options.transitionDuration)) {\n      this._nonTransition(args);\n      return;\n    }\n\n    var _transition = this._transn;\n    // keep track of onTransitionEnd callback by css property\n    for (var prop in args.onTransitionEnd) {\n      _transition.onEnd[prop] = args.onTransitionEnd[prop];\n    }\n    // keep track of properties that are transitioning\n    for (prop in args.to) {\n      _transition.ingProperties[prop] = true;\n      // keep track of properties to clean up when transition is done\n      if (args.isCleaning) {\n        _transition.clean[prop] = true;\n      }\n    }\n\n    // set from styles\n    if (args.from) {\n      this.css(args.from);\n      // force redraw. http://blog.alexmaccaw.com/css-transitions\n      var h = this.element.offsetHeight;\n      // hack for JSHint to hush about unused var\n      h = null;\n    }\n    // enable transition\n    this.enableTransition(args.to);\n    // set styles that are transitioning\n    this.css(args.to);\n\n    this.isTransitioning = true;\n  };\n\n  // dash before all cap letters, including first for\n  // WebkitTransform => -webkit-transform\n  function toDashedAll(str) {\n    return str.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n  }\n\n  var transitionProps = 'opacity,' + toDashedAll(transformProperty);\n\n  proto.enableTransition = function () /* style */{\n    // HACK changing transitionProperty during a transition\n    // will cause transition to jump\n    if (this.isTransitioning) {\n      return;\n    }\n\n    // make `transition: foo, bar, baz` from style object\n    // HACK un-comment this when enableTransition can work\n    // while a transition is happening\n    // var transitionValues = [];\n    // for ( var prop in style ) {\n    //   // dash-ify camelCased properties like WebkitTransition\n    //   prop = vendorProperties[ prop ] || prop;\n    //   transitionValues.push( toDashedAll( prop ) );\n    // }\n    // munge number to millisecond, to match stagger\n    var duration = this.layout.options.transitionDuration;\n    duration = typeof duration == 'number' ? duration + 'ms' : duration;\n    // enable transition styles\n    this.css({\n      transitionProperty: transitionProps,\n      transitionDuration: duration,\n      transitionDelay: this.staggerDelay || 0\n    });\n    // listen for transition end event\n    this.element.addEventListener(transitionEndEvent, this, false);\n  };\n\n  // ----- events ----- //\n\n  proto.onwebkitTransitionEnd = function (event) {\n    this.ontransitionend(event);\n  };\n\n  proto.onotransitionend = function (event) {\n    this.ontransitionend(event);\n  };\n\n  // properties that I munge to make my life easier\n  var dashedVendorProperties = {\n    '-webkit-transform': 'transform'\n  };\n\n  proto.ontransitionend = function (event) {\n    // disregard bubbled events from children\n    if (event.target !== this.element) {\n      return;\n    }\n    var _transition = this._transn;\n    // get property name of transitioned property, convert to prefix-free\n    var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName;\n\n    // remove property that has completed transitioning\n    delete _transition.ingProperties[propertyName];\n    // check if any properties are still transitioning\n    if (isEmptyObj(_transition.ingProperties)) {\n      // all properties have completed transitioning\n      this.disableTransition();\n    }\n    // clean style\n    if (propertyName in _transition.clean) {\n      // clean up style\n      this.element.style[event.propertyName] = '';\n      delete _transition.clean[propertyName];\n    }\n    // trigger onTransitionEnd callback\n    if (propertyName in _transition.onEnd) {\n      var onTransitionEnd = _transition.onEnd[propertyName];\n      onTransitionEnd.call(this);\n      delete _transition.onEnd[propertyName];\n    }\n\n    this.emitEvent('transitionEnd', [this]);\n  };\n\n  proto.disableTransition = function () {\n    this.removeTransitionStyles();\n    this.element.removeEventListener(transitionEndEvent, this, false);\n    this.isTransitioning = false;\n  };\n\n  /**\r\n   * removes style property from element\r\n   * @param {Object} style\r\n  **/\n  proto._removeStyles = function (style) {\n    // clean up transition styles\n    var cleanStyle = {};\n    for (var prop in style) {\n      cleanStyle[prop] = '';\n    }\n    this.css(cleanStyle);\n  };\n\n  var cleanTransitionStyle = {\n    transitionProperty: '',\n    transitionDuration: '',\n    transitionDelay: ''\n  };\n\n  proto.removeTransitionStyles = function () {\n    // remove transition\n    this.css(cleanTransitionStyle);\n  };\n\n  // ----- stagger ----- //\n\n  proto.stagger = function (delay) {\n    delay = isNaN(delay) ? 0 : delay;\n    this.staggerDelay = delay + 'ms';\n  };\n\n  // ----- show/hide/remove ----- //\n\n  // remove element from DOM\n  proto.removeElem = function () {\n    this.element.parentNode.removeChild(this.element);\n    // remove display: none\n    this.css({ display: '' });\n    this.emitEvent('remove', [this]);\n  };\n\n  proto.remove = function () {\n    // just remove element if no transition support or no transition\n    if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {\n      this.removeElem();\n      return;\n    }\n\n    // start transition\n    this.once('transitionEnd', function () {\n      this.removeElem();\n    });\n    this.hide();\n  };\n\n  proto.reveal = function () {\n    delete this.isHidden;\n    // remove display: none\n    this.css({ display: '' });\n\n    var options = this.layout.options;\n\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n    onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;\n\n    this.transition({\n      from: options.hiddenStyle,\n      to: options.visibleStyle,\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onRevealTransitionEnd = function () {\n    // check if still visible\n    // during transition, item may have been hidden\n    if (!this.isHidden) {\n      this.emitEvent('reveal');\n    }\n  };\n\n  /**\r\n   * get style property use for hide/reveal transition end\r\n   * @param {String} styleProperty - hiddenStyle/visibleStyle\r\n   * @returns {String}\r\n   */\n  proto.getHideRevealTransitionEndProperty = function (styleProperty) {\n    var optionStyle = this.layout.options[styleProperty];\n    // use opacity\n    if (optionStyle.opacity) {\n      return 'opacity';\n    }\n    // get first property\n    for (var prop in optionStyle) {\n      return prop;\n    }\n  };\n\n  proto.hide = function () {\n    // set flag\n    this.isHidden = true;\n    // remove display: none\n    this.css({ display: '' });\n\n    var options = this.layout.options;\n\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n    onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;\n\n    this.transition({\n      from: options.visibleStyle,\n      to: options.hiddenStyle,\n      // keep hidden stuff hidden\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onHideTransitionEnd = function () {\n    // check if still hidden\n    // during transition, item may have been un-hidden\n    if (this.isHidden) {\n      this.css({ display: 'none' });\n      this.emitEvent('hide');\n    }\n  };\n\n  proto.destroy = function () {\n    this.css({\n      position: '',\n      left: '',\n      right: '',\n      top: '',\n      bottom: '',\n      transition: '',\n      transform: ''\n    });\n  };\n\n  return Item;\n});\n\n/*!\r\n * Outlayer v2.1.1\r\n * the brains and guts of a layout library\r\n * MIT license\r\n */\n\n(function (window, factory) {\n  'use strict';\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(25), __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_5__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (EvEmitter, getSize, utils, Item) {\n      return factory(window, EvEmitter, getSize, utils, Item);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./item'));\n  } else {\n    // browser global\n    window.Outlayer = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, window.Outlayer.Item);\n  }\n})(window, function factory(window, EvEmitter, getSize, utils, Item) {\n  'use strict';\n\n  // ----- vars ----- //\n\n  var console = window.console;\n  var jQuery = window.jQuery;\n  var noop = function noop() {};\n\n  // -------------------------- Outlayer -------------------------- //\n\n  // globally unique identifiers\n  var GUID = 0;\n  // internal store of all Outlayer intances\n  var instances = {};\n\n  /**\r\n   * @param {Element, String} element\r\n   * @param {Object} options\r\n   * @constructor\r\n   */\n  function Outlayer(element, options) {\n    var queryElement = utils.getQueryElement(element);\n    if (!queryElement) {\n      if (console) {\n        console.error('Bad element for ' + this.constructor.namespace + ': ' + (queryElement || element));\n      }\n      return;\n    }\n    this.element = queryElement;\n    // add jQuery\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    }\n\n    // options\n    this.options = utils.extend({}, this.constructor.defaults);\n    this.option(options);\n\n    // add id for Outlayer.getFromElement\n    var id = ++GUID;\n    this.element.outlayerGUID = id; // expando\n    instances[id] = this; // associate via id\n\n    // kick it off\n    this._create();\n\n    var isInitLayout = this._getOption('initLayout');\n    if (isInitLayout) {\n      this.layout();\n    }\n  }\n\n  // settings are for internal use only\n  Outlayer.namespace = 'outlayer';\n  Outlayer.Item = Item;\n\n  // default options\n  Outlayer.defaults = {\n    containerStyle: {\n      position: 'relative'\n    },\n    initLayout: true,\n    originLeft: true,\n    originTop: true,\n    resize: true,\n    resizeContainer: true,\n    // item options\n    transitionDuration: '0.4s',\n    hiddenStyle: {\n      opacity: 0,\n      transform: 'scale(0.001)'\n    },\n    visibleStyle: {\n      opacity: 1,\n      transform: 'scale(1)'\n    }\n  };\n\n  var proto = Outlayer.prototype;\n  // inherit EvEmitter\n  utils.extend(proto, EvEmitter.prototype);\n\n  /**\r\n   * set options\r\n   * @param {Object} opts\r\n   */\n  proto.option = function (opts) {\n    utils.extend(this.options, opts);\n  };\n\n  /**\r\n   * get backwards compatible option value, check old name\r\n   */\n  proto._getOption = function (option) {\n    var oldOption = this.constructor.compatOptions[option];\n    return oldOption && this.options[oldOption] !== undefined ? this.options[oldOption] : this.options[option];\n  };\n\n  Outlayer.compatOptions = {\n    // currentName: oldName\n    initLayout: 'isInitLayout',\n    horizontal: 'isHorizontal',\n    layoutInstant: 'isLayoutInstant',\n    originLeft: 'isOriginLeft',\n    originTop: 'isOriginTop',\n    resize: 'isResizeBound',\n    resizeContainer: 'isResizingContainer'\n  };\n\n  proto._create = function () {\n    // get items from children\n    this.reloadItems();\n    // elements that affect layout, but are not laid out\n    this.stamps = [];\n    this.stamp(this.options.stamp);\n    // set container style\n    utils.extend(this.element.style, this.options.containerStyle);\n\n    // bind resize method\n    var canBindResize = this._getOption('resize');\n    if (canBindResize) {\n      this.bindResize();\n    }\n  };\n\n  // goes through all children again and gets bricks in proper order\n  proto.reloadItems = function () {\n    // collection of item elements\n    this.items = this._itemize(this.element.children);\n  };\n\n  /**\r\n   * turn elements into Outlayer.Items to be used in layout\r\n   * @param {Array or NodeList or HTMLElement} elems\r\n   * @returns {Array} items - collection of new Outlayer Items\r\n   */\n  proto._itemize = function (elems) {\n\n    var itemElems = this._filterFindItemElements(elems);\n    var Item = this.constructor.Item;\n\n    // create new Outlayer Items for collection\n    var items = [];\n    for (var i = 0; i < itemElems.length; i++) {\n      var elem = itemElems[i];\n      var item = new Item(elem, this);\n      items.push(item);\n    }\n\n    return items;\n  };\n\n  /**\r\n   * get item elements to be used in layout\r\n   * @param {Array or NodeList or HTMLElement} elems\r\n   * @returns {Array} items - item elements\r\n   */\n  proto._filterFindItemElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.itemSelector);\n  };\n\n  /**\r\n   * getter method for getting item elements\r\n   * @returns {Array} elems - collection of item elements\r\n   */\n  proto.getItemElements = function () {\n    return this.items.map(function (item) {\n      return item.element;\n    });\n  };\n\n  // ----- init & layout ----- //\n\n  /**\r\n   * lays out all items\r\n   */\n  proto.layout = function () {\n    this._resetLayout();\n    this._manageStamps();\n\n    // don't animate first layout\n    var layoutInstant = this._getOption('layoutInstant');\n    var isInstant = layoutInstant !== undefined ? layoutInstant : !this._isLayoutInited;\n    this.layoutItems(this.items, isInstant);\n\n    // flag for initalized\n    this._isLayoutInited = true;\n  };\n\n  // _init is alias for layout\n  proto._init = proto.layout;\n\n  /**\r\n   * logic before any new layout\r\n   */\n  proto._resetLayout = function () {\n    this.getSize();\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n\n  /**\r\n   * get measurement from option, for columnWidth, rowHeight, gutter\r\n   * if option is String -> get element from selector string, & get size of element\r\n   * if option is Element -> get size of element\r\n   * else use option as a number\r\n   *\r\n   * @param {String} measurement\r\n   * @param {String} size - width or height\r\n   * @private\r\n   */\n  proto._getMeasurement = function (measurement, size) {\n    var option = this.options[measurement];\n    var elem;\n    if (!option) {\n      // default to 0\n      this[measurement] = 0;\n    } else {\n      // use option as an element\n      if (typeof option == 'string') {\n        elem = this.element.querySelector(option);\n      } else if (option instanceof HTMLElement) {\n        elem = option;\n      }\n      // use size of element, if element\n      this[measurement] = elem ? getSize(elem)[size] : option;\n    }\n  };\n\n  /**\r\n   * layout a collection of item elements\r\n   * @api public\r\n   */\n  proto.layoutItems = function (items, isInstant) {\n    items = this._getItemsForLayout(items);\n\n    this._layoutItems(items, isInstant);\n\n    this._postLayout();\n  };\n\n  /**\r\n   * get the items to be laid out\r\n   * you may want to skip over some items\r\n   * @param {Array} items\r\n   * @returns {Array} items\r\n   */\n  proto._getItemsForLayout = function (items) {\n    return items.filter(function (item) {\n      return !item.isIgnored;\n    });\n  };\n\n  /**\r\n   * layout items\r\n   * @param {Array} items\r\n   * @param {Boolean} isInstant\r\n   */\n  proto._layoutItems = function (items, isInstant) {\n    this._emitCompleteOnItems('layout', items);\n\n    if (!items || !items.length) {\n      // no items, emit event with empty array\n      return;\n    }\n\n    var queue = [];\n\n    items.forEach(function (item) {\n      // get x/y object from method\n      var position = this._getItemLayoutPosition(item);\n      // enqueue\n      position.item = item;\n      position.isInstant = isInstant || item.isLayoutInstant;\n      queue.push(position);\n    }, this);\n\n    this._processLayoutQueue(queue);\n  };\n\n  /**\r\n   * get item layout position\r\n   * @param {Outlayer.Item} item\r\n   * @returns {Object} x and y position\r\n   */\n  proto._getItemLayoutPosition = function () /* item */{\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n\n  /**\r\n   * iterate over array and position each item\r\n   * Reason being - separating this logic prevents 'layout invalidation'\r\n   * thx @paul_irish\r\n   * @param {Array} queue\r\n   */\n  proto._processLayoutQueue = function (queue) {\n    this.updateStagger();\n    queue.forEach(function (obj, i) {\n      this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);\n    }, this);\n  };\n\n  // set stagger from option in milliseconds number\n  proto.updateStagger = function () {\n    var stagger = this.options.stagger;\n    if (stagger === null || stagger === undefined) {\n      this.stagger = 0;\n      return;\n    }\n    this.stagger = getMilliseconds(stagger);\n    return this.stagger;\n  };\n\n  /**\r\n   * Sets position of item in DOM\r\n   * @param {Outlayer.Item} item\r\n   * @param {Number} x - horizontal position\r\n   * @param {Number} y - vertical position\r\n   * @param {Boolean} isInstant - disables transitions\r\n   */\n  proto._positionItem = function (item, x, y, isInstant, i) {\n    if (isInstant) {\n      // if not transition, just set CSS\n      item.goTo(x, y);\n    } else {\n      item.stagger(i * this.stagger);\n      item.moveTo(x, y);\n    }\n  };\n\n  /**\r\n   * Any logic you want to do after each layout,\r\n   * i.e. size the container\r\n   */\n  proto._postLayout = function () {\n    this.resizeContainer();\n  };\n\n  proto.resizeContainer = function () {\n    var isResizingContainer = this._getOption('resizeContainer');\n    if (!isResizingContainer) {\n      return;\n    }\n    var size = this._getContainerSize();\n    if (size) {\n      this._setContainerMeasure(size.width, true);\n      this._setContainerMeasure(size.height, false);\n    }\n  };\n\n  /**\r\n   * Sets width or height of container if returned\r\n   * @returns {Object} size\r\n   *   @param {Number} width\r\n   *   @param {Number} height\r\n   */\n  proto._getContainerSize = noop;\n\n  /**\r\n   * @param {Number} measure - size of width or height\r\n   * @param {Boolean} isWidth\r\n   */\n  proto._setContainerMeasure = function (measure, isWidth) {\n    if (measure === undefined) {\n      return;\n    }\n\n    var elemSize = this.size;\n    // add padding and border width if border box\n    if (elemSize.isBorderBox) {\n      measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;\n    }\n\n    measure = Math.max(measure, 0);\n    this.element.style[isWidth ? 'width' : 'height'] = measure + 'px';\n  };\n\n  /**\r\n   * emit eventComplete on a collection of items events\r\n   * @param {String} eventName\r\n   * @param {Array} items - Outlayer.Items\r\n   */\n  proto._emitCompleteOnItems = function (eventName, items) {\n    var _this = this;\n    function onComplete() {\n      _this.dispatchEvent(eventName + 'Complete', null, [items]);\n    }\n\n    var count = items.length;\n    if (!items || !count) {\n      onComplete();\n      return;\n    }\n\n    var doneCount = 0;\n    function tick() {\n      doneCount++;\n      if (doneCount == count) {\n        onComplete();\n      }\n    }\n\n    // bind callback\n    items.forEach(function (item) {\n      item.once(eventName, tick);\n    });\n  };\n\n  /**\r\n   * emits events via EvEmitter and jQuery events\r\n   * @param {String} type - name of event\r\n   * @param {Event} event - original event\r\n   * @param {Array} args - extra arguments\r\n   */\n  proto.dispatchEvent = function (type, event, args) {\n    // add original event to arguments\n    var emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n\n    if (jQuery) {\n      // set this.$element\n      this.$element = this.$element || jQuery(this.element);\n      if (event) {\n        // create jQuery event\n        var $event = jQuery.Event(event);\n        $event.type = type;\n        this.$element.trigger($event, args);\n      } else {\n        // just trigger with type if no event available\n        this.$element.trigger(type, args);\n      }\n    }\n  };\n\n  // -------------------------- ignore & stamps -------------------------- //\n\n\n  /**\r\n   * keep item in collection, but do not lay it out\r\n   * ignored items do not get skipped in layout\r\n   * @param {Element} elem\r\n   */\n  proto.ignore = function (elem) {\n    var item = this.getItem(elem);\n    if (item) {\n      item.isIgnored = true;\n    }\n  };\n\n  /**\r\n   * return item to layout collection\r\n   * @param {Element} elem\r\n   */\n  proto.unignore = function (elem) {\n    var item = this.getItem(elem);\n    if (item) {\n      delete item.isIgnored;\n    }\n  };\n\n  /**\r\n   * adds elements to stamps\r\n   * @param {NodeList, Array, Element, or String} elems\r\n   */\n  proto.stamp = function (elems) {\n    elems = this._find(elems);\n    if (!elems) {\n      return;\n    }\n\n    this.stamps = this.stamps.concat(elems);\n    // ignore\n    elems.forEach(this.ignore, this);\n  };\n\n  /**\r\n   * removes elements to stamps\r\n   * @param {NodeList, Array, or Element} elems\r\n   */\n  proto.unstamp = function (elems) {\n    elems = this._find(elems);\n    if (!elems) {\n      return;\n    }\n\n    elems.forEach(function (elem) {\n      // filter out removed stamp elements\n      utils.removeFrom(this.stamps, elem);\n      this.unignore(elem);\n    }, this);\n  };\n\n  /**\r\n   * finds child elements\r\n   * @param {NodeList, Array, Element, or String} elems\r\n   * @returns {Array} elems\r\n   */\n  proto._find = function (elems) {\n    if (!elems) {\n      return;\n    }\n    // if string, use argument as selector string\n    if (typeof elems == 'string') {\n      elems = this.element.querySelectorAll(elems);\n    }\n    elems = utils.makeArray(elems);\n    return elems;\n  };\n\n  proto._manageStamps = function () {\n    if (!this.stamps || !this.stamps.length) {\n      return;\n    }\n\n    this._getBoundingRect();\n\n    this.stamps.forEach(this._manageStamp, this);\n  };\n\n  // update boundingLeft / Top\n  proto._getBoundingRect = function () {\n    // get bounding rect for container element\n    var boundingRect = this.element.getBoundingClientRect();\n    var size = this.size;\n    this._boundingRect = {\n      left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n      top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n      right: boundingRect.right - (size.paddingRight + size.borderRightWidth),\n      bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)\n    };\n  };\n\n  /**\r\n   * @param {Element} stamp\r\n  **/\n  proto._manageStamp = noop;\n\n  /**\r\n   * get x/y position of element relative to container element\r\n   * @param {Element} elem\r\n   * @returns {Object} offset - has left, top, right, bottom\r\n   */\n  proto._getElementOffset = function (elem) {\n    var boundingRect = elem.getBoundingClientRect();\n    var thisRect = this._boundingRect;\n    var size = getSize(elem);\n    var offset = {\n      left: boundingRect.left - thisRect.left - size.marginLeft,\n      top: boundingRect.top - thisRect.top - size.marginTop,\n      right: thisRect.right - boundingRect.right - size.marginRight,\n      bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n    };\n    return offset;\n  };\n\n  // -------------------------- resize -------------------------- //\n\n  // enable event handlers for listeners\n  // i.e. resize -> onresize\n  proto.handleEvent = utils.handleEvent;\n\n  /**\r\n   * Bind layout to window resizing\r\n   */\n  proto.bindResize = function () {\n    window.addEventListener('resize', this);\n    this.isResizeBound = true;\n  };\n\n  /**\r\n   * Unbind layout to window resizing\r\n   */\n  proto.unbindResize = function () {\n    window.removeEventListener('resize', this);\n    this.isResizeBound = false;\n  };\n\n  proto.onresize = function () {\n    this.resize();\n  };\n\n  utils.debounceMethod(Outlayer, 'onresize', 100);\n\n  proto.resize = function () {\n    // don't trigger if size did not change\n    // or if resize was unbound. See #9\n    if (!this.isResizeBound || !this.needsResizeLayout()) {\n      return;\n    }\n\n    this.layout();\n  };\n\n  /**\r\n   * check if layout is needed post layout\r\n   * @returns Boolean\r\n   */\n  proto.needsResizeLayout = function () {\n    var size = getSize(this.element);\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var hasSizes = this.size && size;\n    return hasSizes && size.innerWidth !== this.size.innerWidth;\n  };\n\n  // -------------------------- methods -------------------------- //\n\n  /**\r\n   * add items to Outlayer instance\r\n   * @param {Array or NodeList or Element} elems\r\n   * @returns {Array} items - Outlayer.Items\r\n  **/\n  proto.addItems = function (elems) {\n    var items = this._itemize(elems);\n    // add items to collection\n    if (items.length) {\n      this.items = this.items.concat(items);\n    }\n    return items;\n  };\n\n  /**\r\n   * Layout newly-appended item elements\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.appended = function (elems) {\n    var items = this.addItems(elems);\n    if (!items.length) {\n      return;\n    }\n    // layout and reveal just the new items\n    this.layoutItems(items, true);\n    this.reveal(items);\n  };\n\n  /**\r\n   * Layout prepended elements\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.prepended = function (elems) {\n    var items = this._itemize(elems);\n    if (!items.length) {\n      return;\n    }\n    // add items to beginning of collection\n    var previousItems = this.items.slice(0);\n    this.items = items.concat(previousItems);\n    // start new layout\n    this._resetLayout();\n    this._manageStamps();\n    // layout new stuff without transition\n    this.layoutItems(items, true);\n    this.reveal(items);\n    // layout previous items\n    this.layoutItems(previousItems);\n  };\n\n  /**\r\n   * reveal a collection of items\r\n   * @param {Array of Outlayer.Items} items\r\n   */\n  proto.reveal = function (items) {\n    this._emitCompleteOnItems('reveal', items);\n    if (!items || !items.length) {\n      return;\n    }\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.reveal();\n    });\n  };\n\n  /**\r\n   * hide a collection of items\r\n   * @param {Array of Outlayer.Items} items\r\n   */\n  proto.hide = function (items) {\n    this._emitCompleteOnItems('hide', items);\n    if (!items || !items.length) {\n      return;\n    }\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.hide();\n    });\n  };\n\n  /**\r\n   * reveal item elements\r\n   * @param {Array}, {Element}, {NodeList} items\r\n   */\n  proto.revealItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.reveal(items);\n  };\n\n  /**\r\n   * hide item elements\r\n   * @param {Array}, {Element}, {NodeList} items\r\n   */\n  proto.hideItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.hide(items);\n  };\n\n  /**\r\n   * get Outlayer.Item, given an Element\r\n   * @param {Element} elem\r\n   * @param {Function} callback\r\n   * @returns {Outlayer.Item} item\r\n   */\n  proto.getItem = function (elem) {\n    // loop through items to get the one that matches\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this.items[i];\n      if (item.element == elem) {\n        // return item\n        return item;\n      }\n    }\n  };\n\n  /**\r\n   * get collection of Outlayer.Items, given Elements\r\n   * @param {Array} elems\r\n   * @returns {Array} items - Outlayer.Items\r\n   */\n  proto.getItems = function (elems) {\n    elems = utils.makeArray(elems);\n    var items = [];\n    elems.forEach(function (elem) {\n      var item = this.getItem(elem);\n      if (item) {\n        items.push(item);\n      }\n    }, this);\n\n    return items;\n  };\n\n  /**\r\n   * remove element(s) from instance and DOM\r\n   * @param {Array or NodeList or Element} elems\r\n   */\n  proto.remove = function (elems) {\n    var removeItems = this.getItems(elems);\n\n    this._emitCompleteOnItems('remove', removeItems);\n\n    // bail if no items to remove\n    if (!removeItems || !removeItems.length) {\n      return;\n    }\n\n    removeItems.forEach(function (item) {\n      item.remove();\n      // remove item from collection\n      utils.removeFrom(this.items, item);\n    }, this);\n  };\n\n  // ----- destroy ----- //\n\n  // remove and disable Outlayer instance\n  proto.destroy = function () {\n    // clean up dynamic styles\n    var style = this.element.style;\n    style.height = '';\n    style.position = '';\n    style.width = '';\n    // destroy items\n    this.items.forEach(function (item) {\n      item.destroy();\n    });\n\n    this.unbindResize();\n\n    var id = this.element.outlayerGUID;\n    delete instances[id]; // remove reference to instance by id\n    delete this.element.outlayerGUID;\n    // remove data for jQuery\n    if (jQuery) {\n      jQuery.removeData(this.element, this.constructor.namespace);\n    }\n  };\n\n  // -------------------------- data -------------------------- //\n\n  /**\r\n   * get Outlayer instance from element\r\n   * @param {Element} elem\r\n   * @returns {Outlayer}\r\n   */\n  Outlayer.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    var id = elem && elem.outlayerGUID;\n    return id && instances[id];\n  };\n\n  // -------------------------- create Outlayer class -------------------------- //\n\n  /**\r\n   * create a layout class\r\n   * @param {String} namespace\r\n   */\n  Outlayer.create = function (namespace, options) {\n    // sub-class Outlayer\n    var Layout = subclass(Outlayer);\n    // apply new options and compatOptions\n    Layout.defaults = utils.extend({}, Outlayer.defaults);\n    utils.extend(Layout.defaults, options);\n    Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);\n\n    Layout.namespace = namespace;\n\n    Layout.data = Outlayer.data;\n\n    // sub-class Item\n    Layout.Item = subclass(Item);\n\n    // -------------------------- declarative -------------------------- //\n\n    utils.htmlInit(Layout, namespace);\n\n    // -------------------------- jQuery bridge -------------------------- //\n\n    // make into jQuery plugin\n    if (jQuery && jQuery.bridget) {\n      jQuery.bridget(namespace, Layout);\n    }\n\n    return Layout;\n  };\n\n  function subclass(Parent) {\n    function SubClass() {\n      Parent.apply(this, arguments);\n    }\n\n    SubClass.prototype = Object.create(Parent.prototype);\n    SubClass.prototype.constructor = SubClass;\n\n    return SubClass;\n  }\n\n  // ----- helpers ----- //\n\n  // how many milliseconds are in each unit\n  var msUnits = {\n    ms: 1,\n    s: 1000\n  };\n\n  // munge time-like parameter into millisecond number\n  // '0.4s' -> 40\n  function getMilliseconds(time) {\n    if (typeof time == 'number') {\n      return time;\n    }\n    var matches = time.match(/(^\\d*\\.?\\d*)(\\w*)/);\n    var num = matches && matches[1];\n    var unit = matches && matches[2];\n    if (!num.length) {\n      return 0;\n    }\n    num = parseFloat(num);\n    var mult = msUnits[unit] || 1;\n    return num * mult;\n  }\n\n  // ----- fin ----- //\n\n  // back in global\n  Outlayer.Item = Item;\n\n  return Outlayer;\n});\n\n/*!\r\n * Masonry v4.2.2\r\n * Cascading grid layout library\r\n * https://masonry.desandro.com\r\n * MIT License\r\n * by David DeSandro\r\n */\n\n(function (window, factory) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(97), __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('outlayer'), require('get-size'));\n  } else {\n    // browser global\n    window.Masonry = factory(window.Outlayer, window.getSize);\n  }\n})(window, function factory(Outlayer, getSize) {\n\n  // -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function () {\n    this.getSize();\n    this._getMeasurement('columnWidth', 'outerWidth');\n    this._getMeasurement('gutter', 'outerWidth');\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for (var i = 0; i < this.cols; i++) {\n      this.colYs.push(0);\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function () {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if (!this.columnWidth) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth ||\n      // if first elem has no width, default to size of container\n      this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[mathMethod](cols);\n    this.cols = Math.max(cols, 1);\n  };\n\n  proto.getContainerWidth = function () {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize(container);\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);\n    colSpan = Math.min(colSpan, this.cols);\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ? '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[colPosMethod](colSpan, item);\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for (var i = colPosition.col; i < setMax; i++) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function (colSpan) {\n    var colGroup = this._getTopColGroup(colSpan);\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply(Math, colGroup);\n\n    return {\n      col: colGroup.indexOf(minimumY),\n      y: minimumY\n    };\n  };\n\n  /**\r\n   * @param {Number} colSpan - number of columns the element spans\r\n   * @returns {Array} colGroup\r\n   */\n  proto._getTopColGroup = function (colSpan) {\n    if (colSpan < 2) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for (var i = 0; i < groupCount; i++) {\n      colGroup[i] = this._getColGroupY(i, colSpan);\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function (col, colSpan) {\n    if (colSpan < 2) {\n      return this.colYs[col];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice(col, col + colSpan);\n    // and get the max value of the array\n    return Math.max.apply(Math, groupColYs);\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function (colSpan, item) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY(col, colSpan)\n    };\n  };\n\n  proto._manageStamp = function (stamp) {\n    var stampSize = getSize(stamp);\n    var offset = this._getElementOffset(stamp);\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor(firstX / this.columnWidth);\n    firstCol = Math.max(0, firstCol);\n    var lastCol = Math.floor(lastX / this.columnWidth);\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min(this.cols - 1, lastCol);\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;\n    for (var i = firstCol; i <= lastCol; i++) {\n      this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);\n    }\n  };\n\n  proto._getContainerSize = function () {\n    this.maxY = Math.max.apply(Math, this.colYs);\n    var size = {\n      height: this.maxY\n    };\n\n    if (this._getOption('fitWidth')) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function () {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while (--i) {\n      if (this.colYs[i] !== 0) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return (this.cols - unusedCols) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function () {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96\n");

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Outlayer v2.1.1\n * the brains and guts of a layout library\n * MIT license\n */\n\n( function( window, factory ) {\n  'use strict';\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(25),\n        __webpack_require__(61),\n        __webpack_require__(98),\n        __webpack_require__(99)\n      ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( EvEmitter, getSize, utils, Item ) {\n        return factory( window, EvEmitter, getSize, utils, Item);\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      window,\n      require('ev-emitter'),\n      require('get-size'),\n      require('fizzy-ui-utils'),\n      require('./item')\n    );\n  } else {\n    // browser global\n    window.Outlayer = factory(\n      window,\n      window.EvEmitter,\n      window.getSize,\n      window.fizzyUIUtils,\n      window.Outlayer.Item\n    );\n  }\n\n}( window, function factory( window, EvEmitter, getSize, utils, Item ) {\n'use strict';\n\n// ----- vars ----- //\n\nvar console = window.console;\nvar jQuery = window.jQuery;\nvar noop = function() {};\n\n// -------------------------- Outlayer -------------------------- //\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Outlayer intances\nvar instances = {};\n\n\n/**\n * @param {Element, String} element\n * @param {Object} options\n * @constructor\n */\nfunction Outlayer( element, options ) {\n  var queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) {\n      console.error( 'Bad element for ' + this.constructor.namespace +\n        ': ' + ( queryElement || element ) );\n    }\n    return;\n  }\n  this.element = queryElement;\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n\n  // options\n  this.options = utils.extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  // add id for Outlayer.getFromElement\n  var id = ++GUID;\n  this.element.outlayerGUID = id; // expando\n  instances[ id ] = this; // associate via id\n\n  // kick it off\n  this._create();\n\n  var isInitLayout = this._getOption('initLayout');\n  if ( isInitLayout ) {\n    this.layout();\n  }\n}\n\n// settings are for internal use only\nOutlayer.namespace = 'outlayer';\nOutlayer.Item = Item;\n\n// default options\nOutlayer.defaults = {\n  containerStyle: {\n    position: 'relative'\n  },\n  initLayout: true,\n  originLeft: true,\n  originTop: true,\n  resize: true,\n  resizeContainer: true,\n  // item options\n  transitionDuration: '0.4s',\n  hiddenStyle: {\n    opacity: 0,\n    transform: 'scale(0.001)'\n  },\n  visibleStyle: {\n    opacity: 1,\n    transform: 'scale(1)'\n  }\n};\n\nvar proto = Outlayer.prototype;\n// inherit EvEmitter\nutils.extend( proto, EvEmitter.prototype );\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  utils.extend( this.options, opts );\n};\n\n/**\n * get backwards compatible option value, check old name\n */\nproto._getOption = function( option ) {\n  var oldOption = this.constructor.compatOptions[ option ];\n  return oldOption && this.options[ oldOption ] !== undefined ?\n    this.options[ oldOption ] : this.options[ option ];\n};\n\nOutlayer.compatOptions = {\n  // currentName: oldName\n  initLayout: 'isInitLayout',\n  horizontal: 'isHorizontal',\n  layoutInstant: 'isLayoutInstant',\n  originLeft: 'isOriginLeft',\n  originTop: 'isOriginTop',\n  resize: 'isResizeBound',\n  resizeContainer: 'isResizingContainer'\n};\n\nproto._create = function() {\n  // get items from children\n  this.reloadItems();\n  // elements that affect layout, but are not laid out\n  this.stamps = [];\n  this.stamp( this.options.stamp );\n  // set container style\n  utils.extend( this.element.style, this.options.containerStyle );\n\n  // bind resize method\n  var canBindResize = this._getOption('resize');\n  if ( canBindResize ) {\n    this.bindResize();\n  }\n};\n\n// goes through all children again and gets bricks in proper order\nproto.reloadItems = function() {\n  // collection of item elements\n  this.items = this._itemize( this.element.children );\n};\n\n\n/**\n * turn elements into Outlayer.Items to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Outlayer Items\n */\nproto._itemize = function( elems ) {\n\n  var itemElems = this._filterFindItemElements( elems );\n  var Item = this.constructor.Item;\n\n  // create new Outlayer Items for collection\n  var items = [];\n  for ( var i=0; i < itemElems.length; i++ ) {\n    var elem = itemElems[i];\n    var item = new Item( elem, this );\n    items.push( item );\n  }\n\n  return items;\n};\n\n/**\n * get item elements to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - item elements\n */\nproto._filterFindItemElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.itemSelector );\n};\n\n/**\n * getter method for getting item elements\n * @returns {Array} elems - collection of item elements\n */\nproto.getItemElements = function() {\n  return this.items.map( function( item ) {\n    return item.element;\n  });\n};\n\n// ----- init & layout ----- //\n\n/**\n * lays out all items\n */\nproto.layout = function() {\n  this._resetLayout();\n  this._manageStamps();\n\n  // don't animate first layout\n  var layoutInstant = this._getOption('layoutInstant');\n  var isInstant = layoutInstant !== undefined ?\n    layoutInstant : !this._isLayoutInited;\n  this.layoutItems( this.items, isInstant );\n\n  // flag for initalized\n  this._isLayoutInited = true;\n};\n\n// _init is alias for layout\nproto._init = proto.layout;\n\n/**\n * logic before any new layout\n */\nproto._resetLayout = function() {\n  this.getSize();\n};\n\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * get measurement from option, for columnWidth, rowHeight, gutter\n * if option is String -> get element from selector string, & get size of element\n * if option is Element -> get size of element\n * else use option as a number\n *\n * @param {String} measurement\n * @param {String} size - width or height\n * @private\n */\nproto._getMeasurement = function( measurement, size ) {\n  var option = this.options[ measurement ];\n  var elem;\n  if ( !option ) {\n    // default to 0\n    this[ measurement ] = 0;\n  } else {\n    // use option as an element\n    if ( typeof option == 'string' ) {\n      elem = this.element.querySelector( option );\n    } else if ( option instanceof HTMLElement ) {\n      elem = option;\n    }\n    // use size of element, if element\n    this[ measurement ] = elem ? getSize( elem )[ size ] : option;\n  }\n};\n\n/**\n * layout a collection of item elements\n * @api public\n */\nproto.layoutItems = function( items, isInstant ) {\n  items = this._getItemsForLayout( items );\n\n  this._layoutItems( items, isInstant );\n\n  this._postLayout();\n};\n\n/**\n * get the items to be laid out\n * you may want to skip over some items\n * @param {Array} items\n * @returns {Array} items\n */\nproto._getItemsForLayout = function( items ) {\n  return items.filter( function( item ) {\n    return !item.isIgnored;\n  });\n};\n\n/**\n * layout items\n * @param {Array} items\n * @param {Boolean} isInstant\n */\nproto._layoutItems = function( items, isInstant ) {\n  this._emitCompleteOnItems( 'layout', items );\n\n  if ( !items || !items.length ) {\n    // no items, emit event with empty array\n    return;\n  }\n\n  var queue = [];\n\n  items.forEach( function( item ) {\n    // get x/y object from method\n    var position = this._getItemLayoutPosition( item );\n    // enqueue\n    position.item = item;\n    position.isInstant = isInstant || item.isLayoutInstant;\n    queue.push( position );\n  }, this );\n\n  this._processLayoutQueue( queue );\n};\n\n/**\n * get item layout position\n * @param {Outlayer.Item} item\n * @returns {Object} x and y position\n */\nproto._getItemLayoutPosition = function( /* item */ ) {\n  return {\n    x: 0,\n    y: 0\n  };\n};\n\n/**\n * iterate over array and position each item\n * Reason being - separating this logic prevents 'layout invalidation'\n * thx @paul_irish\n * @param {Array} queue\n */\nproto._processLayoutQueue = function( queue ) {\n  this.updateStagger();\n  queue.forEach( function( obj, i ) {\n    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );\n  }, this );\n};\n\n// set stagger from option in milliseconds number\nproto.updateStagger = function() {\n  var stagger = this.options.stagger;\n  if ( stagger === null || stagger === undefined ) {\n    this.stagger = 0;\n    return;\n  }\n  this.stagger = getMilliseconds( stagger );\n  return this.stagger;\n};\n\n/**\n * Sets position of item in DOM\n * @param {Outlayer.Item} item\n * @param {Number} x - horizontal position\n * @param {Number} y - vertical position\n * @param {Boolean} isInstant - disables transitions\n */\nproto._positionItem = function( item, x, y, isInstant, i ) {\n  if ( isInstant ) {\n    // if not transition, just set CSS\n    item.goTo( x, y );\n  } else {\n    item.stagger( i * this.stagger );\n    item.moveTo( x, y );\n  }\n};\n\n/**\n * Any logic you want to do after each layout,\n * i.e. size the container\n */\nproto._postLayout = function() {\n  this.resizeContainer();\n};\n\nproto.resizeContainer = function() {\n  var isResizingContainer = this._getOption('resizeContainer');\n  if ( !isResizingContainer ) {\n    return;\n  }\n  var size = this._getContainerSize();\n  if ( size ) {\n    this._setContainerMeasure( size.width, true );\n    this._setContainerMeasure( size.height, false );\n  }\n};\n\n/**\n * Sets width or height of container if returned\n * @returns {Object} size\n *   @param {Number} width\n *   @param {Number} height\n */\nproto._getContainerSize = noop;\n\n/**\n * @param {Number} measure - size of width or height\n * @param {Boolean} isWidth\n */\nproto._setContainerMeasure = function( measure, isWidth ) {\n  if ( measure === undefined ) {\n    return;\n  }\n\n  var elemSize = this.size;\n  // add padding and border width if border box\n  if ( elemSize.isBorderBox ) {\n    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +\n      elemSize.borderLeftWidth + elemSize.borderRightWidth :\n      elemSize.paddingBottom + elemSize.paddingTop +\n      elemSize.borderTopWidth + elemSize.borderBottomWidth;\n  }\n\n  measure = Math.max( measure, 0 );\n  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';\n};\n\n/**\n * emit eventComplete on a collection of items events\n * @param {String} eventName\n * @param {Array} items - Outlayer.Items\n */\nproto._emitCompleteOnItems = function( eventName, items ) {\n  var _this = this;\n  function onComplete() {\n    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );\n  }\n\n  var count = items.length;\n  if ( !items || !count ) {\n    onComplete();\n    return;\n  }\n\n  var doneCount = 0;\n  function tick() {\n    doneCount++;\n    if ( doneCount == count ) {\n      onComplete();\n    }\n  }\n\n  // bind callback\n  items.forEach( function( item ) {\n    item.once( eventName, tick );\n  });\n};\n\n/**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  // add original event to arguments\n  var emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery ) {\n    // set this.$element\n    this.$element = this.$element || jQuery( this.element );\n    if ( event ) {\n      // create jQuery event\n      var $event = jQuery.Event( event );\n      $event.type = type;\n      this.$element.trigger( $event, args );\n    } else {\n      // just trigger with type if no event available\n      this.$element.trigger( type, args );\n    }\n  }\n};\n\n// -------------------------- ignore & stamps -------------------------- //\n\n\n/**\n * keep item in collection, but do not lay it out\n * ignored items do not get skipped in layout\n * @param {Element} elem\n */\nproto.ignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    item.isIgnored = true;\n  }\n};\n\n/**\n * return item to layout collection\n * @param {Element} elem\n */\nproto.unignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    delete item.isIgnored;\n  }\n};\n\n/**\n * adds elements to stamps\n * @param {NodeList, Array, Element, or String} elems\n */\nproto.stamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ) {\n    return;\n  }\n\n  this.stamps = this.stamps.concat( elems );\n  // ignore\n  elems.forEach( this.ignore, this );\n};\n\n/**\n * removes elements to stamps\n * @param {NodeList, Array, or Element} elems\n */\nproto.unstamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ){\n    return;\n  }\n\n  elems.forEach( function( elem ) {\n    // filter out removed stamp elements\n    utils.removeFrom( this.stamps, elem );\n    this.unignore( elem );\n  }, this );\n};\n\n/**\n * finds child elements\n * @param {NodeList, Array, Element, or String} elems\n * @returns {Array} elems\n */\nproto._find = function( elems ) {\n  if ( !elems ) {\n    return;\n  }\n  // if string, use argument as selector string\n  if ( typeof elems == 'string' ) {\n    elems = this.element.querySelectorAll( elems );\n  }\n  elems = utils.makeArray( elems );\n  return elems;\n};\n\nproto._manageStamps = function() {\n  if ( !this.stamps || !this.stamps.length ) {\n    return;\n  }\n\n  this._getBoundingRect();\n\n  this.stamps.forEach( this._manageStamp, this );\n};\n\n// update boundingLeft / Top\nproto._getBoundingRect = function() {\n  // get bounding rect for container element\n  var boundingRect = this.element.getBoundingClientRect();\n  var size = this.size;\n  this._boundingRect = {\n    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n    top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),\n    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )\n  };\n};\n\n/**\n * @param {Element} stamp\n**/\nproto._manageStamp = noop;\n\n/**\n * get x/y position of element relative to container element\n * @param {Element} elem\n * @returns {Object} offset - has left, top, right, bottom\n */\nproto._getElementOffset = function( elem ) {\n  var boundingRect = elem.getBoundingClientRect();\n  var thisRect = this._boundingRect;\n  var size = getSize( elem );\n  var offset = {\n    left: boundingRect.left - thisRect.left - size.marginLeft,\n    top: boundingRect.top - thisRect.top - size.marginTop,\n    right: thisRect.right - boundingRect.right - size.marginRight,\n    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n  };\n  return offset;\n};\n\n// -------------------------- resize -------------------------- //\n\n// enable event handlers for listeners\n// i.e. resize -> onresize\nproto.handleEvent = utils.handleEvent;\n\n/**\n * Bind layout to window resizing\n */\nproto.bindResize = function() {\n  window.addEventListener( 'resize', this );\n  this.isResizeBound = true;\n};\n\n/**\n * Unbind layout to window resizing\n */\nproto.unbindResize = function() {\n  window.removeEventListener( 'resize', this );\n  this.isResizeBound = false;\n};\n\nproto.onresize = function() {\n  this.resize();\n};\n\nutils.debounceMethod( Outlayer, 'onresize', 100 );\n\nproto.resize = function() {\n  // don't trigger if size did not change\n  // or if resize was unbound. See #9\n  if ( !this.isResizeBound || !this.needsResizeLayout() ) {\n    return;\n  }\n\n  this.layout();\n};\n\n/**\n * check if layout is needed post layout\n * @returns Boolean\n */\nproto.needsResizeLayout = function() {\n  var size = getSize( this.element );\n  // check that this.size and size are there\n  // IE8 triggers resize on body size change, so they might not be\n  var hasSizes = this.size && size;\n  return hasSizes && size.innerWidth !== this.size.innerWidth;\n};\n\n// -------------------------- methods -------------------------- //\n\n/**\n * add items to Outlayer instance\n * @param {Array or NodeList or Element} elems\n * @returns {Array} items - Outlayer.Items\n**/\nproto.addItems = function( elems ) {\n  var items = this._itemize( elems );\n  // add items to collection\n  if ( items.length ) {\n    this.items = this.items.concat( items );\n  }\n  return items;\n};\n\n/**\n * Layout newly-appended item elements\n * @param {Array or NodeList or Element} elems\n */\nproto.appended = function( elems ) {\n  var items = this.addItems( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // layout and reveal just the new items\n  this.layoutItems( items, true );\n  this.reveal( items );\n};\n\n/**\n * Layout prepended elements\n * @param {Array or NodeList or Element} elems\n */\nproto.prepended = function( elems ) {\n  var items = this._itemize( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // add items to beginning of collection\n  var previousItems = this.items.slice(0);\n  this.items = items.concat( previousItems );\n  // start new layout\n  this._resetLayout();\n  this._manageStamps();\n  // layout new stuff without transition\n  this.layoutItems( items, true );\n  this.reveal( items );\n  // layout previous items\n  this.layoutItems( previousItems );\n};\n\n/**\n * reveal a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.reveal = function( items ) {\n  this._emitCompleteOnItems( 'reveal', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.reveal();\n  });\n};\n\n/**\n * hide a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.hide = function( items ) {\n  this._emitCompleteOnItems( 'hide', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.hide();\n  });\n};\n\n/**\n * reveal item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.revealItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.reveal( items );\n};\n\n/**\n * hide item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.hideItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.hide( items );\n};\n\n/**\n * get Outlayer.Item, given an Element\n * @param {Element} elem\n * @param {Function} callback\n * @returns {Outlayer.Item} item\n */\nproto.getItem = function( elem ) {\n  // loop through items to get the one that matches\n  for ( var i=0; i < this.items.length; i++ ) {\n    var item = this.items[i];\n    if ( item.element == elem ) {\n      // return item\n      return item;\n    }\n  }\n};\n\n/**\n * get collection of Outlayer.Items, given Elements\n * @param {Array} elems\n * @returns {Array} items - Outlayer.Items\n */\nproto.getItems = function( elems ) {\n  elems = utils.makeArray( elems );\n  var items = [];\n  elems.forEach( function( elem ) {\n    var item = this.getItem( elem );\n    if ( item ) {\n      items.push( item );\n    }\n  }, this );\n\n  return items;\n};\n\n/**\n * remove element(s) from instance and DOM\n * @param {Array or NodeList or Element} elems\n */\nproto.remove = function( elems ) {\n  var removeItems = this.getItems( elems );\n\n  this._emitCompleteOnItems( 'remove', removeItems );\n\n  // bail if no items to remove\n  if ( !removeItems || !removeItems.length ) {\n    return;\n  }\n\n  removeItems.forEach( function( item ) {\n    item.remove();\n    // remove item from collection\n    utils.removeFrom( this.items, item );\n  }, this );\n};\n\n// ----- destroy ----- //\n\n// remove and disable Outlayer instance\nproto.destroy = function() {\n  // clean up dynamic styles\n  var style = this.element.style;\n  style.height = '';\n  style.position = '';\n  style.width = '';\n  // destroy items\n  this.items.forEach( function( item ) {\n    item.destroy();\n  });\n\n  this.unbindResize();\n\n  var id = this.element.outlayerGUID;\n  delete instances[ id ]; // remove reference to instance by id\n  delete this.element.outlayerGUID;\n  // remove data for jQuery\n  if ( jQuery ) {\n    jQuery.removeData( this.element, this.constructor.namespace );\n  }\n\n};\n\n// -------------------------- data -------------------------- //\n\n/**\n * get Outlayer instance from element\n * @param {Element} elem\n * @returns {Outlayer}\n */\nOutlayer.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  var id = elem && elem.outlayerGUID;\n  return id && instances[ id ];\n};\n\n\n// -------------------------- create Outlayer class -------------------------- //\n\n/**\n * create a layout class\n * @param {String} namespace\n */\nOutlayer.create = function( namespace, options ) {\n  // sub-class Outlayer\n  var Layout = subclass( Outlayer );\n  // apply new options and compatOptions\n  Layout.defaults = utils.extend( {}, Outlayer.defaults );\n  utils.extend( Layout.defaults, options );\n  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );\n\n  Layout.namespace = namespace;\n\n  Layout.data = Outlayer.data;\n\n  // sub-class Item\n  Layout.Item = subclass( Item );\n\n  // -------------------------- declarative -------------------------- //\n\n  utils.htmlInit( Layout, namespace );\n\n  // -------------------------- jQuery bridge -------------------------- //\n\n  // make into jQuery plugin\n  if ( jQuery && jQuery.bridget ) {\n    jQuery.bridget( namespace, Layout );\n  }\n\n  return Layout;\n};\n\nfunction subclass( Parent ) {\n  function SubClass() {\n    Parent.apply( this, arguments );\n  }\n\n  SubClass.prototype = Object.create( Parent.prototype );\n  SubClass.prototype.constructor = SubClass;\n\n  return SubClass;\n}\n\n// ----- helpers ----- //\n\n// how many milliseconds are in each unit\nvar msUnits = {\n  ms: 1,\n  s: 1000\n};\n\n// munge time-like parameter into millisecond number\n// '0.4s' -> 40\nfunction getMilliseconds( time ) {\n  if ( typeof time == 'number' ) {\n    return time;\n  }\n  var matches = time.match( /(^\\d*\\.?\\d*)(\\w*)/ );\n  var num = matches && matches[1];\n  var unit = matches && matches[2];\n  if ( !num.length ) {\n    return 0;\n  }\n  num = parseFloat( num );\n  var mult = msUnits[ unit ] || 1;\n  return num * mult;\n}\n\n// ----- fin ----- //\n\n// back in global\nOutlayer.Item = Item;\n\nreturn Outlayer;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97\n");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(60)\n    ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( matchesSelector ) {\n      return factory( window, matchesSelector );\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('desandro-matches-selector')\n    );\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(\n      window,\n      window.matchesSelector\n    );\n  }\n\n}( window, function factory( window, matchesSelector ) {\n\n'use strict';\n\nvar utils = {};\n\n// ----- extend ----- //\n\n// extends objects\nutils.extend = function( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n};\n\n// ----- modulo ----- //\n\nutils.modulo = function( num, div ) {\n  return ( ( num % div ) + div ) % div;\n};\n\n// ----- makeArray ----- //\n\nvar arraySlice = Array.prototype.slice;\n\n// turn element or nodeList into an array\nutils.makeArray = function( obj ) {\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    return obj;\n  }\n  // return empty array if undefined or null. #6\n  if ( obj === null || obj === undefined ) {\n    return [];\n  }\n\n  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n  if ( isArrayLike ) {\n    // convert nodeList to array\n    return arraySlice.call( obj );\n  }\n\n  // array of single index\n  return [ obj ];\n};\n\n// ----- removeFrom ----- //\n\nutils.removeFrom = function( ary, obj ) {\n  var index = ary.indexOf( obj );\n  if ( index != -1 ) {\n    ary.splice( index, 1 );\n  }\n};\n\n// ----- getParent ----- //\n\nutils.getParent = function( elem, selector ) {\n  while ( elem.parentNode && elem != document.body ) {\n    elem = elem.parentNode;\n    if ( matchesSelector( elem, selector ) ) {\n      return elem;\n    }\n  }\n};\n\n// ----- getQueryElement ----- //\n\n// use element as selector string\nutils.getQueryElement = function( elem ) {\n  if ( typeof elem == 'string' ) {\n    return document.querySelector( elem );\n  }\n  return elem;\n};\n\n// ----- handleEvent ----- //\n\n// enable .ontype to trigger from .addEventListener( elem, 'type' )\nutils.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// ----- filterFindElements ----- //\n\nutils.filterFindElements = function( elems, selector ) {\n  // make array of elems\n  elems = utils.makeArray( elems );\n  var ffElems = [];\n\n  elems.forEach( function( elem ) {\n    // check that elem is an actual element\n    if ( !( elem instanceof HTMLElement ) ) {\n      return;\n    }\n    // add elem if no selector\n    if ( !selector ) {\n      ffElems.push( elem );\n      return;\n    }\n    // filter & find items if we have a selector\n    // filter\n    if ( matchesSelector( elem, selector ) ) {\n      ffElems.push( elem );\n    }\n    // find children\n    var childElems = elem.querySelectorAll( selector );\n    // concat childElems to filterFound array\n    for ( var i=0; i < childElems.length; i++ ) {\n      ffElems.push( childElems[i] );\n    }\n  });\n\n  return ffElems;\n};\n\n// ----- debounceMethod ----- //\n\nutils.debounceMethod = function( _class, methodName, threshold ) {\n  threshold = threshold || 100;\n  // original method\n  var method = _class.prototype[ methodName ];\n  var timeoutName = methodName + 'Timeout';\n\n  _class.prototype[ methodName ] = function() {\n    var timeout = this[ timeoutName ];\n    clearTimeout( timeout );\n\n    var args = arguments;\n    var _this = this;\n    this[ timeoutName ] = setTimeout( function() {\n      method.apply( _this, args );\n      delete _this[ timeoutName ];\n    }, threshold );\n  };\n};\n\n// ----- docReady ----- //\n\nutils.docReady = function( callback ) {\n  var readyState = document.readyState;\n  if ( readyState == 'complete' || readyState == 'interactive' ) {\n    // do async to allow for other scripts to run. metafizzy/flickity#441\n    setTimeout( callback );\n  } else {\n    document.addEventListener( 'DOMContentLoaded', callback );\n  }\n};\n\n// ----- htmlInit ----- //\n\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nutils.toDashed = function( str ) {\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {\n    return $1 + '-' + $2;\n  }).toLowerCase();\n};\n\nvar console = window.console;\n/**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */\nutils.htmlInit = function( WidgetClass, namespace ) {\n  utils.docReady( function() {\n    var dashedNamespace = utils.toDashed( namespace );\n    var dataAttr = 'data-' + dashedNamespace;\n    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );\n    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );\n    var elems = utils.makeArray( dataAttrElems )\n      .concat( utils.makeArray( jsDashElems ) );\n    var dataOptionsAttr = dataAttr + '-options';\n    var jQuery = window.jQuery;\n\n    elems.forEach( function( elem ) {\n      var attr = elem.getAttribute( dataAttr ) ||\n        elem.getAttribute( dataOptionsAttr );\n      var options;\n      try {\n        options = attr && JSON.parse( attr );\n      } catch ( error ) {\n        // log error, do not initialize\n        if ( console ) {\n          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +\n          ': ' + error );\n        }\n        return;\n      }\n      // initialize\n      var instance = new WidgetClass( elem, options );\n      // make available via $().data('namespace')\n      if ( jQuery ) {\n        jQuery.data( elem, namespace, instance );\n      }\n    });\n\n  });\n};\n\n// -----  ----- //\n\nreturn utils;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98\n");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Outlayer Item\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(25),\n        __webpack_require__(61)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      require('ev-emitter'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Outlayer = {};\n    window.Outlayer.Item = factory(\n      window.EvEmitter,\n      window.getSize\n    );\n  }\n\n}( window, function factory( EvEmitter, getSize ) {\n'use strict';\n\n// ----- helpers ----- //\n\nfunction isEmptyObj( obj ) {\n  for ( var prop in obj ) {\n    return false;\n  }\n  prop = null;\n  return true;\n}\n\n// -------------------------- CSS3 support -------------------------- //\n\n\nvar docElemStyle = document.documentElement.style;\n\nvar transitionProperty = typeof docElemStyle.transition == 'string' ?\n  'transition' : 'WebkitTransition';\nvar transformProperty = typeof docElemStyle.transform == 'string' ?\n  'transform' : 'WebkitTransform';\n\nvar transitionEndEvent = {\n  WebkitTransition: 'webkitTransitionEnd',\n  transition: 'transitionend'\n}[ transitionProperty ];\n\n// cache all vendor properties that could have vendor prefix\nvar vendorProperties = {\n  transform: transformProperty,\n  transition: transitionProperty,\n  transitionDuration: transitionProperty + 'Duration',\n  transitionProperty: transitionProperty + 'Property',\n  transitionDelay: transitionProperty + 'Delay'\n};\n\n// -------------------------- Item -------------------------- //\n\nfunction Item( element, layout ) {\n  if ( !element ) {\n    return;\n  }\n\n  this.element = element;\n  // parent layout class, i.e. Masonry, Isotope, or Packery\n  this.layout = layout;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n\n  this._create();\n}\n\n// inherit EvEmitter\nvar proto = Item.prototype = Object.create( EvEmitter.prototype );\nproto.constructor = Item;\n\nproto._create = function() {\n  // transition objects\n  this._transn = {\n    ingProperties: {},\n    clean: {},\n    onEnd: {}\n  };\n\n  this.css({\n    position: 'absolute'\n  });\n};\n\n// trigger specified handler for event type\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * apply CSS styles to element\n * @param {Object} style\n */\nproto.css = function( style ) {\n  var elemStyle = this.element.style;\n\n  for ( var prop in style ) {\n    // use vendor property if available\n    var supportedProp = vendorProperties[ prop ] || prop;\n    elemStyle[ supportedProp ] = style[ prop ];\n  }\n};\n\n // measure position, and sets it\nproto.getPosition = function() {\n  var style = getComputedStyle( this.element );\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  var xValue = style[ isOriginLeft ? 'left' : 'right' ];\n  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];\n  var x = parseFloat( xValue );\n  var y = parseFloat( yValue );\n  // convert percent to pixels\n  var layoutSize = this.layout.size;\n  if ( xValue.indexOf('%') != -1 ) {\n    x = ( x / 100 ) * layoutSize.width;\n  }\n  if ( yValue.indexOf('%') != -1 ) {\n    y = ( y / 100 ) * layoutSize.height;\n  }\n  // clean up 'auto' or other non-integer values\n  x = isNaN( x ) ? 0 : x;\n  y = isNaN( y ) ? 0 : y;\n  // remove padding from measurement\n  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n  this.position.x = x;\n  this.position.y = y;\n};\n\n// set settled position, apply padding\nproto.layoutPosition = function() {\n  var layoutSize = this.layout.size;\n  var style = {};\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n\n  // x\n  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n  var xProperty = isOriginLeft ? 'left' : 'right';\n  var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n  var x = this.position.x + layoutSize[ xPadding ];\n  // set in percentage or pixels\n  style[ xProperty ] = this.getXValue( x );\n  // reset other property\n  style[ xResetProperty ] = '';\n\n  // y\n  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n  var yProperty = isOriginTop ? 'top' : 'bottom';\n  var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n  var y = this.position.y + layoutSize[ yPadding ];\n  // set in percentage or pixels\n  style[ yProperty ] = this.getYValue( y );\n  // reset other property\n  style[ yResetProperty ] = '';\n\n  this.css( style );\n  this.emitEvent( 'layout', [ this ] );\n};\n\nproto.getXValue = function( x ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && !isHorizontal ?\n    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';\n};\n\nproto.getYValue = function( y ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && isHorizontal ?\n    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';\n};\n\nproto._transitionTo = function( x, y ) {\n  this.getPosition();\n  // get current x & y from top/left\n  var curX = this.position.x;\n  var curY = this.position.y;\n\n  var didNotMove = x == this.position.x && y == this.position.y;\n\n  // save end position\n  this.setPosition( x, y );\n\n  // if did not move and not transitioning, just go to layout\n  if ( didNotMove && !this.isTransitioning ) {\n    this.layoutPosition();\n    return;\n  }\n\n  var transX = x - curX;\n  var transY = y - curY;\n  var transitionStyle = {};\n  transitionStyle.transform = this.getTranslate( transX, transY );\n\n  this.transition({\n    to: transitionStyle,\n    onTransitionEnd: {\n      transform: this.layoutPosition\n    },\n    isCleaning: true\n  });\n};\n\nproto.getTranslate = function( x, y ) {\n  // flip cooridinates if origin on right or bottom\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  x = isOriginLeft ? x : -x;\n  y = isOriginTop ? y : -y;\n  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n};\n\n// non transition + transform support\nproto.goTo = function( x, y ) {\n  this.setPosition( x, y );\n  this.layoutPosition();\n};\n\nproto.moveTo = proto._transitionTo;\n\nproto.setPosition = function( x, y ) {\n  this.position.x = parseFloat( x );\n  this.position.y = parseFloat( y );\n};\n\n// ----- transition ----- //\n\n/**\n * @param {Object} style - CSS\n * @param {Function} onTransitionEnd\n */\n\n// non transition, just trigger callback\nproto._nonTransition = function( args ) {\n  this.css( args.to );\n  if ( args.isCleaning ) {\n    this._removeStyles( args.to );\n  }\n  for ( var prop in args.onTransitionEnd ) {\n    args.onTransitionEnd[ prop ].call( this );\n  }\n};\n\n/**\n * proper transition\n * @param {Object} args - arguments\n *   @param {Object} to - style to transition to\n *   @param {Object} from - style to start transition from\n *   @param {Boolean} isCleaning - removes transition styles after transition\n *   @param {Function} onTransitionEnd - callback\n */\nproto.transition = function( args ) {\n  // redirect to nonTransition if no transition duration\n  if ( !parseFloat( this.layout.options.transitionDuration ) ) {\n    this._nonTransition( args );\n    return;\n  }\n\n  var _transition = this._transn;\n  // keep track of onTransitionEnd callback by css property\n  for ( var prop in args.onTransitionEnd ) {\n    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];\n  }\n  // keep track of properties that are transitioning\n  for ( prop in args.to ) {\n    _transition.ingProperties[ prop ] = true;\n    // keep track of properties to clean up when transition is done\n    if ( args.isCleaning ) {\n      _transition.clean[ prop ] = true;\n    }\n  }\n\n  // set from styles\n  if ( args.from ) {\n    this.css( args.from );\n    // force redraw. http://blog.alexmaccaw.com/css-transitions\n    var h = this.element.offsetHeight;\n    // hack for JSHint to hush about unused var\n    h = null;\n  }\n  // enable transition\n  this.enableTransition( args.to );\n  // set styles that are transitioning\n  this.css( args.to );\n\n  this.isTransitioning = true;\n\n};\n\n// dash before all cap letters, including first for\n// WebkitTransform => -webkit-transform\nfunction toDashedAll( str ) {\n  return str.replace( /([A-Z])/g, function( $1 ) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nvar transitionProps = 'opacity,' + toDashedAll( transformProperty );\n\nproto.enableTransition = function(/* style */) {\n  // HACK changing transitionProperty during a transition\n  // will cause transition to jump\n  if ( this.isTransitioning ) {\n    return;\n  }\n\n  // make `transition: foo, bar, baz` from style object\n  // HACK un-comment this when enableTransition can work\n  // while a transition is happening\n  // var transitionValues = [];\n  // for ( var prop in style ) {\n  //   // dash-ify camelCased properties like WebkitTransition\n  //   prop = vendorProperties[ prop ] || prop;\n  //   transitionValues.push( toDashedAll( prop ) );\n  // }\n  // munge number to millisecond, to match stagger\n  var duration = this.layout.options.transitionDuration;\n  duration = typeof duration == 'number' ? duration + 'ms' : duration;\n  // enable transition styles\n  this.css({\n    transitionProperty: transitionProps,\n    transitionDuration: duration,\n    transitionDelay: this.staggerDelay || 0\n  });\n  // listen for transition end event\n  this.element.addEventListener( transitionEndEvent, this, false );\n};\n\n// ----- events ----- //\n\nproto.onwebkitTransitionEnd = function( event ) {\n  this.ontransitionend( event );\n};\n\nproto.onotransitionend = function( event ) {\n  this.ontransitionend( event );\n};\n\n// properties that I munge to make my life easier\nvar dashedVendorProperties = {\n  '-webkit-transform': 'transform'\n};\n\nproto.ontransitionend = function( event ) {\n  // disregard bubbled events from children\n  if ( event.target !== this.element ) {\n    return;\n  }\n  var _transition = this._transn;\n  // get property name of transitioned property, convert to prefix-free\n  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;\n\n  // remove property that has completed transitioning\n  delete _transition.ingProperties[ propertyName ];\n  // check if any properties are still transitioning\n  if ( isEmptyObj( _transition.ingProperties ) ) {\n    // all properties have completed transitioning\n    this.disableTransition();\n  }\n  // clean style\n  if ( propertyName in _transition.clean ) {\n    // clean up style\n    this.element.style[ event.propertyName ] = '';\n    delete _transition.clean[ propertyName ];\n  }\n  // trigger onTransitionEnd callback\n  if ( propertyName in _transition.onEnd ) {\n    var onTransitionEnd = _transition.onEnd[ propertyName ];\n    onTransitionEnd.call( this );\n    delete _transition.onEnd[ propertyName ];\n  }\n\n  this.emitEvent( 'transitionEnd', [ this ] );\n};\n\nproto.disableTransition = function() {\n  this.removeTransitionStyles();\n  this.element.removeEventListener( transitionEndEvent, this, false );\n  this.isTransitioning = false;\n};\n\n/**\n * removes style property from element\n * @param {Object} style\n**/\nproto._removeStyles = function( style ) {\n  // clean up transition styles\n  var cleanStyle = {};\n  for ( var prop in style ) {\n    cleanStyle[ prop ] = '';\n  }\n  this.css( cleanStyle );\n};\n\nvar cleanTransitionStyle = {\n  transitionProperty: '',\n  transitionDuration: '',\n  transitionDelay: ''\n};\n\nproto.removeTransitionStyles = function() {\n  // remove transition\n  this.css( cleanTransitionStyle );\n};\n\n// ----- stagger ----- //\n\nproto.stagger = function( delay ) {\n  delay = isNaN( delay ) ? 0 : delay;\n  this.staggerDelay = delay + 'ms';\n};\n\n// ----- show/hide/remove ----- //\n\n// remove element from DOM\nproto.removeElem = function() {\n  this.element.parentNode.removeChild( this.element );\n  // remove display: none\n  this.css({ display: '' });\n  this.emitEvent( 'remove', [ this ] );\n};\n\nproto.remove = function() {\n  // just remove element if no transition support or no transition\n  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {\n    this.removeElem();\n    return;\n  }\n\n  // start transition\n  this.once( 'transitionEnd', function() {\n    this.removeElem();\n  });\n  this.hide();\n};\n\nproto.reveal = function() {\n  delete this.isHidden;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;\n\n  this.transition({\n    from: options.hiddenStyle,\n    to: options.visibleStyle,\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onRevealTransitionEnd = function() {\n  // check if still visible\n  // during transition, item may have been hidden\n  if ( !this.isHidden ) {\n    this.emitEvent('reveal');\n  }\n};\n\n/**\n * get style property use for hide/reveal transition end\n * @param {String} styleProperty - hiddenStyle/visibleStyle\n * @returns {String}\n */\nproto.getHideRevealTransitionEndProperty = function( styleProperty ) {\n  var optionStyle = this.layout.options[ styleProperty ];\n  // use opacity\n  if ( optionStyle.opacity ) {\n    return 'opacity';\n  }\n  // get first property\n  for ( var prop in optionStyle ) {\n    return prop;\n  }\n};\n\nproto.hide = function() {\n  // set flag\n  this.isHidden = true;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;\n\n  this.transition({\n    from: options.visibleStyle,\n    to: options.hiddenStyle,\n    // keep hidden stuff hidden\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onHideTransitionEnd = function() {\n  // check if still hidden\n  // during transition, item may have been un-hidden\n  if ( this.isHidden ) {\n    this.css({ display: 'none' });\n    this.emitEvent('hide');\n  }\n};\n\nproto.destroy = function() {\n  this.css({\n    position: '',\n    left: '',\n    right: '',\n    top: '',\n    bottom: '',\n    transition: '',\n    transform: ''\n  });\n};\n\nreturn Item;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3V0bGF5ZXIvaXRlbS5qcz9kOTgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQXlDO0FBQ2hEO0FBQ0EsSUFBSSxpQ0FBUTtBQUNaLFFBQVEsdUJBQXVCO0FBQy9CLFFBQVEsdUJBQW1CO0FBQzNCLE9BQU8sb0NBQ0QsT0FBTztBQUFBO0FBQUE7QUFBQSxvR0FDUjtBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7O0FBRTFCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYzs7QUFFMUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUEsQ0FBQyIsImZpbGUiOiI5OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3V0bGF5ZXIgSXRlbVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5XG4gICAgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5PdXRsYXllciA9IHt9O1xuICAgIHdpbmRvdy5PdXRsYXllci5JdGVtID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBFdkVtaXR0ZXIsIGdldFNpemUgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tIGhlbHBlcnMgLS0tLS0gLy9cblxuZnVuY3Rpb24gaXNFbXB0eU9iaiggb2JqICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBvYmogKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHByb3AgPSBudWxsO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ1NTMyBzdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxudmFyIGRvY0VsZW1TdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtcblxudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHR5cGVvZiBkb2NFbGVtU3R5bGUudHJhbnNpdGlvbiA9PSAnc3RyaW5nJyA/XG4gICd0cmFuc2l0aW9uJyA6ICdXZWJraXRUcmFuc2l0aW9uJztcbnZhciB0cmFuc2Zvcm1Qcm9wZXJ0eSA9IHR5cGVvZiBkb2NFbGVtU3R5bGUudHJhbnNmb3JtID09ICdzdHJpbmcnID9cbiAgJ3RyYW5zZm9ybScgOiAnV2Via2l0VHJhbnNmb3JtJztcblxudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9IHtcbiAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xuXG4vLyBjYWNoZSBhbGwgdmVuZG9yIHByb3BlcnRpZXMgdGhhdCBjb3VsZCBoYXZlIHZlbmRvciBwcmVmaXhcbnZhciB2ZW5kb3JQcm9wZXJ0aWVzID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVByb3BlcnR5LFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0R1cmF0aW9uJyxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnUHJvcGVydHknLFxuICB0cmFuc2l0aW9uRGVsYXk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdEZWxheSdcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gSXRlbSggZWxlbWVudCwgbGF5b3V0ICkge1xuICBpZiAoICFlbGVtZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIC8vIHBhcmVudCBsYXlvdXQgY2xhc3MsIGkuZS4gTWFzb25yeSwgSXNvdG9wZSwgb3IgUGFja2VyeVxuICB0aGlzLmxheW91dCA9IGxheW91dDtcbiAgdGhpcy5wb3NpdGlvbiA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbnZhciBwcm90byA9IEl0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xucHJvdG8uY29uc3RydWN0b3IgPSBJdGVtO1xuXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHRyYW5zaXRpb24gb2JqZWN0c1xuICB0aGlzLl90cmFuc24gPSB7XG4gICAgaW5nUHJvcGVydGllczoge30sXG4gICAgY2xlYW46IHt9LFxuICAgIG9uRW5kOiB7fVxuICB9O1xuXG4gIHRoaXMuY3NzKHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICB9KTtcbn07XG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbnByb3RvLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG4vKipcbiAqIGFwcGx5IENTUyBzdHlsZXMgdG8gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKi9cbnByb3RvLmNzcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcbiAgdmFyIGVsZW1TdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcblxuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcbiAgICAvLyB1c2UgdmVuZG9yIHByb3BlcnR5IGlmIGF2YWlsYWJsZVxuICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XG4gICAgZWxlbVN0eWxlWyBzdXBwb3J0ZWRQcm9wIF0gPSBzdHlsZVsgcHJvcCBdO1xuICB9XG59O1xuXG4gLy8gbWVhc3VyZSBwb3NpdGlvbiwgYW5kIHNldHMgaXRcbnByb3RvLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoIHRoaXMuZWxlbWVudCApO1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcbiAgdmFyIHhWYWx1ZSA9IHN0eWxlWyBpc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnIF07XG4gIHZhciB5VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nIF07XG4gIHZhciB4ID0gcGFyc2VGbG9hdCggeFZhbHVlICk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdCggeVZhbHVlICk7XG4gIC8vIGNvbnZlcnQgcGVyY2VudCB0byBwaXhlbHNcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xuICBpZiAoIHhWYWx1ZS5pbmRleE9mKCclJykgIT0gLTEgKSB7XG4gICAgeCA9ICggeCAvIDEwMCApICogbGF5b3V0U2l6ZS53aWR0aDtcbiAgfVxuICBpZiAoIHlWYWx1ZS5pbmRleE9mKCclJykgIT0gLTEgKSB7XG4gICAgeSA9ICggeSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQ7XG4gIH1cbiAgLy8gY2xlYW4gdXAgJ2F1dG8nIG9yIG90aGVyIG5vbi1pbnRlZ2VyIHZhbHVlc1xuICB4ID0gaXNOYU4oIHggKSA/IDAgOiB4O1xuICB5ID0gaXNOYU4oIHkgKSA/IDAgOiB5O1xuICAvLyByZW1vdmUgcGFkZGluZyBmcm9tIG1lYXN1cmVtZW50XG4gIHggLT0gaXNPcmlnaW5MZWZ0ID8gbGF5b3V0U2l6ZS5wYWRkaW5nTGVmdCA6IGxheW91dFNpemUucGFkZGluZ1JpZ2h0O1xuICB5IC09IGlzT3JpZ2luVG9wID8gbGF5b3V0U2l6ZS5wYWRkaW5nVG9wIDogbGF5b3V0U2l6ZS5wYWRkaW5nQm90dG9tO1xuXG4gIHRoaXMucG9zaXRpb24ueCA9IHg7XG4gIHRoaXMucG9zaXRpb24ueSA9IHk7XG59O1xuXG4vLyBzZXQgc2V0dGxlZCBwb3NpdGlvbiwgYXBwbHkgcGFkZGluZ1xucHJvdG8ubGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xuICB2YXIgc3R5bGUgPSB7fTtcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG5cbiAgLy8geFxuICB2YXIgeFBhZGRpbmcgPSBpc09yaWdpbkxlZnQgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCc7XG4gIHZhciB4UHJvcGVydHkgPSBpc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB2YXIgeFJlc2V0UHJvcGVydHkgPSBpc09yaWdpbkxlZnQgPyAncmlnaHQnIDogJ2xlZnQnO1xuXG4gIHZhciB4ID0gdGhpcy5wb3NpdGlvbi54ICsgbGF5b3V0U2l6ZVsgeFBhZGRpbmcgXTtcbiAgLy8gc2V0IGluIHBlcmNlbnRhZ2Ugb3IgcGl4ZWxzXG4gIHN0eWxlWyB4UHJvcGVydHkgXSA9IHRoaXMuZ2V0WFZhbHVlKCB4ICk7XG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XG4gIHN0eWxlWyB4UmVzZXRQcm9wZXJ0eSBdID0gJyc7XG5cbiAgLy8geVxuICB2YXIgeVBhZGRpbmcgPSBpc09yaWdpblRvcCA/ICdwYWRkaW5nVG9wJyA6ICdwYWRkaW5nQm90dG9tJztcbiAgdmFyIHlQcm9wZXJ0eSA9IGlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHlSZXNldFByb3BlcnR5ID0gaXNPcmlnaW5Ub3AgPyAnYm90dG9tJyA6ICd0b3AnO1xuXG4gIHZhciB5ID0gdGhpcy5wb3NpdGlvbi55ICsgbGF5b3V0U2l6ZVsgeVBhZGRpbmcgXTtcbiAgLy8gc2V0IGluIHBlcmNlbnRhZ2Ugb3IgcGl4ZWxzXG4gIHN0eWxlWyB5UHJvcGVydHkgXSA9IHRoaXMuZ2V0WVZhbHVlKCB5ICk7XG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XG4gIHN0eWxlWyB5UmVzZXRQcm9wZXJ0eSBdID0gJyc7XG5cbiAgdGhpcy5jc3MoIHN0eWxlICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnbGF5b3V0JywgWyB0aGlzIF0gKTtcbn07XG5cbnByb3RvLmdldFhWYWx1ZSA9IGZ1bmN0aW9uKCB4ICkge1xuICB2YXIgaXNIb3Jpem9udGFsID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignaG9yaXpvbnRhbCcpO1xuICByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgIWlzSG9yaXpvbnRhbCA/XG4gICAgKCAoIHggLyB0aGlzLmxheW91dC5zaXplLndpZHRoICkgKiAxMDAgKSArICclJyA6IHggKyAncHgnO1xufTtcblxucHJvdG8uZ2V0WVZhbHVlID0gZnVuY3Rpb24oIHkgKSB7XG4gIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdob3Jpem9udGFsJyk7XG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiBpc0hvcml6b250YWwgP1xuICAgICggKCB5IC8gdGhpcy5sYXlvdXQuc2l6ZS5oZWlnaHQgKSAqIDEwMCApICsgJyUnIDogeSArICdweCc7XG59O1xuXG5wcm90by5fdHJhbnNpdGlvblRvID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxuICB2YXIgY3VyWCA9IHRoaXMucG9zaXRpb24ueDtcbiAgdmFyIGN1clkgPSB0aGlzLnBvc2l0aW9uLnk7XG5cbiAgdmFyIGRpZE5vdE1vdmUgPSB4ID09IHRoaXMucG9zaXRpb24ueCAmJiB5ID09IHRoaXMucG9zaXRpb24ueTtcblxuICAvLyBzYXZlIGVuZCBwb3NpdGlvblxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XG5cbiAgLy8gaWYgZGlkIG5vdCBtb3ZlIGFuZCBub3QgdHJhbnNpdGlvbmluZywganVzdCBnbyB0byBsYXlvdXRcbiAgaWYgKCBkaWROb3RNb3ZlICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcbiAgICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRyYW5zWCA9IHggLSBjdXJYO1xuICB2YXIgdHJhbnNZID0geSAtIGN1clk7XG4gIHZhciB0cmFuc2l0aW9uU3R5bGUgPSB7fTtcbiAgdHJhbnNpdGlvblN0eWxlLnRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNsYXRlKCB0cmFuc1gsIHRyYW5zWSApO1xuXG4gIHRoaXMudHJhbnNpdGlvbih7XG4gICAgdG86IHRyYW5zaXRpb25TdHlsZSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IHtcbiAgICAgIHRyYW5zZm9ybTogdGhpcy5sYXlvdXRQb3NpdGlvblxuICAgIH0sXG4gICAgaXNDbGVhbmluZzogdHJ1ZVxuICB9KTtcbn07XG5cbnByb3RvLmdldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICAvLyBmbGlwIGNvb3JpZGluYXRlcyBpZiBvcmlnaW4gb24gcmlnaHQgb3IgYm90dG9tXG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuICB4ID0gaXNPcmlnaW5MZWZ0ID8geCA6IC14O1xuICB5ID0gaXNPcmlnaW5Ub3AgPyB5IDogLXk7XG4gIHJldHVybiAndHJhbnNsYXRlM2QoJyArIHggKyAncHgsICcgKyB5ICsgJ3B4LCAwKSc7XG59O1xuXG4vLyBub24gdHJhbnNpdGlvbiArIHRyYW5zZm9ybSBzdXBwb3J0XG5wcm90by5nb1RvID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcbiAgdGhpcy5sYXlvdXRQb3NpdGlvbigpO1xufTtcblxucHJvdG8ubW92ZVRvID0gcHJvdG8uX3RyYW5zaXRpb25UbztcblxucHJvdG8uc2V0UG9zaXRpb24gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5wb3NpdGlvbi54ID0gcGFyc2VGbG9hdCggeCApO1xuICB0aGlzLnBvc2l0aW9uLnkgPSBwYXJzZUZsb2F0KCB5ICk7XG59O1xuXG4vLyAtLS0tLSB0cmFuc2l0aW9uIC0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIC0gQ1NTXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmRcbiAqL1xuXG4vLyBub24gdHJhbnNpdGlvbiwganVzdCB0cmlnZ2VyIGNhbGxiYWNrXG5wcm90by5fbm9uVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBhcmdzICkge1xuICB0aGlzLmNzcyggYXJncy50byApO1xuICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcbiAgICB0aGlzLl9yZW1vdmVTdHlsZXMoIGFyZ3MudG8gKTtcbiAgfVxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcbiAgICBhcmdzLm9uVHJhbnNpdGlvbkVuZFsgcHJvcCBdLmNhbGwoIHRoaXMgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwcm9wZXIgdHJhbnNpdGlvblxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBhcmd1bWVudHNcbiAqICAgQHBhcmFtIHtPYmplY3R9IHRvIC0gc3R5bGUgdG8gdHJhbnNpdGlvbiB0b1xuICogICBAcGFyYW0ge09iamVjdH0gZnJvbSAtIHN0eWxlIHRvIHN0YXJ0IHRyYW5zaXRpb24gZnJvbVxuICogICBAcGFyYW0ge0Jvb2xlYW59IGlzQ2xlYW5pbmcgLSByZW1vdmVzIHRyYW5zaXRpb24gc3R5bGVzIGFmdGVyIHRyYW5zaXRpb25cbiAqICAgQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kIC0gY2FsbGJhY2tcbiAqL1xucHJvdG8udHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBhcmdzICkge1xuICAvLyByZWRpcmVjdCB0byBub25UcmFuc2l0aW9uIGlmIG5vIHRyYW5zaXRpb24gZHVyYXRpb25cbiAgaWYgKCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcbiAgICB0aGlzLl9ub25UcmFuc2l0aW9uKCBhcmdzICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBrZWVwIHRyYWNrIG9mIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFjayBieSBjc3MgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gYXJncy5vblRyYW5zaXRpb25FbmQgKSB7XG4gICAgX3RyYW5zaXRpb24ub25FbmRbIHByb3AgXSA9IGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF07XG4gIH1cbiAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcbiAgZm9yICggcHJvcCBpbiBhcmdzLnRvICkge1xuICAgIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3AgXSA9IHRydWU7XG4gICAgLy8ga2VlcCB0cmFjayBvZiBwcm9wZXJ0aWVzIHRvIGNsZWFuIHVwIHdoZW4gdHJhbnNpdGlvbiBpcyBkb25lXG4gICAgaWYgKCBhcmdzLmlzQ2xlYW5pbmcgKSB7XG4gICAgICBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcCBdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgZnJvbSBzdHlsZXNcbiAgaWYgKCBhcmdzLmZyb20gKSB7XG4gICAgdGhpcy5jc3MoIGFyZ3MuZnJvbSApO1xuICAgIC8vIGZvcmNlIHJlZHJhdy4gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICAgdmFyIGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIC8vIGhhY2sgZm9yIEpTSGludCB0byBodXNoIGFib3V0IHVudXNlZCB2YXJcbiAgICBoID0gbnVsbDtcbiAgfVxuICAvLyBlbmFibGUgdHJhbnNpdGlvblxuICB0aGlzLmVuYWJsZVRyYW5zaXRpb24oIGFyZ3MudG8gKTtcbiAgLy8gc2V0IHN0eWxlcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG5cbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuXG59O1xuXG4vLyBkYXNoIGJlZm9yZSBhbGwgY2FwIGxldHRlcnMsIGluY2x1ZGluZyBmaXJzdCBmb3Jcbi8vIFdlYmtpdFRyYW5zZm9ybSA9PiAtd2Via2l0LXRyYW5zZm9ybVxuZnVuY3Rpb24gdG9EYXNoZWRBbGwoIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKFtBLVpdKS9nLCBmdW5jdGlvbiggJDEgKSB7XG4gICAgcmV0dXJuICctJyArICQxLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvblByb3BzID0gJ29wYWNpdHksJyArIHRvRGFzaGVkQWxsKCB0cmFuc2Zvcm1Qcm9wZXJ0eSApO1xuXG5wcm90by5lbmFibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oLyogc3R5bGUgKi8pIHtcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxuICAvLyB3aWxsIGNhdXNlIHRyYW5zaXRpb24gdG8ganVtcFxuICBpZiAoIHRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XG4gIC8vIEhBQ0sgdW4tY29tbWVudCB0aGlzIHdoZW4gZW5hYmxlVHJhbnNpdGlvbiBjYW4gd29ya1xuICAvLyB3aGlsZSBhIHRyYW5zaXRpb24gaXMgaGFwcGVuaW5nXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XG4gIC8vIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAvLyAgIC8vIGRhc2gtaWZ5IGNhbWVsQ2FzZWQgcHJvcGVydGllcyBsaWtlIFdlYmtpdFRyYW5zaXRpb25cbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XG4gIC8vICAgdHJhbnNpdGlvblZhbHVlcy5wdXNoKCB0b0Rhc2hlZEFsbCggcHJvcCApICk7XG4gIC8vIH1cbiAgLy8gbXVuZ2UgbnVtYmVyIHRvIG1pbGxpc2Vjb25kLCB0byBtYXRjaCBzdGFnZ2VyXG4gIHZhciBkdXJhdGlvbiA9IHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uO1xuICBkdXJhdGlvbiA9IHR5cGVvZiBkdXJhdGlvbiA9PSAnbnVtYmVyJyA/IGR1cmF0aW9uICsgJ21zJyA6IGR1cmF0aW9uO1xuICAvLyBlbmFibGUgdHJhbnNpdGlvbiBzdHlsZXNcbiAgdGhpcy5jc3Moe1xuICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJhbnNpdGlvblByb3BzLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZHVyYXRpb24sXG4gICAgdHJhbnNpdGlvbkRlbGF5OiB0aGlzLnN0YWdnZXJEZWxheSB8fCAwXG4gIH0pO1xuICAvLyBsaXN0ZW4gZm9yIHRyYW5zaXRpb24gZW5kIGV2ZW50XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxucHJvdG8ub253ZWJraXRUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcbn07XG5cbnByb3RvLm9ub3RyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xufTtcblxuLy8gcHJvcGVydGllcyB0aGF0IEkgbXVuZ2UgdG8gbWFrZSBteSBsaWZlIGVhc2llclxudmFyIGRhc2hlZFZlbmRvclByb3BlcnRpZXMgPSB7XG4gICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nXG59O1xuXG5wcm90by5vbnRyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIGRpc3JlZ2FyZCBidWJibGVkIGV2ZW50cyBmcm9tIGNoaWxkcmVuXG4gIGlmICggZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcbiAgLy8gZ2V0IHByb3BlcnR5IG5hbWUgb2YgdHJhbnNpdGlvbmVkIHByb3BlcnR5LCBjb252ZXJ0IHRvIHByZWZpeC1mcmVlXG4gIHZhciBwcm9wZXJ0eU5hbWUgPSBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzWyBldmVudC5wcm9wZXJ0eU5hbWUgXSB8fCBldmVudC5wcm9wZXJ0eU5hbWU7XG5cbiAgLy8gcmVtb3ZlIHByb3BlcnR5IHRoYXQgaGFzIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXG4gIGRlbGV0ZSBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzWyBwcm9wZXJ0eU5hbWUgXTtcbiAgLy8gY2hlY2sgaWYgYW55IHByb3BlcnRpZXMgYXJlIHN0aWxsIHRyYW5zaXRpb25pbmdcbiAgaWYgKCBpc0VtcHR5T2JqKCBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzICkgKSB7XG4gICAgLy8gYWxsIHByb3BlcnRpZXMgaGF2ZSBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xuICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb24oKTtcbiAgfVxuICAvLyBjbGVhbiBzdHlsZVxuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5jbGVhbiApIHtcbiAgICAvLyBjbGVhbiB1cCBzdHlsZVxuICAgIHRoaXMuZWxlbWVudC5zdHlsZVsgZXZlbnQucHJvcGVydHlOYW1lIF0gPSAnJztcbiAgICBkZWxldGUgX3RyYW5zaXRpb24uY2xlYW5bIHByb3BlcnR5TmFtZSBdO1xuICB9XG4gIC8vIHRyaWdnZXIgb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLm9uRW5kICkge1xuICAgIHZhciBvblRyYW5zaXRpb25FbmQgPSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XG4gICAgb25UcmFuc2l0aW9uRW5kLmNhbGwoIHRoaXMgKTtcbiAgICBkZWxldGUgX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xuICB9XG5cbiAgdGhpcy5lbWl0RXZlbnQoICd0cmFuc2l0aW9uRW5kJywgWyB0aGlzIF0gKTtcbn07XG5cbnByb3RvLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVtb3ZlVHJhbnNpdGlvblN0eWxlcygpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHJhbnNpdGlvbkVuZEV2ZW50LCB0aGlzLCBmYWxzZSApO1xuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiByZW1vdmVzIHN0eWxlIHByb3BlcnR5IGZyb20gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4qKi9cbnByb3RvLl9yZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiggc3R5bGUgKSB7XG4gIC8vIGNsZWFuIHVwIHRyYW5zaXRpb24gc3R5bGVzXG4gIHZhciBjbGVhblN0eWxlID0ge307XG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAgIGNsZWFuU3R5bGVbIHByb3AgXSA9ICcnO1xuICB9XG4gIHRoaXMuY3NzKCBjbGVhblN0eWxlICk7XG59O1xuXG52YXIgY2xlYW5UcmFuc2l0aW9uU3R5bGUgPSB7XG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogJycsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXG4gIHRyYW5zaXRpb25EZWxheTogJydcbn07XG5cbnByb3RvLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIHRyYW5zaXRpb25cbiAgdGhpcy5jc3MoIGNsZWFuVHJhbnNpdGlvblN0eWxlICk7XG59O1xuXG4vLyAtLS0tLSBzdGFnZ2VyIC0tLS0tIC8vXG5cbnByb3RvLnN0YWdnZXIgPSBmdW5jdGlvbiggZGVsYXkgKSB7XG4gIGRlbGF5ID0gaXNOYU4oIGRlbGF5ICkgPyAwIDogZGVsYXk7XG4gIHRoaXMuc3RhZ2dlckRlbGF5ID0gZGVsYXkgKyAnbXMnO1xufTtcblxuLy8gLS0tLS0gc2hvdy9oaWRlL3JlbW92ZSAtLS0tLSAvL1xuXG4vLyByZW1vdmUgZWxlbWVudCBmcm9tIERPTVxucHJvdG8ucmVtb3ZlRWxlbSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5lbGVtZW50ICk7XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncmVtb3ZlJywgWyB0aGlzIF0gKTtcbn07XG5cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBqdXN0IHJlbW92ZSBlbGVtZW50IGlmIG5vIHRyYW5zaXRpb24gc3VwcG9ydCBvciBubyB0cmFuc2l0aW9uXG4gIGlmICggIXRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcbiAgICB0aGlzLnJlbW92ZUVsZW0oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzdGFydCB0cmFuc2l0aW9uXG4gIHRoaXMub25jZSggJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUVsZW0oKTtcbiAgfSk7XG4gIHRoaXMuaGlkZSgpO1xufTtcblxucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLmlzSGlkZGVuO1xuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcblxuICB2YXIgb25UcmFuc2l0aW9uRW5kID0ge307XG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ3Zpc2libGVTdHlsZScpO1xuICBvblRyYW5zaXRpb25FbmRbIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSBdID0gdGhpcy5vblJldmVhbFRyYW5zaXRpb25FbmQ7XG5cbiAgdGhpcy50cmFuc2l0aW9uKHtcbiAgICBmcm9tOiBvcHRpb25zLmhpZGRlblN0eWxlLFxuICAgIHRvOiBvcHRpb25zLnZpc2libGVTdHlsZSxcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxuICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXG4gIH0pO1xufTtcblxucHJvdG8ub25SZXZlYWxUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGlmIHN0aWxsIHZpc2libGVcbiAgLy8gZHVyaW5nIHRyYW5zaXRpb24sIGl0ZW0gbWF5IGhhdmUgYmVlbiBoaWRkZW5cbiAgaWYgKCAhdGhpcy5pc0hpZGRlbiApIHtcbiAgICB0aGlzLmVtaXRFdmVudCgncmV2ZWFsJyk7XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IHN0eWxlIHByb3BlcnR5IHVzZSBmb3IgaGlkZS9yZXZlYWwgdHJhbnNpdGlvbiBlbmRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZVByb3BlcnR5IC0gaGlkZGVuU3R5bGUvdmlzaWJsZVN0eWxlXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5wcm90by5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gZnVuY3Rpb24oIHN0eWxlUHJvcGVydHkgKSB7XG4gIHZhciBvcHRpb25TdHlsZSA9IHRoaXMubGF5b3V0Lm9wdGlvbnNbIHN0eWxlUHJvcGVydHkgXTtcbiAgLy8gdXNlIG9wYWNpdHlcbiAgaWYgKCBvcHRpb25TdHlsZS5vcGFjaXR5ICkge1xuICAgIHJldHVybiAnb3BhY2l0eSc7XG4gIH1cbiAgLy8gZ2V0IGZpcnN0IHByb3BlcnR5XG4gIGZvciAoIHZhciBwcm9wIGluIG9wdGlvblN0eWxlICkge1xuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG5wcm90by5oaWRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHNldCBmbGFnXG4gIHRoaXMuaXNIaWRkZW4gPSB0cnVlO1xuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xuXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcblxuICB2YXIgb25UcmFuc2l0aW9uRW5kID0ge307XG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ2hpZGRlblN0eWxlJyk7XG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uSGlkZVRyYW5zaXRpb25FbmQ7XG5cbiAgdGhpcy50cmFuc2l0aW9uKHtcbiAgICBmcm9tOiBvcHRpb25zLnZpc2libGVTdHlsZSxcbiAgICB0bzogb3B0aW9ucy5oaWRkZW5TdHlsZSxcbiAgICAvLyBrZWVwIGhpZGRlbiBzdHVmZiBoaWRkZW5cbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxuICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXG4gIH0pO1xufTtcblxucHJvdG8ub25IaWRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBpZiBzdGlsbCBoaWRkZW5cbiAgLy8gZHVyaW5nIHRyYW5zaXRpb24sIGl0ZW0gbWF5IGhhdmUgYmVlbiB1bi1oaWRkZW5cbiAgaWYgKCB0aGlzLmlzSGlkZGVuICkge1xuICAgIHRoaXMuY3NzKHsgZGlzcGxheTogJ25vbmUnIH0pO1xuICAgIHRoaXMuZW1pdEV2ZW50KCdoaWRlJyk7XG4gIH1cbn07XG5cbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jc3Moe1xuICAgIHBvc2l0aW9uOiAnJyxcbiAgICBsZWZ0OiAnJyxcbiAgICByaWdodDogJycsXG4gICAgdG9wOiAnJyxcbiAgICBib3R0b206ICcnLFxuICAgIHRyYW5zaXRpb246ICcnLFxuICAgIHRyYW5zZm9ybTogJydcbiAgfSk7XG59O1xuXG5yZXR1cm4gSXRlbTtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvb3V0bGF5ZXIvaXRlbS5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99\n");

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar ColibriFrontComponent = function () {\n  _createClass(ColibriFrontComponent, null, [{\n    key: 'componentName',\n    value: function componentName() {\n      throw new TypeError('name getter should be implemented');\n    }\n  }]);\n\n  function ColibriFrontComponent(element, options) {\n    _classCallCheck(this, ColibriFrontComponent);\n\n    this.$ = jQuery;\n    this.namespace = this.constructor.componentName();\n    this.utils = new __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Utils();\n    this.detect = new __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Detect();\n    this.init();\n    __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.apply(this, arguments);\n    this.start();\n\n    if (this.isCustomizerPreview()) {\n      this.wpCustomize(wp.customize);\n    }\n    return this;\n  }\n\n  _createClass(ColibriFrontComponent, [{\n    key: 'init',\n    value: function init() {}\n  }, {\n    key: 'isCustomizerPreview',\n    value: function isCustomizerPreview() {\n      return __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.isCustomizerPreview();\n    }\n  }, {\n    key: 'wpCustomize',\n    value: function wpCustomize(api) {}\n  }, {\n    key: 'wpSettingBind',\n    value: function wpSettingBind(setting_id, callback) {\n      window.wp.customize(setting_id, function (setting) {\n        setting.bind(callback);\n      });\n    }\n  }, {\n    key: 'updateData',\n    value: function updateData(data) {\n      this.opts = jQuery.extend({}, this.opts, data);\n      this.restart();\n    }\n  }, {\n    key: 'restart',\n    value: function restart() {}\n  }, {\n    key: 'start',\n    value: function start() {}\n  }]);\n\n  return ColibriFrontComponent;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ColibriFrontComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcz9hN2RjIl0sIm5hbWVzIjpbIkNvbGlicmlGcm9udENvbXBvbmVudCIsIlR5cGVFcnJvciIsImVsZW1lbnQiLCJvcHRpb25zIiwiJCIsImpRdWVyeSIsIm5hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50TmFtZSIsInV0aWxzIiwiQ29saWJyaSIsIlV0aWxzIiwiZGV0ZWN0IiwiRGV0ZWN0IiwiaW5pdCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJpc0N1c3RvbWl6ZXJQcmV2aWV3Iiwid3BDdXN0b21pemUiLCJ3cCIsImN1c3RvbWl6ZSIsImFwaSIsInNldHRpbmdfaWQiLCJjYWxsYmFjayIsIndpbmRvdyIsInNldHRpbmciLCJiaW5kIiwiZGF0YSIsIm9wdHMiLCJleHRlbmQiLCJyZXN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7SUFFcUJBLHFCOzs7b0NBQ0k7QUFDckIsWUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNEOzs7QUFFRCxpQ0FBWUMsT0FBWixFQUFxQkMsT0FBckIsRUFBOEI7QUFBQTs7QUFDNUIsU0FBS0MsQ0FBTCxHQUFTQyxNQUFUO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixLQUFLQyxXQUFMLENBQWlCQyxhQUFqQixFQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFJQyxpRUFBT0EsQ0FBQ0MsS0FBWixFQUFiO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLElBQUlGLGlFQUFPQSxDQUFDRyxNQUFaLEVBQWQ7QUFDQSxTQUFLQyxJQUFMO0FBQ0FKLHFFQUFPQSxDQUFDSyxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7QUFDQSxTQUFLQyxLQUFMOztBQUVBLFFBQUksS0FBS0MsbUJBQUwsRUFBSixFQUFnQztBQUM5QixXQUFLQyxXQUFMLENBQWlCQyxHQUFHQyxTQUFwQjtBQUNEO0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7Ozs7MkJBRU0sQ0FBRTs7OzBDQUVhO0FBQ3BCLGFBQU9YLGlFQUFPQSxDQUFDUSxtQkFBUixFQUFQO0FBQ0Q7OztnQ0FFV0ksRyxFQUFLLENBQUU7OztrQ0FFTEMsVSxFQUFZQyxRLEVBQVU7QUFDbENDLGFBQU9MLEVBQVAsQ0FBVUMsU0FBVixDQUFvQkUsVUFBcEIsRUFBZ0MsVUFBU0csT0FBVCxFQUFrQjtBQUNoREEsZ0JBQVFDLElBQVIsQ0FBYUgsUUFBYjtBQUNELE9BRkQ7QUFHRDs7OytCQUVVSSxJLEVBQU07QUFDZixXQUFLQyxJQUFMLEdBQVl4QixPQUFPeUIsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS0QsSUFBdkIsRUFBNkJELElBQTdCLENBQVo7QUFDQSxXQUFLRyxPQUFMO0FBQ0Q7Ozs4QkFDUyxDQUFFOzs7NEJBQ0osQ0FBRTs7Ozs7O0FBdkNTL0IsOEUiLCJmaWxlIjoiMTAwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbGlicmkgZnJvbSAnQHJvb3Qvc3RhdGljLWZyZWUvY29saWJyaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGlicmlGcm9udENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wb25lbnROYW1lKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25hbWUgZ2V0dGVyIHNob3VsZCBiZSBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJCA9IGpRdWVyeTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IHRoaXMuY29uc3RydWN0b3IuY29tcG9uZW50TmFtZSgpO1xuICAgIHRoaXMudXRpbHMgPSBuZXcgQ29saWJyaS5VdGlscygpO1xuICAgIHRoaXMuZGV0ZWN0ID0gbmV3IENvbGlicmkuRGV0ZWN0KCk7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgQ29saWJyaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIGlmICh0aGlzLmlzQ3VzdG9taXplclByZXZpZXcoKSkge1xuICAgICAgdGhpcy53cEN1c3RvbWl6ZSh3cC5jdXN0b21pemUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGluaXQoKSB7fVxuXG4gIGlzQ3VzdG9taXplclByZXZpZXcoKSB7XG4gICAgcmV0dXJuIENvbGlicmkuaXNDdXN0b21pemVyUHJldmlldygpO1xuICB9XG5cbiAgd3BDdXN0b21pemUoYXBpKSB7fVxuXG4gIHdwU2V0dGluZ0JpbmQoc2V0dGluZ19pZCwgY2FsbGJhY2spIHtcbiAgICB3aW5kb3cud3AuY3VzdG9taXplKHNldHRpbmdfaWQsIGZ1bmN0aW9uKHNldHRpbmcpIHtcbiAgICAgIHNldHRpbmcuYmluZChjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVEYXRhKGRhdGEpIHtcbiAgICB0aGlzLm9wdHMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLm9wdHMsIGRhdGEpO1xuICAgIHRoaXMucmVzdGFydCgpO1xuICB9XG4gIHJlc3RhcnQoKSB7fVxuICBzdGFydCgpIHt9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL2Jhc2UvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///100\n");

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slideshow__ = __webpack_require__(102);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar CustomizableSlideshow = function (_Slideshow) {\n    _inherits(CustomizableSlideshow, _Slideshow);\n\n    function CustomizableSlideshow() {\n        _classCallCheck(this, CustomizableSlideshow);\n\n        return _possibleConstructorReturn(this, (CustomizableSlideshow.__proto__ || Object.getPrototypeOf(CustomizableSlideshow)).apply(this, arguments));\n    }\n\n    _createClass(CustomizableSlideshow, [{\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {\n            var _this2 = this;\n\n            var _loop = function _loop(opt) {\n\n                if (_this2.opts.wpSettings.hasOwnProperty(opt)) {\n                    var setting = _this2.opts.wpSettings[opt];\n\n                    _this2.wpSettingBind(setting, function (newValue) {\n                        _this2.opts[opt] = newValue;\n                        _this2.restart();\n                    });\n                }\n            };\n\n            for (var opt in this.opts.wpSettings) {\n                _loop(opt);\n            }\n        }\n    }]);\n\n    return CustomizableSlideshow;\n}(__WEBPACK_IMPORTED_MODULE_0__slideshow__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomizableSlideshow);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvc2xpZGVzaG93L2N1c3RvbWl6YWJsZS1zbGlkZXNob3cuanM/OTMwMiJdLCJuYW1lcyI6WyJDdXN0b21pemFibGVTbGlkZXNob3ciLCJhcGkiLCJvcHQiLCJvcHRzIiwid3BTZXR0aW5ncyIsImhhc093blByb3BlcnR5Iiwic2V0dGluZyIsIndwU2V0dGluZ0JpbmQiLCJuZXdWYWx1ZSIsInJlc3RhcnQiLCJTbGlkZXNob3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztJQUVxQkEscUI7Ozs7Ozs7Ozs7O29DQUNMQyxHLEVBQUs7QUFBQTs7QUFBQSx1Q0FFSkMsR0FGSTs7QUFJVCxvQkFBSSxPQUFLQyxJQUFMLENBQVVDLFVBQVYsQ0FBcUJDLGNBQXJCLENBQW9DSCxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLHdCQUFJSSxVQUFVLE9BQUtILElBQUwsQ0FBVUMsVUFBVixDQUFxQkYsR0FBckIsQ0FBZDs7QUFFQSwyQkFBS0ssYUFBTCxDQUFtQkQsT0FBbkIsRUFBNEIsVUFBQ0UsUUFBRCxFQUFjO0FBQ3RDLCtCQUFLTCxJQUFMLENBQVVELEdBQVYsSUFBaUJNLFFBQWpCO0FBQ0EsK0JBQUtDLE9BQUw7QUFDSCxxQkFIRDtBQUlIO0FBWFE7O0FBRWIsaUJBQUssSUFBSVAsR0FBVCxJQUFnQixLQUFLQyxJQUFMLENBQVVDLFVBQTFCLEVBQXNDO0FBQUEsc0JBQTdCRixHQUE2QjtBQVVyQztBQUNKOzs7O0VBZDhDUSwyRDs7QUFBOUJWLDhFIiwiZmlsZSI6IjEwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTbGlkZXNob3cgZnJvbSBcIi4vc2xpZGVzaG93XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWl6YWJsZVNsaWRlc2hvdyBleHRlbmRzIFNsaWRlc2hvdyB7XG4gICAgd3BDdXN0b21pemUoYXBpKSB7XG5cbiAgICAgICAgZm9yIChsZXQgb3B0IGluIHRoaXMub3B0cy53cFNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMud3BTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNldHRpbmcgPSB0aGlzLm9wdHMud3BTZXR0aW5nc1tvcHRdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy53cFNldHRpbmdCaW5kKHNldHRpbmcsIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHNbb3B0XSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvc2xpZGVzaG93L2N1c3RvbWl6YWJsZS1zbGlkZXNob3cuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///101\n");

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colibri_kube_component__ = __webpack_require__(103);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar Slideshow = function (_ColibriFrontComponen) {\n    _inherits(Slideshow, _ColibriFrontComponen);\n\n    function Slideshow() {\n        _classCallCheck(this, Slideshow);\n\n        return _possibleConstructorReturn(this, (Slideshow.__proto__ || Object.getPrototypeOf(Slideshow)).apply(this, arguments));\n    }\n\n    _createClass(Slideshow, [{\n        key: 'init',\n        value: function init() {\n            this.lastIndex = -1;\n            this.currentIndex = 0;\n            this.interval = -1;\n        }\n    }, {\n        key: 'addImageEffect',\n        value: function addImageEffect(image, index) {\n            this.$(image).css({\n                transition: 'opacity ' + this.opts.slideSpeed + 'ms',\n                zIndex: this.$images.length - index\n            });\n        }\n    }, {\n        key: 'slideImage',\n        value: function slideImage() {\n\n            if (this.lastIndex >= 0) {\n                this.$images.eq(this.lastIndex).removeClass('current');\n            }\n\n            this.lastIndex = this.currentIndex;\n            this.$images.eq(this.currentIndex).addClass('current').removeClass('next');\n            this.currentIndex = this.currentIndex + 1 === this.$images.length ? 0 : this.currentIndex + 1;\n            this.$images.eq(this.currentIndex).addClass('next');\n        }\n    }, {\n        key: 'restart',\n        value: function restart() {\n            clearInterval(this.interval);\n            this.$images.css({\n                zIndex: '',\n                transition: '',\n                transitionDelay: ''\n            });\n\n            this.start();\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            var _this2 = this;\n\n            this.$images = this.$element.find('.slideshow-image');\n            this.$images.each(function (index, image) {\n                _this2.addImageEffect(image, index);\n            });\n\n            this.interval = setInterval(function () {\n                _this2.slideImage();\n            }, this.opts.slideDuration + this.opts.slideSpeed);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            clearInterval(this.interval);\n        }\n    }], [{\n        key: 'componentName',\n        value: function componentName() {\n            return 'slideshow';\n        }\n    }]);\n\n    return Slideshow;\n}(__WEBPACK_IMPORTED_MODULE_0__colibri_kube_component__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Slideshow);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvc2xpZGVzaG93L3NsaWRlc2hvdy5qcz81ZGUyIl0sIm5hbWVzIjpbIlNsaWRlc2hvdyIsImxhc3RJbmRleCIsImN1cnJlbnRJbmRleCIsImludGVydmFsIiwiaW1hZ2UiLCJpbmRleCIsIiQiLCJjc3MiLCJ0cmFuc2l0aW9uIiwib3B0cyIsInNsaWRlU3BlZWQiLCJ6SW5kZXgiLCIkaW1hZ2VzIiwibGVuZ3RoIiwiZXEiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiY2xlYXJJbnRlcnZhbCIsInRyYW5zaXRpb25EZWxheSIsInN0YXJ0IiwiJGVsZW1lbnQiLCJmaW5kIiwiZWFjaCIsImFkZEltYWdlRWZmZWN0Iiwic2V0SW50ZXJ2YWwiLCJzbGlkZUltYWdlIiwic2xpZGVEdXJhdGlvbiIsIkNvbGlicmlGcm9udENvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0lBRXFCQSxTOzs7Ozs7Ozs7OzsrQkFLVjtBQUNILGlCQUFLQyxTQUFMLEdBQWlCLENBQUMsQ0FBbEI7QUFDQSxpQkFBS0MsWUFBTCxHQUFvQixDQUFwQjtBQUNBLGlCQUFLQyxRQUFMLEdBQWdCLENBQUMsQ0FBakI7QUFDSDs7O3VDQUVjQyxLLEVBQU9DLEssRUFBTztBQUN6QixpQkFBS0MsQ0FBTCxDQUFPRixLQUFQLEVBQWNHLEdBQWQsQ0FBa0I7QUFDZEMseUNBQXVCLEtBQUtDLElBQUwsQ0FBVUMsVUFBakMsT0FEYztBQUVkQyx3QkFBUSxLQUFLQyxPQUFMLENBQWFDLE1BQWIsR0FBc0JSO0FBRmhCLGFBQWxCO0FBSUg7OztxQ0FHWTs7QUFFVCxnQkFBSSxLQUFLSixTQUFMLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLHFCQUFLVyxPQUFMLENBQWFFLEVBQWIsQ0FBZ0IsS0FBS2IsU0FBckIsRUFBZ0NjLFdBQWhDLENBQTRDLFNBQTVDO0FBQ0g7O0FBRUQsaUJBQUtkLFNBQUwsR0FBaUIsS0FBS0MsWUFBdEI7QUFDQSxpQkFBS1UsT0FBTCxDQUFhRSxFQUFiLENBQWdCLEtBQUtaLFlBQXJCLEVBQW1DYyxRQUFuQyxDQUE0QyxTQUE1QyxFQUF1REQsV0FBdkQsQ0FBbUUsTUFBbkU7QUFDQSxpQkFBS2IsWUFBTCxHQUFvQixLQUFLQSxZQUFMLEdBQW9CLENBQXBCLEtBQTBCLEtBQUtVLE9BQUwsQ0FBYUMsTUFBdkMsR0FBZ0QsQ0FBaEQsR0FBb0QsS0FBS1gsWUFBTCxHQUFvQixDQUE1RjtBQUNBLGlCQUFLVSxPQUFMLENBQWFFLEVBQWIsQ0FBZ0IsS0FBS1osWUFBckIsRUFBbUNjLFFBQW5DLENBQTRDLE1BQTVDO0FBQ0g7OztrQ0FHUztBQUNOQywwQkFBYyxLQUFLZCxRQUFuQjtBQUNBLGlCQUFLUyxPQUFMLENBQWFMLEdBQWIsQ0FBaUI7QUFDYkksd0JBQVEsRUFESztBQUViSCw0QkFBWSxFQUZDO0FBR2JVLGlDQUFpQjtBQUhKLGFBQWpCOztBQU1BLGlCQUFLQyxLQUFMO0FBQ0g7OztnQ0FHTztBQUFBOztBQUNKLGlCQUFLUCxPQUFMLEdBQWUsS0FBS1EsUUFBTCxDQUFjQyxJQUFkLENBQW1CLGtCQUFuQixDQUFmO0FBQ0EsaUJBQUtULE9BQUwsQ0FBYVUsSUFBYixDQUFrQixVQUFDakIsS0FBRCxFQUFRRCxLQUFSLEVBQWtCO0FBQ2hDLHVCQUFLbUIsY0FBTCxDQUFvQm5CLEtBQXBCLEVBQTJCQyxLQUEzQjtBQUNILGFBRkQ7O0FBSUEsaUJBQUtGLFFBQUwsR0FBZ0JxQixZQUFZLFlBQU07QUFDOUIsdUJBQUtDLFVBQUw7QUFDSCxhQUZlLEVBRWIsS0FBS2hCLElBQUwsQ0FBVWlCLGFBQVYsR0FBMEIsS0FBS2pCLElBQUwsQ0FBVUMsVUFGdkIsQ0FBaEI7QUFHSDs7OytCQUVNO0FBQ0hPLDBCQUFjLEtBQUtkLFFBQW5CO0FBQ0g7Ozt3Q0F4RHNCO0FBQ25CLG1CQUFPLFdBQVA7QUFDSDs7OztFQUhrQ3dCLHdFOztBQUFsQjNCLGtFIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2xpYnJpRnJvbnRDb21wb25lbnQgZnJvbSBcIi4uL2NvbGlicmkta3ViZS1jb21wb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVzaG93IGV4dGVuZHMgQ29saWJyaUZyb250Q29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29tcG9uZW50TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdzbGlkZXNob3cnO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMubGFzdEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IC0xO1xuICAgIH1cblxuICAgIGFkZEltYWdlRWZmZWN0KGltYWdlLCBpbmRleCkge1xuICAgICAgICB0aGlzLiQoaW1hZ2UpLmNzcyh7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke3RoaXMub3B0cy5zbGlkZVNwZWVkfW1zYCxcbiAgICAgICAgICAgIHpJbmRleDogdGhpcy4kaW1hZ2VzLmxlbmd0aCAtIGluZGV4XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgc2xpZGVJbWFnZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5sYXN0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy4kaW1hZ2VzLmVxKHRoaXMubGFzdEluZGV4KS5yZW1vdmVDbGFzcygnY3VycmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0SW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleDtcbiAgICAgICAgdGhpcy4kaW1hZ2VzLmVxKHRoaXMuY3VycmVudEluZGV4KS5hZGRDbGFzcygnY3VycmVudCcpLnJlbW92ZUNsYXNzKCduZXh0Jyk7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gdGhpcy5jdXJyZW50SW5kZXggKyAxID09PSB0aGlzLiRpbWFnZXMubGVuZ3RoID8gMCA6IHRoaXMuY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgdGhpcy4kaW1hZ2VzLmVxKHRoaXMuY3VycmVudEluZGV4KS5hZGRDbGFzcygnbmV4dCcpO1xuICAgIH1cblxuXG4gICAgcmVzdGFydCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgdGhpcy4kaW1hZ2VzLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6ICcnLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogJycsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6ICcnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG5cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLiRpbWFnZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5zbGlkZXNob3ctaW1hZ2UnKTtcbiAgICAgICAgdGhpcy4kaW1hZ2VzLmVhY2goKGluZGV4LCBpbWFnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRJbWFnZUVmZmVjdChpbWFnZSwgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zbGlkZUltYWdlKCk7XG4gICAgICAgIH0sIHRoaXMub3B0cy5zbGlkZUR1cmF0aW9uICsgdGhpcy5vcHRzLnNsaWRlU3BlZWQpO1xuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvanMva3ViZS9zbGlkZXNob3cvc2xpZGVzaG93LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n");

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar ColibriFrontComponent = function () {\n    _createClass(ColibriFrontComponent, null, [{\n        key: \"componentName\",\n        value: function componentName() {\n            throw new TypeError(\"name getter should be implemented\");\n        }\n    }]);\n\n    function ColibriFrontComponent(element, options) {\n        _classCallCheck(this, ColibriFrontComponent);\n\n        this.$ = jQuery;\n        this.namespace = this.constructor.componentName();\n        this.utils = new __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Utils();\n        this.detect = new __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.Detect();\n        this.init();\n        __WEBPACK_IMPORTED_MODULE_0__root_static_free_colibri___default.a.apply(this, arguments);\n        this.start();\n\n        if (window.wp && window.wp.customize) {\n            this.wpCustomize(wp.customize);\n        }\n        return this;\n    }\n\n    _createClass(ColibriFrontComponent, [{\n        key: \"init\",\n        value: function init() {}\n    }, {\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {}\n    }, {\n        key: \"wpSettingBind\",\n        value: function wpSettingBind(setting_id, callback) {\n            window.wp.customize(setting_id, function (setting) {\n                setting.bind(callback);\n            });\n        }\n    }, {\n        key: \"start\",\n        value: function start() {}\n    }]);\n\n    return ColibriFrontComponent;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ColibriFrontComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvY29saWJyaS1rdWJlLWNvbXBvbmVudC5qcz9kZjlhIl0sIm5hbWVzIjpbIkNvbGlicmlGcm9udENvbXBvbmVudCIsIlR5cGVFcnJvciIsImVsZW1lbnQiLCJvcHRpb25zIiwiJCIsImpRdWVyeSIsIm5hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50TmFtZSIsInV0aWxzIiwiQ29saWJyaSIsIlV0aWxzIiwiZGV0ZWN0IiwiRGV0ZWN0IiwiaW5pdCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJ3aW5kb3ciLCJ3cCIsImN1c3RvbWl6ZSIsIndwQ3VzdG9taXplIiwiYXBpIiwic2V0dGluZ19pZCIsImNhbGxiYWNrIiwic2V0dGluZyIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztJQUVxQkEscUI7Ozt3Q0FDTTtBQUNuQixrQkFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNIOzs7QUFFRCxtQ0FBWUMsT0FBWixFQUFxQkMsT0FBckIsRUFBOEI7QUFBQTs7QUFDMUIsYUFBS0MsQ0FBTCxHQUFTQyxNQUFUO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixLQUFLQyxXQUFMLENBQWlCQyxhQUFqQixFQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYSxJQUFJQyxpRUFBT0EsQ0FBQ0MsS0FBWixFQUFiO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLElBQUlGLGlFQUFPQSxDQUFDRyxNQUFaLEVBQWQ7QUFDQSxhQUFLQyxJQUFMO0FBQ0FKLHlFQUFPQSxDQUFDSyxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7QUFDQSxhQUFLQyxLQUFMOztBQUVBLFlBQUlDLE9BQU9DLEVBQVAsSUFBYUQsT0FBT0MsRUFBUCxDQUFVQyxTQUEzQixFQUFzQztBQUNsQyxpQkFBS0MsV0FBTCxDQUFpQkYsR0FBR0MsU0FBcEI7QUFDSDtBQUNELGVBQU8sSUFBUDtBQUNIOzs7OytCQUVNLENBRU47OztvQ0FFV0UsRyxFQUFLLENBRWhCOzs7c0NBRWFDLFUsRUFBWUMsUSxFQUFVO0FBQ2hDTixtQkFBT0MsRUFBUCxDQUFVQyxTQUFWLENBQW9CRyxVQUFwQixFQUFnQyxVQUFVRSxPQUFWLEVBQW1CO0FBQy9DQSx3QkFBUUMsSUFBUixDQUFhRixRQUFiO0FBQ0gsYUFGRDtBQUdIOzs7Z0NBRU8sQ0FFUDs7Ozs7O0FBcENnQnhCLDhFIiwiZmlsZSI6IjEwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2xpYnJpIGZyb20gXCJAcm9vdC9zdGF0aWMtZnJlZS9jb2xpYnJpXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGlicmlGcm9udENvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbXBvbmVudE5hbWUoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuYW1lIGdldHRlciBzaG91bGQgYmUgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLiQgPSBqUXVlcnk7XG4gICAgICAgIHRoaXMubmFtZXNwYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wb25lbnROYW1lKCk7XG4gICAgICAgIHRoaXMudXRpbHMgPSBuZXcgQ29saWJyaS5VdGlscygpO1xuICAgICAgICB0aGlzLmRldGVjdCA9IG5ldyBDb2xpYnJpLkRldGVjdCgpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgQ29saWJyaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG5cbiAgICAgICAgaWYgKHdpbmRvdy53cCAmJiB3aW5kb3cud3AuY3VzdG9taXplKSB7XG4gICAgICAgICAgICB0aGlzLndwQ3VzdG9taXplKHdwLmN1c3RvbWl6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcblxuICAgIH1cblxuICAgIHdwQ3VzdG9taXplKGFwaSkge1xuXG4gICAgfVxuXG4gICAgd3BTZXR0aW5nQmluZChzZXR0aW5nX2lkLCBjYWxsYmFjaykge1xuICAgICAgICB3aW5kb3cud3AuY3VzdG9taXplKHNldHRpbmdfaWQsIGZ1bmN0aW9uIChzZXR0aW5nKSB7XG4gICAgICAgICAgICBzZXR0aW5nLmJpbmQoY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcblxuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL3NyYy90aGVtZS9qcy9rdWJlL2NvbGlicmkta3ViZS1jb21wb25lbnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///103\n");

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__page_components_common_background_scripts_video_video_bg__ = __webpack_require__(105);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar CustomizableVideoBackground = function (_VideoBackground) {\n    _inherits(CustomizableVideoBackground, _VideoBackground);\n\n    function CustomizableVideoBackground(element, options) {\n        var _ret;\n\n        _classCallCheck(this, CustomizableVideoBackground);\n\n        var _this = _possibleConstructorReturn(this, (CustomizableVideoBackground.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground)).call(this, element, options));\n\n        return _ret = _this, _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(CustomizableVideoBackground, [{\n        key: \"wpCustomize\",\n        value: function wpCustomize(api) {\n            var _this2 = this;\n\n            this.API_URL = colibri_ADDITIONAL_JS_DATA.api_url;\n\n            var _loop = function _loop(opt) {\n\n                if (_this2.opts.wpSettings.hasOwnProperty(opt)) {\n                    var setting = _this2.opts.wpSettings[opt];\n\n                    _this2.wpSettingBind(setting, function (newValue) {\n                        if (opt === \"externalUrl\") {\n                            _this2.restartYouTubeVideo(newValue);\n                        }\n\n                        if (opt === \"internalUrl\") {\n                            _this2.restartSelfHostedVideo(newValue);\n                        }\n\n                        if (opt === \"videoType\") {\n                            var videoType = \"native\";\n                            if (newValue == \"external\") videoType = \"youtube\";\n                            _this2.changeProvider(videoType);\n                        }\n\n                        if (opt === \"posterUrl\") {\n                            _this2.$element.css({\n                                backgroundImage: \"url(\" + newValue + \")\"\n                            });\n                            _this2.videoData.poster = newValue;\n                        }\n                    });\n                }\n            };\n\n            for (var opt in this.opts.wpSettings) {\n                _loop(opt);\n            }\n        }\n    }, {\n        key: \"changeProvider\",\n        value: function changeProvider(newValue) {\n            if (newValue === \"youtube\") {\n                this.restartYouTubeVideo(wp.customize(this.opts.wpSettings['externalUrl']).get());\n            } else {\n                this.restartSelfHostedVideo(wp.customize(this.opts.wpSettings['internalUrl']).get());\n            }\n        }\n    }, {\n        key: \"restartYouTubeVideo\",\n        value: function restartYouTubeVideo(value) {\n            this.videoData.videoUrl = value;\n            this.videoData.mimeType = \"video/x-youtube\";\n\n            _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", this).call(this);\n        }\n    }, {\n        key: \"restartSelfHostedVideo\",\n        value: function restartSelfHostedVideo(value) {\n            var _this3 = this;\n\n            if (!value) {\n                this.videoData.videoUrl = \"\";\n                this.videoData.mimeType = \"video/mp4\";\n                _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", this).call(this);\n            } else {\n\n                this.$.getJSON(this.API_URL + \"/attachment-data/\" + value, function (data) {\n                    _this3.videoData.videoUrl = data.url;\n                    _this3.videoData.mimeType = data.mime_type;\n\n                    _get(CustomizableVideoBackground.prototype.__proto__ || Object.getPrototypeOf(CustomizableVideoBackground.prototype), \"generateVideo\", _this3).call(_this3);\n                });\n            }\n        }\n    }]);\n\n    return CustomizableVideoBackground;\n}(__WEBPACK_IMPORTED_MODULE_0__page_components_common_background_scripts_video_video_bg__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomizableVideoBackground);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2pzL2t1YmUvdmlkZW8tYmFja2dyb3VuZC9jdXN0b21pemFibGUtdmlkZW8tYmFja2dyb3VuZC5qcz9kNjIxIl0sIm5hbWVzIjpbIkN1c3RvbWl6YWJsZVZpZGVvQmFja2dyb3VuZCIsImVsZW1lbnQiLCJvcHRpb25zIiwiYXBpIiwiQVBJX1VSTCIsImNvbGlicmlfQURESVRJT05BTF9KU19EQVRBIiwiYXBpX3VybCIsIm9wdCIsIm9wdHMiLCJ3cFNldHRpbmdzIiwiaGFzT3duUHJvcGVydHkiLCJzZXR0aW5nIiwid3BTZXR0aW5nQmluZCIsIm5ld1ZhbHVlIiwicmVzdGFydFlvdVR1YmVWaWRlbyIsInJlc3RhcnRTZWxmSG9zdGVkVmlkZW8iLCJ2aWRlb1R5cGUiLCJjaGFuZ2VQcm92aWRlciIsIiRlbGVtZW50IiwiY3NzIiwiYmFja2dyb3VuZEltYWdlIiwidmlkZW9EYXRhIiwicG9zdGVyIiwid3AiLCJjdXN0b21pemUiLCJnZXQiLCJ2YWx1ZSIsInZpZGVvVXJsIiwibWltZVR5cGUiLCIkIiwiZ2V0SlNPTiIsImRhdGEiLCJ1cmwiLCJtaW1lX3R5cGUiLCJWaWRlb0JhY2tncm91bmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0lBRXFCQSwyQjs7O0FBRWpCLHlDQUFZQyxPQUFaLEVBQXFCQyxPQUFyQixFQUE4QjtBQUFBOztBQUFBOztBQUFBLDhKQUNwQkQsT0FEb0IsRUFDWEMsT0FEVzs7QUFFMUI7QUFDSDs7OztvQ0FFV0MsRyxFQUFLO0FBQUE7O0FBQ2IsaUJBQUtDLE9BQUwsR0FBZUMsMkJBQTJCQyxPQUExQzs7QUFEYSx1Q0FFSkMsR0FGSTs7QUFJVCxvQkFBSSxPQUFLQyxJQUFMLENBQVVDLFVBQVYsQ0FBcUJDLGNBQXJCLENBQW9DSCxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLHdCQUFJSSxVQUFVLE9BQUtILElBQUwsQ0FBVUMsVUFBVixDQUFxQkYsR0FBckIsQ0FBZDs7QUFFQSwyQkFBS0ssYUFBTCxDQUFtQkQsT0FBbkIsRUFBNEIsVUFBQ0UsUUFBRCxFQUFjO0FBQ3RDLDRCQUFJTixRQUFRLGFBQVosRUFBMkI7QUFDdkIsbUNBQUtPLG1CQUFMLENBQXlCRCxRQUF6QjtBQUNIOztBQUVELDRCQUFJTixRQUFRLGFBQVosRUFBMkI7QUFDdkIsbUNBQUtRLHNCQUFMLENBQTRCRixRQUE1QjtBQUNIOztBQUVELDRCQUFJTixRQUFRLFdBQVosRUFBeUI7QUFDckIsZ0NBQUlTLFlBQVksUUFBaEI7QUFDQSxnQ0FBSUgsWUFBWSxVQUFoQixFQUE0QkcsWUFBWSxTQUFaO0FBQzVCLG1DQUFLQyxjQUFMLENBQW9CRCxTQUFwQjtBQUNIOztBQUVELDRCQUFJVCxRQUFRLFdBQVosRUFBeUI7QUFDckIsbUNBQUtXLFFBQUwsQ0FBY0MsR0FBZCxDQUFrQjtBQUNkQywwREFBd0JQLFFBQXhCO0FBRGMsNkJBQWxCO0FBR0EsbUNBQUtRLFNBQUwsQ0FBZUMsTUFBZixHQUF3QlQsUUFBeEI7QUFDSDtBQUNKLHFCQXJCRDtBQXNCSDtBQTdCUTs7QUFFYixpQkFBSyxJQUFJTixHQUFULElBQWdCLEtBQUtDLElBQUwsQ0FBVUMsVUFBMUIsRUFBc0M7QUFBQSxzQkFBN0JGLEdBQTZCO0FBNEJyQztBQUNKOzs7dUNBRWNNLFEsRUFBVTtBQUNyQixnQkFBSUEsYUFBYSxTQUFqQixFQUE0QjtBQUN4QixxQkFBS0MsbUJBQUwsQ0FBeUJTLEdBQUdDLFNBQUgsQ0FBYSxLQUFLaEIsSUFBTCxDQUFVQyxVQUFWLENBQXFCLGFBQXJCLENBQWIsRUFBa0RnQixHQUFsRCxFQUF6QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLVixzQkFBTCxDQUE0QlEsR0FBR0MsU0FBSCxDQUFhLEtBQUtoQixJQUFMLENBQVVDLFVBQVYsQ0FBcUIsYUFBckIsQ0FBYixFQUFrRGdCLEdBQWxELEVBQTVCO0FBQ0g7QUFDSjs7OzRDQUVtQkMsSyxFQUFPO0FBQ3ZCLGlCQUFLTCxTQUFMLENBQWVNLFFBQWYsR0FBMEJELEtBQTFCO0FBQ0EsaUJBQUtMLFNBQUwsQ0FBZU8sUUFBZixHQUEwQixpQkFBMUI7O0FBRUE7QUFDSDs7OytDQUVzQkYsSyxFQUFPO0FBQUE7O0FBRTFCLGdCQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNSLHFCQUFLTCxTQUFMLENBQWVNLFFBQWYsR0FBMEIsRUFBMUI7QUFDQSxxQkFBS04sU0FBTCxDQUFlTyxRQUFmLEdBQTBCLFdBQTFCO0FBQ0E7QUFDSCxhQUpELE1BSU87O0FBRUgscUJBQUtDLENBQUwsQ0FBT0MsT0FBUCxDQUFrQixLQUFLMUIsT0FBdkIseUJBQWtEc0IsS0FBbEQsRUFBMkQsVUFBQ0ssSUFBRCxFQUFVO0FBQ2pFLDJCQUFLVixTQUFMLENBQWVNLFFBQWYsR0FBMEJJLEtBQUtDLEdBQS9CO0FBQ0EsMkJBQUtYLFNBQUwsQ0FBZU8sUUFBZixHQUEwQkcsS0FBS0UsU0FBL0I7O0FBRUE7QUFDSCxpQkFMRDtBQU1IO0FBRUo7Ozs7RUF2RW9EQywwRzs7QUFBcENsQyxvRiIsImZpbGUiOiIxMDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlkZW9CYWNrZ3JvdW5kIGZyb20gXCJAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vYmFja2dyb3VuZC9zY3JpcHRzL3ZpZGVvL3ZpZGVvLWJnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWl6YWJsZVZpZGVvQmFja2dyb3VuZCBleHRlbmRzIFZpZGVvQmFja2dyb3VuZCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB3cEN1c3RvbWl6ZShhcGkpIHtcbiAgICAgICAgdGhpcy5BUElfVVJMID0gY29saWJyaV9BRERJVElPTkFMX0pTX0RBVEEuYXBpX3VybDtcbiAgICAgICAgZm9yIChsZXQgb3B0IGluIHRoaXMub3B0cy53cFNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMud3BTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNldHRpbmcgPSB0aGlzLm9wdHMud3BTZXR0aW5nc1tvcHRdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy53cFNldHRpbmdCaW5kKHNldHRpbmcsIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcImV4dGVybmFsVXJsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydFlvdVR1YmVWaWRlbyhuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcImludGVybmFsVXJsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydFNlbGZIb3N0ZWRWaWRlbyhuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBcInZpZGVvVHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9UeXBlID0gXCJuYXRpdmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSBcImV4dGVybmFsXCIpIHZpZGVvVHlwZSA9IFwieW91dHViZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VQcm92aWRlcih2aWRlb1R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCA9PT0gXCJwb3N0ZXJVcmxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke25ld1ZhbHVlfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnBvc3RlciA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VQcm92aWRlcihuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmV3VmFsdWUgPT09IFwieW91dHViZVwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RhcnRZb3VUdWJlVmlkZW8od3AuY3VzdG9taXplKHRoaXMub3B0cy53cFNldHRpbmdzWydleHRlcm5hbFVybCddKS5nZXQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RhcnRTZWxmSG9zdGVkVmlkZW8od3AuY3VzdG9taXplKHRoaXMub3B0cy53cFNldHRpbmdzWydpbnRlcm5hbFVybCddKS5nZXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXN0YXJ0WW91VHViZVZpZGVvKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmlkZW9EYXRhLm1pbWVUeXBlID0gXCJ2aWRlby94LXlvdXR1YmVcIjtcblxuICAgICAgICBzdXBlci5nZW5lcmF0ZVZpZGVvKCk7XG4gICAgfVxuXG4gICAgcmVzdGFydFNlbGZIb3N0ZWRWaWRlbyh2YWx1ZSkge1xuXG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLm1pbWVUeXBlID0gXCJ2aWRlby9tcDRcIjtcbiAgICAgICAgICAgIHN1cGVyLmdlbmVyYXRlVmlkZW8oKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy4kLmdldEpTT04oYCR7dGhpcy5BUElfVVJMfS9hdHRhY2htZW50LWRhdGEvJHt2YWx1ZX1gLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EYXRhLnZpZGVvVXJsID0gZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0RhdGEubWltZVR5cGUgPSBkYXRhLm1pbWVfdHlwZTtcblxuICAgICAgICAgICAgICAgIHN1cGVyLmdlbmVyYXRlVmlkZW8oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvanMva3ViZS92aWRlby1iYWNrZ3JvdW5kL2N1c3RvbWl6YWJsZS12aWRlby1iYWNrZ3JvdW5kLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///104\n");

/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__page_components_common_scripts_base_index__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__ = __webpack_require__(106);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__ = __webpack_require__(109);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar VideoBackground = function (_ColibriFrontComponen) {\n  _inherits(VideoBackground, _ColibriFrontComponen);\n\n  function VideoBackground() {\n    _classCallCheck(this, VideoBackground);\n\n    return _possibleConstructorReturn(this, (VideoBackground.__proto__ || Object.getPrototypeOf(VideoBackground)).apply(this, arguments));\n  }\n\n  _createClass(VideoBackground, [{\n    key: 'init',\n    value: function init() {\n      this.videoData = {};\n      this.handler = false;\n      this.debouncedSetPosition = jQuery.debounce(this.updateVideoBackground.bind(this), 100);\n    }\n  }, {\n    key: 'generateVideo',\n    value: function generateVideo() {\n      var _this2 = this;\n\n      for (var handle in __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */]) {\n        if (__WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */].hasOwnProperty(handle) && __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */][handle].test(this.videoData)) {\n          this.$element.empty();\n          this.handler = new __WEBPACK_IMPORTED_MODULE_1__handlers_handlers__[\"a\" /* default */][handle](this.$element[0], this.videoData);\n          break;\n        }\n      }\n\n      this.handler.onLoad(function () {\n        _this2.$element.children('iframe,video').addClass('h-hide-sm-force');\n        _this2.debouncedSetPosition();\n        _this2.handler.onResize(function () {\n          return _this2.debouncedSetPosition();\n        });\n      });\n\n      if (window.hop) {\n        window.addResizeListener(this.$element.closest('.background-wrapper').parent()[0], this.debouncedSetPosition);\n        this.debouncedSetPosition();\n      }\n    }\n  }, {\n    key: 'updateVideoBackground',\n    value: function updateVideoBackground() {\n      if (this.handler.updateVideoSize) {\n        this.handler.updateVideoSize();\n      }\n      this.setPosition();\n    }\n  }, {\n    key: 'setPosition',\n    value: function setPosition() {\n      var _this3 = this;\n\n      this.handler.pause();\n      if (this.$element.children('iframe,video').eq(0).css('display') === 'none') {\n        return;\n      }\n\n      var $video = this.$element.children('iframe,video').eq(0),\n          posX = $video.is('iframe') ? 50 : this.opts.positionX,\n          posY = $video.is('iframe') ? 50 : this.opts.positionY,\n          x = Math.max($video.width() - this.$element.width(), 0) * parseFloat(posX) / 100,\n          y = Math.max($video.height() - this.$element.height(), 0) * parseFloat(posY) / 100;\n\n      $video.css({\n        transform: 'translate(-' + x + 'px,-' + y + 'px)',\n        '-webkit-transform': 'translate(-' + x + 'px,-' + y + 'px)'\n      });\n\n      this.$element.addClass('visible');\n\n      setTimeout(function () {\n        _this3.handler.play();\n      }, 100);\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      this.videoData = {\n        mimeType: this.opts.mimeType,\n        poster: this.opts.poster,\n        videoUrl: this.opts.video\n      };\n\n      if (!Object(__WEBPACK_IMPORTED_MODULE_2__common_utils_is_mobile__[\"isMobile\"])()) {\n        this.generateVideo();\n      }\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      window.removeResizeListener(this.$element.closest('.background-wrapper').parent()[0], this.debouncedSetPosition);\n    }\n  }, {\n    key: 'restart',\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }], [{\n    key: 'componentName',\n    value: function componentName() {\n      return 'video-background';\n    }\n  }]);\n\n  return VideoBackground;\n}(__WEBPACK_IMPORTED_MODULE_0__page_components_common_scripts_base_index__[\"a\" /* ColibriFrontComponent */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VideoBackground);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vdmlkZW8tYmcuanM/YzNiMCJdLCJuYW1lcyI6WyJWaWRlb0JhY2tncm91bmQiLCJ2aWRlb0RhdGEiLCJoYW5kbGVyIiwiZGVib3VuY2VkU2V0UG9zaXRpb24iLCJqUXVlcnkiLCJkZWJvdW5jZSIsInVwZGF0ZVZpZGVvQmFja2dyb3VuZCIsImJpbmQiLCJoYW5kbGUiLCJIYW5kbGVycyIsImhhc093blByb3BlcnR5IiwidGVzdCIsIiRlbGVtZW50IiwiZW1wdHkiLCJvbkxvYWQiLCJjaGlsZHJlbiIsImFkZENsYXNzIiwib25SZXNpemUiLCJ3aW5kb3ciLCJob3AiLCJhZGRSZXNpemVMaXN0ZW5lciIsImNsb3Nlc3QiLCJwYXJlbnQiLCJ1cGRhdGVWaWRlb1NpemUiLCJzZXRQb3NpdGlvbiIsInBhdXNlIiwiZXEiLCJjc3MiLCIkdmlkZW8iLCJwb3NYIiwiaXMiLCJvcHRzIiwicG9zaXRpb25YIiwicG9zWSIsInBvc2l0aW9uWSIsIngiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJwYXJzZUZsb2F0IiwieSIsImhlaWdodCIsInRyYW5zZm9ybSIsInNldFRpbWVvdXQiLCJwbGF5IiwibWltZVR5cGUiLCJwb3N0ZXIiLCJ2aWRlb1VybCIsInZpZGVvIiwiaXNNb2JpbGUiLCJnZW5lcmF0ZVZpZGVvIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJzdG9wIiwic3RhcnQiLCJDb2xpYnJpRnJvbnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7SUFFcUJBLGU7Ozs7Ozs7Ozs7OzJCQUtaO0FBQ0wsV0FBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLFdBQUtDLE9BQUwsR0FBZSxLQUFmO0FBQ0EsV0FBS0Msb0JBQUwsR0FBNEJDLE9BQU9DLFFBQVAsQ0FDMUIsS0FBS0MscUJBQUwsQ0FBMkJDLElBQTNCLENBQWdDLElBQWhDLENBRDBCLEVBRTFCLEdBRjBCLENBQTVCO0FBSUQ7OztvQ0FFZTtBQUFBOztBQUNkLFdBQUssSUFBSUMsTUFBVCxJQUFtQkMsbUVBQW5CLEVBQTZCO0FBQzNCLFlBQ0VBLG1FQUFRQSxDQUFDQyxjQUFULENBQXdCRixNQUF4QixLQUNBQyxtRUFBUUEsQ0FBQ0QsTUFBVCxFQUFpQkcsSUFBakIsQ0FBc0IsS0FBS1YsU0FBM0IsQ0FGRixFQUdFO0FBQ0EsZUFBS1csUUFBTCxDQUFjQyxLQUFkO0FBQ0EsZUFBS1gsT0FBTCxHQUFlLElBQUlPLG1FQUFRQSxDQUFDRCxNQUFULENBQUosQ0FBcUIsS0FBS0ksUUFBTCxDQUFjLENBQWQsQ0FBckIsRUFBdUMsS0FBS1gsU0FBNUMsQ0FBZjtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxXQUFLQyxPQUFMLENBQWFZLE1BQWIsQ0FBb0IsWUFBTTtBQUN4QixlQUFLRixRQUFMLENBQWNHLFFBQWQsQ0FBdUIsY0FBdkIsRUFBdUNDLFFBQXZDLENBQWdELGlCQUFoRDtBQUNBLGVBQUtiLG9CQUFMO0FBQ0EsZUFBS0QsT0FBTCxDQUFhZSxRQUFiLENBQXNCO0FBQUEsaUJBQU0sT0FBS2Qsb0JBQUwsRUFBTjtBQUFBLFNBQXRCO0FBQ0QsT0FKRDs7QUFNQSxVQUFJZSxPQUFPQyxHQUFYLEVBQWdCO0FBQ2RELGVBQU9FLGlCQUFQLENBQ0UsS0FBS1IsUUFBTCxDQUFjUyxPQUFkLENBQXNCLHFCQUF0QixFQUE2Q0MsTUFBN0MsR0FBc0QsQ0FBdEQsQ0FERixFQUVFLEtBQUtuQixvQkFGUDtBQUlBLGFBQUtBLG9CQUFMO0FBQ0Q7QUFDRjs7OzRDQUN1QjtBQUN0QixVQUFJLEtBQUtELE9BQUwsQ0FBYXFCLGVBQWpCLEVBQWtDO0FBQ2hDLGFBQUtyQixPQUFMLENBQWFxQixlQUFiO0FBQ0Q7QUFDRCxXQUFLQyxXQUFMO0FBQ0Q7OztrQ0FDYTtBQUFBOztBQUNaLFdBQUt0QixPQUFMLENBQWF1QixLQUFiO0FBQ0EsVUFDRSxLQUFLYixRQUFMLENBQ0dHLFFBREgsQ0FDWSxjQURaLEVBRUdXLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLEdBSEgsQ0FHTyxTQUhQLE1BR3NCLE1BSnhCLEVBS0U7QUFDQTtBQUNEOztBQUVELFVBQUlDLFNBQVMsS0FBS2hCLFFBQUwsQ0FBY0csUUFBZCxDQUF1QixjQUF2QixFQUF1Q1csRUFBdkMsQ0FBMEMsQ0FBMUMsQ0FBYjtBQUFBLFVBQ0VHLE9BQU9ELE9BQU9FLEVBQVAsQ0FBVSxRQUFWLElBQXNCLEVBQXRCLEdBQTJCLEtBQUtDLElBQUwsQ0FBVUMsU0FEOUM7QUFBQSxVQUVFQyxPQUFPTCxPQUFPRSxFQUFQLENBQVUsUUFBVixJQUFzQixFQUF0QixHQUEyQixLQUFLQyxJQUFMLENBQVVHLFNBRjlDO0FBQUEsVUFHRUMsSUFDR0MsS0FBS0MsR0FBTCxDQUFTVCxPQUFPVSxLQUFQLEtBQWlCLEtBQUsxQixRQUFMLENBQWMwQixLQUFkLEVBQTFCLEVBQWlELENBQWpELElBQ0NDLFdBQVdWLElBQVgsQ0FERixHQUVBLEdBTko7QUFBQSxVQU9FVyxJQUNHSixLQUFLQyxHQUFMLENBQVNULE9BQU9hLE1BQVAsS0FBa0IsS0FBSzdCLFFBQUwsQ0FBYzZCLE1BQWQsRUFBM0IsRUFBbUQsQ0FBbkQsSUFDQ0YsV0FBV04sSUFBWCxDQURGLEdBRUEsR0FWSjs7QUFZQUwsYUFBT0QsR0FBUCxDQUFXO0FBQ1RlLG1DQUF5QlAsQ0FBekIsWUFBaUNLLENBQWpDLFFBRFM7QUFFVCw2Q0FBbUNMLENBQW5DLFlBQTJDSyxDQUEzQztBQUZTLE9BQVg7O0FBS0EsV0FBSzVCLFFBQUwsQ0FBY0ksUUFBZCxDQUF1QixTQUF2Qjs7QUFFQTJCLGlCQUFXLFlBQU07QUFDZixlQUFLekMsT0FBTCxDQUFhMEMsSUFBYjtBQUNELE9BRkQsRUFFRyxHQUZIO0FBR0Q7Ozs0QkFFTztBQUNOLFdBQUszQyxTQUFMLEdBQWlCO0FBQ2Y0QyxrQkFBVSxLQUFLZCxJQUFMLENBQVVjLFFBREw7QUFFZkMsZ0JBQVEsS0FBS2YsSUFBTCxDQUFVZSxNQUZIO0FBR2ZDLGtCQUFVLEtBQUtoQixJQUFMLENBQVVpQjtBQUhMLE9BQWpCOztBQU1BLFVBQUksQ0FBQ0MseUVBQVFBLEVBQWIsRUFBaUI7QUFDZixhQUFLQyxhQUFMO0FBQ0Q7QUFDRjs7OzJCQUNNO0FBQ0xoQyxhQUFPaUMsb0JBQVAsQ0FDRSxLQUFLdkMsUUFBTCxDQUFjUyxPQUFkLENBQXNCLHFCQUF0QixFQUE2Q0MsTUFBN0MsR0FBc0QsQ0FBdEQsQ0FERixFQUVFLEtBQUtuQixvQkFGUDtBQUlEOzs7OEJBQ1M7QUFDUixXQUFLaUQsSUFBTDtBQUNBLFdBQUtDLEtBQUw7QUFDRDs7O29DQXBHc0I7QUFDckIsYUFBTyxrQkFBUDtBQUNEOzs7O0VBSDBDQyx5Rzs7QUFBeEJ0RCx3RSIsImZpbGUiOiIxMDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xpYnJpRnJvbnRDb21wb25lbnQgfSBmcm9tICdAL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9iYXNlL2luZGV4JztcbmltcG9ydCBIYW5kbGVycyBmcm9tICcuL2hhbmRsZXJzL2hhbmRsZXJzJztcbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnQC9jb21tb24vdXRpbHMvaXMtbW9iaWxlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlkZW9CYWNrZ3JvdW5kIGV4dGVuZHMgQ29saWJyaUZyb250Q29tcG9uZW50IHtcbiAgc3RhdGljIGNvbXBvbmVudE5hbWUoKSB7XG4gICAgcmV0dXJuICd2aWRlby1iYWNrZ3JvdW5kJztcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52aWRlb0RhdGEgPSB7fTtcbiAgICB0aGlzLmhhbmRsZXIgPSBmYWxzZTtcbiAgICB0aGlzLmRlYm91bmNlZFNldFBvc2l0aW9uID0galF1ZXJ5LmRlYm91bmNlKFxuICAgICAgdGhpcy51cGRhdGVWaWRlb0JhY2tncm91bmQuYmluZCh0aGlzKSxcbiAgICAgIDEwMCxcbiAgICApO1xuICB9XG5cbiAgZ2VuZXJhdGVWaWRlbygpIHtcbiAgICBmb3IgKGxldCBoYW5kbGUgaW4gSGFuZGxlcnMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgSGFuZGxlcnMuaGFzT3duUHJvcGVydHkoaGFuZGxlKSAmJlxuICAgICAgICBIYW5kbGVyc1toYW5kbGVdLnRlc3QodGhpcy52aWRlb0RhdGEpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmhhbmRsZXIgPSBuZXcgSGFuZGxlcnNbaGFuZGxlXSh0aGlzLiRlbGVtZW50WzBdLCB0aGlzLnZpZGVvRGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlci5vbkxvYWQoKCkgPT4ge1xuICAgICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignaWZyYW1lLHZpZGVvJykuYWRkQ2xhc3MoJ2gtaGlkZS1zbS1mb3JjZScpO1xuICAgICAgdGhpcy5kZWJvdW5jZWRTZXRQb3NpdGlvbigpO1xuICAgICAgdGhpcy5oYW5kbGVyLm9uUmVzaXplKCgpID0+IHRoaXMuZGVib3VuY2VkU2V0UG9zaXRpb24oKSk7XG4gICAgfSk7XG5cbiAgICBpZiAod2luZG93LmhvcCkge1xuICAgICAgd2luZG93LmFkZFJlc2l6ZUxpc3RlbmVyKFxuICAgICAgICB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJy5iYWNrZ3JvdW5kLXdyYXBwZXInKS5wYXJlbnQoKVswXSxcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTZXRQb3NpdGlvbixcbiAgICAgICk7XG4gICAgICB0aGlzLmRlYm91bmNlZFNldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVZpZGVvQmFja2dyb3VuZCgpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyLnVwZGF0ZVZpZGVvU2l6ZSkge1xuICAgICAgdGhpcy5oYW5kbGVyLnVwZGF0ZVZpZGVvU2l6ZSgpO1xuICAgIH1cbiAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gIH1cbiAgc2V0UG9zaXRpb24oKSB7XG4gICAgdGhpcy5oYW5kbGVyLnBhdXNlKCk7XG4gICAgaWYgKFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuY2hpbGRyZW4oJ2lmcmFtZSx2aWRlbycpXG4gICAgICAgIC5lcSgwKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJ1xuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCAkdmlkZW8gPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdpZnJhbWUsdmlkZW8nKS5lcSgwKSxcbiAgICAgIHBvc1ggPSAkdmlkZW8uaXMoJ2lmcmFtZScpID8gNTAgOiB0aGlzLm9wdHMucG9zaXRpb25YLFxuICAgICAgcG9zWSA9ICR2aWRlby5pcygnaWZyYW1lJykgPyA1MCA6IHRoaXMub3B0cy5wb3NpdGlvblksXG4gICAgICB4ID1cbiAgICAgICAgKE1hdGgubWF4KCR2aWRlby53aWR0aCgpIC0gdGhpcy4kZWxlbWVudC53aWR0aCgpLCAwKSAqXG4gICAgICAgICAgcGFyc2VGbG9hdChwb3NYKSkgL1xuICAgICAgICAxMDAsXG4gICAgICB5ID1cbiAgICAgICAgKE1hdGgubWF4KCR2aWRlby5oZWlnaHQoKSAtIHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCksIDApICpcbiAgICAgICAgICBwYXJzZUZsb2F0KHBvc1kpKSAvXG4gICAgICAgIDEwMDtcblxuICAgICR2aWRlby5jc3Moe1xuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKC0ke3h9cHgsLSR7eX1weClgLFxuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogYHRyYW5zbGF0ZSgtJHt4fXB4LC0ke3l9cHgpYCxcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVyLnBsYXkoKTtcbiAgICB9LCAxMDApO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy52aWRlb0RhdGEgPSB7XG4gICAgICBtaW1lVHlwZTogdGhpcy5vcHRzLm1pbWVUeXBlLFxuICAgICAgcG9zdGVyOiB0aGlzLm9wdHMucG9zdGVyLFxuICAgICAgdmlkZW9Vcmw6IHRoaXMub3B0cy52aWRlbyxcbiAgICB9O1xuXG4gICAgaWYgKCFpc01vYmlsZSgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlVmlkZW8oKTtcbiAgICB9XG4gIH1cbiAgc3RvcCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIoXG4gICAgICB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJy5iYWNrZ3JvdW5kLXdyYXBwZXInKS5wYXJlbnQoKVswXSxcbiAgICAgIHRoaXMuZGVib3VuY2VkU2V0UG9zaXRpb24sXG4gICAgKTtcbiAgfVxuICByZXN0YXJ0KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbGlicmktZWRpdG9yL3BhZ2UtY29tcG9uZW50cy9jb21tb24vYmFja2dyb3VuZC9zY3JpcHRzL3ZpZGVvL3ZpZGVvLWJnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n");

/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__native_handler__ = __webpack_require__(107);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__youtube_handler__ = __webpack_require__(108);\n\n\n\nvar Handlers = {\n  native: __WEBPACK_IMPORTED_MODULE_0__native_handler__[\"a\" /* default */],\n  youtube: __WEBPACK_IMPORTED_MODULE_1__youtube_handler__[\"a\" /* default */]\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Handlers);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvaGFuZGxlcnMuanM/MzczNyJdLCJuYW1lcyI6WyJIYW5kbGVycyIsIm5hdGl2ZSIsIk5hdGl2ZUhhbmRsZXIiLCJ5b3V0dWJlIiwiWW91VHViZUhhbmRsZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLElBQU1BLFdBQVc7QUFDZkMsVUFBUUMsZ0VBRE87QUFFZkMsV0FBU0MsaUVBQWNBO0FBRlIsQ0FBakI7O0FBS2VKLGlFQUFmIiwiZmlsZSI6IjEwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXRpdmVIYW5kbGVyIGZyb20gJy4vbmF0aXZlLWhhbmRsZXInO1xuaW1wb3J0IFlvdVR1YmVIYW5kbGVyIGZyb20gJy4veW91dHViZS1oYW5kbGVyJztcblxuY29uc3QgSGFuZGxlcnMgPSB7XG4gIG5hdGl2ZTogTmF0aXZlSGFuZGxlcixcbiAgeW91dHViZTogWW91VHViZUhhbmRsZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVycztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvY29tbW9uL2JhY2tncm91bmQvc2NyaXB0cy92aWRlby9oYW5kbGVycy9oYW5kbGVycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///106\n");

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_handler__ = __webpack_require__(63);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar NativeHandler = function (_BaseHandler) {\n  _inherits(NativeHandler, _BaseHandler);\n\n  function NativeHandler() {\n    _classCallCheck(this, NativeHandler);\n\n    return _possibleConstructorReturn(this, (NativeHandler.__proto__ || Object.getPrototypeOf(NativeHandler)).apply(this, arguments));\n  }\n\n  _createClass(NativeHandler, [{\n    key: 'isPaused',\n    value: function isPaused() {\n      return this.video.paused;\n    }\n  }, {\n    key: 'ready',\n    value: function ready() {\n      var _this2 = this;\n\n      if (this.settings.poster) {\n        this.element.style.backgroundImage = 'url(\"' + this.settings.poster + '\")';\n      }\n\n      if (!this.settings.videoUrl) {\n        return;\n      }\n\n      var video = document.createElement('video');\n\n      video.id = this.settings.id || '';\n\n      // video.autoplay = 'autoplay';\n      video.loop = 'loop';\n      video.muted = 'muted';\n\n      if (this.settings.width) {\n        video.width = this.settings.width;\n      }\n\n      if (this.settings.height) {\n        video.height = this.settings.height;\n      }\n\n      video.addEventListener('play', function () {\n        _this2.trigger('play');\n      });\n\n      video.addEventListener('pause', function () {\n        _this2.trigger('pause');\n      });\n\n      video.addEventListener('loadeddata', function () {\n        _this2.loaded();\n      });\n\n      this.video = video;\n      this.setVideo(video);\n      video.src = this.settings.videoUrl;\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.video.pause();\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this.video.play();\n    }\n  }], [{\n    key: 'test',\n    value: function test(settings) {\n      var video = document.createElement('video');\n      return video.canPlayType(settings.mimeType);\n    }\n  }]);\n\n  return NativeHandler;\n}(__WEBPACK_IMPORTED_MODULE_0__base_handler__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (NativeHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9iYWNrZ3JvdW5kL3NjcmlwdHMvdmlkZW8vaGFuZGxlcnMvbmF0aXZlLWhhbmRsZXIuanM/ZmVkMyJdLCJuYW1lcyI6WyJOYXRpdmVIYW5kbGVyIiwidmlkZW8iLCJwYXVzZWQiLCJzZXR0aW5ncyIsInBvc3RlciIsImVsZW1lbnQiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsInZpZGVvVXJsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJsb29wIiwibXV0ZWQiLCJ3aWR0aCIsImhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIiwibG9hZGVkIiwic2V0VmlkZW8iLCJzcmMiLCJwYXVzZSIsInBsYXkiLCJjYW5QbGF5VHlwZSIsIm1pbWVUeXBlIiwiQmFzZUhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztJQUVxQkEsYTs7Ozs7Ozs7Ozs7K0JBTVI7QUFDVCxhQUFPLEtBQUtDLEtBQUwsQ0FBV0MsTUFBbEI7QUFDRDs7OzRCQUVPO0FBQUE7O0FBQ04sVUFBSSxLQUFLQyxRQUFMLENBQWNDLE1BQWxCLEVBQTBCO0FBQ3hCLGFBQUtDLE9BQUwsQ0FBYUMsS0FBYixDQUFtQkMsZUFBbkIsYUFBNkMsS0FBS0osUUFBTCxDQUFjQyxNQUEzRDtBQUNEOztBQUVELFVBQUksQ0FBQyxLQUFLRCxRQUFMLENBQWNLLFFBQW5CLEVBQTZCO0FBQzNCO0FBQ0Q7O0FBRUQsVUFBSVAsUUFBUVEsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFaOztBQUVBVCxZQUFNVSxFQUFOLEdBQVcsS0FBS1IsUUFBTCxDQUFjUSxFQUFkLElBQW9CLEVBQS9COztBQUVBO0FBQ0FWLFlBQU1XLElBQU4sR0FBYSxNQUFiO0FBQ0FYLFlBQU1ZLEtBQU4sR0FBYyxPQUFkOztBQUVBLFVBQUksS0FBS1YsUUFBTCxDQUFjVyxLQUFsQixFQUF5QjtBQUN2QmIsY0FBTWEsS0FBTixHQUFjLEtBQUtYLFFBQUwsQ0FBY1csS0FBNUI7QUFDRDs7QUFFRCxVQUFJLEtBQUtYLFFBQUwsQ0FBY1ksTUFBbEIsRUFBMEI7QUFDeEJkLGNBQU1jLE1BQU4sR0FBZSxLQUFLWixRQUFMLENBQWNZLE1BQTdCO0FBQ0Q7O0FBRURkLFlBQU1lLGdCQUFOLENBQXVCLE1BQXZCLEVBQStCLFlBQU07QUFDbkMsZUFBS0MsT0FBTCxDQUFhLE1BQWI7QUFDRCxPQUZEOztBQUlBaEIsWUFBTWUsZ0JBQU4sQ0FBdUIsT0FBdkIsRUFBZ0MsWUFBTTtBQUNwQyxlQUFLQyxPQUFMLENBQWEsT0FBYjtBQUNELE9BRkQ7O0FBSUFoQixZQUFNZSxnQkFBTixDQUF1QixZQUF2QixFQUFxQyxZQUFNO0FBQ3pDLGVBQUtFLE1BQUw7QUFDRCxPQUZEOztBQUlBLFdBQUtqQixLQUFMLEdBQWFBLEtBQWI7QUFDQSxXQUFLa0IsUUFBTCxDQUFjbEIsS0FBZDtBQUNBQSxZQUFNbUIsR0FBTixHQUFZLEtBQUtqQixRQUFMLENBQWNLLFFBQTFCO0FBQ0Q7Ozs0QkFFTztBQUNOLFdBQUtQLEtBQUwsQ0FBV29CLEtBQVg7QUFDRDs7OzJCQUVNO0FBQ0wsV0FBS3BCLEtBQUwsQ0FBV3FCLElBQVg7QUFDRDs7O3lCQXpEV25CLFEsRUFBVTtBQUNwQixVQUFJRixRQUFRUSxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQVo7QUFDQSxhQUFPVCxNQUFNc0IsV0FBTixDQUFrQnBCLFNBQVNxQixRQUEzQixDQUFQO0FBQ0Q7Ozs7RUFKd0NDLDhEOztBQUF0QnpCLHNFIiwiZmlsZSI6IjEwNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlSGFuZGxlciBmcm9tICcuL2Jhc2UtaGFuZGxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdGl2ZUhhbmRsZXIgZXh0ZW5kcyBCYXNlSGFuZGxlciB7XG4gIHN0YXRpYyB0ZXN0KHNldHRpbmdzKSB7XG4gICAgdmFyIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICByZXR1cm4gdmlkZW8uY2FuUGxheVR5cGUoc2V0dGluZ3MubWltZVR5cGUpO1xuICB9XG5cbiAgaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlkZW8ucGF1c2VkO1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucG9zdGVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybChcIiR7dGhpcy5zZXR0aW5ncy5wb3N0ZXJ9XCIpYDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2V0dGluZ3MudmlkZW9VcmwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuXG4gICAgdmlkZW8uaWQgPSB0aGlzLnNldHRpbmdzLmlkIHx8ICcnO1xuXG4gICAgLy8gdmlkZW8uYXV0b3BsYXkgPSAnYXV0b3BsYXknO1xuICAgIHZpZGVvLmxvb3AgPSAnbG9vcCc7XG4gICAgdmlkZW8ubXV0ZWQgPSAnbXV0ZWQnO1xuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3Mud2lkdGgpIHtcbiAgICAgIHZpZGVvLndpZHRoID0gdGhpcy5zZXR0aW5ncy53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5oZWlnaHQpIHtcbiAgICAgIHZpZGVvLmhlaWdodCA9IHRoaXMuc2V0dGluZ3MuaGVpZ2h0O1xuICAgIH1cblxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCAoKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3BsYXknKTtcbiAgICB9KTtcblxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKCdwYXVzZScpO1xuICAgIH0pO1xuXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkZGF0YScsICgpID0+IHtcbiAgICAgIHRoaXMubG9hZGVkKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZGVvID0gdmlkZW87XG4gICAgdGhpcy5zZXRWaWRlbyh2aWRlbyk7XG4gICAgdmlkZW8uc3JjID0gdGhpcy5zZXR0aW5ncy52aWRlb1VybDtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMudmlkZW8ucGF1c2UoKTtcbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy52aWRlby5wbGF5KCk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvY29tbW9uL2JhY2tncm91bmQvc2NyaXB0cy92aWRlby9oYW5kbGVycy9uYXRpdmUtaGFuZGxlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_handler__ = __webpack_require__(63);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @global YT */\n\n\n\nvar VIDEO_ID_REGEX = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n\nvar YouTubeHandler = function (_BaseHandler) {\n  _inherits(YouTubeHandler, _BaseHandler);\n\n  function YouTubeHandler(element, settings) {\n    var _ret;\n\n    _classCallCheck(this, YouTubeHandler);\n\n    var _this = _possibleConstructorReturn(this, (YouTubeHandler.__proto__ || Object.getPrototypeOf(YouTubeHandler)).call(this, element, settings));\n\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(YouTubeHandler, [{\n    key: 'ready',\n    value: function ready() {\n      var _this2 = this;\n\n      if (this.settings.poster) {\n        this.element.style.backgroundImage = 'url(\"' + this.settings.poster + '\")';\n      }\n\n      if ('YT' in window) {\n        window.YT.ready(function () {\n          _this2.loadVideo();\n        });\n      } else {\n        var tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        tag.onload = function () {\n          window.YT.ready(function () {\n            _this2.loadVideo();\n          });\n        };\n\n        document.getElementsByTagName('head')[0].appendChild(tag);\n      }\n    }\n  }, {\n    key: 'getVideoID',\n    value: function getVideoID() {\n      var matches = this.settings.videoUrl.match(VIDEO_ID_REGEX);\n\n      if (matches && matches.length >= 2) {\n        return matches[1];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'getYTOptions',\n    value: function getYTOptions() {\n      var _this3 = this;\n\n      var options = {\n        videoId: this.getVideoID(),\n        events: {\n          onReady: function onReady(e) {\n            var ytVideo = e.target;\n            ytVideo.mute();\n            ytVideo.setPlaybackQuality('auto');\n            _this3.play();\n            _this3.loaded();\n          },\n          onStateChange: function onStateChange(e) {\n            if (window.YT.PlayerState.PLAYING === e.data) {\n              _this3.trigger('play');\n            } else if (window.YT.PlayerState.PAUSED === e.data) {\n              _this3.trigger('pause');\n            } else if (window.YT.PlayerState.ENDED === e.data) {\n              e.target.playVideo();\n            }\n          },\n          onError: function onError(e) {\n            _this3.player.getIframe().style.display = 'none';\n          }\n        },\n        playerVars: {\n          autoplay: 1,\n          controls: 0,\n          disablekb: 1,\n          fs: 0,\n          iv_load_policy: 3,\n          loop: 1,\n          modestbranding: 1,\n          playsinline: 1,\n          rel: 0,\n          showinfo: 0\n        }\n      };\n\n      if (this.settings.height) {\n        options['height'] = this.settings.height;\n      } else {\n        options['height'] = 1080;\n      }\n\n      if (this.settings.width) {\n        options['width'] = this.settings.width;\n      } else {\n        options['width'] = 1920;\n      }\n      // height: this.settings.height,\n      // width: this.settings.width,\n\n      return options;\n    }\n  }, {\n    key: 'loadVideo',\n    value: function loadVideo() {\n      var video = document.createElement('div'),\n          YT = window.YT;\n\n      this.setVideo(video);\n      this.player = new window.YT.Player(video, this.getYTOptions());\n    }\n  }, {\n    key: 'updateVideoSize',\n    value: function updateVideoSize() {\n      if (!this.player) {\n        return;\n      }\n      var $iframe = jQuery(this.player.getIframe()),\n          size = this.calcVideosSize();\n      $iframe.css(size);\n      $iframe.addClass('ready');\n    }\n  }, {\n    key: 'calcVideosSize',\n    value: function calcVideosSize() {\n      var width = jQuery(this.element).outerWidth(),\n          height = jQuery(this.element).outerHeight(),\n          aspectRatio = '16:9'.split(':'),\n          proportion = aspectRatio[0] / aspectRatio[1],\n          keepWidth = width / height > proportion,\n          magnifier = 1;\n\n      return {\n        width: magnifier * (keepWidth ? width : height * proportion),\n        height: magnifier * (keepWidth ? width / proportion : height)\n      };\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      if (!!this.player && !!this.player.playVideo) {\n        if (!this.isPlaying) {\n          this.isPlaying = true;\n          this.player.playVideo();\n        }\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (!!this.player && !!this.player.pauseVideo && !this.isPlaying) {\n        this.isPlaying = false;\n        this.player.pauseVideo();\n      }\n    }\n  }, {\n    key: 'isPaused',\n    value: function isPaused() {\n      return YT.PlayerState.PAUSED === this.player.getPlayerState();\n    }\n  }, {\n    key: 'loaded',\n    value: function loaded() {\n      this.updateVideoSize();\n      _get(YouTubeHandler.prototype.__proto__ || Object.getPrototypeOf(YouTubeHandler.prototype), 'loaded', this).call(this);\n    }\n  }, {\n    key: 'addResizeBind',\n    value: function addResizeBind() {\n      var _this4 = this;\n\n      this.onResize(function () {\n        return _this4.updateVideoSize();\n      }, 50);\n      _get(YouTubeHandler.prototype.__proto__ || Object.getPrototypeOf(YouTubeHandler.prototype), 'addResizeBind', this).call(this);\n    }\n  }], [{\n    key: 'test',\n    value: function test(settings) {\n      return 'video/x-youtube' === settings.mimeType;\n    }\n  }]);\n\n  return YouTubeHandler;\n}(__WEBPACK_IMPORTED_MODULE_0__base_handler__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (YouTubeHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/***/ (function(module, exports) {

eval("module.exports = isMobile;\nmodule.exports.isMobile = isMobile;\n\nvar mobileRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;\n\nvar tabletRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;\n\nfunction isMobile(opts) {\n  if (!opts) {\n    opts = {};\n  }\n  var ua = opts.ua;\n  if (!ua && typeof navigator !== 'undefined') {\n    ua = navigator.userAgent;\n  }\n  if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {\n    ua = ua.headers['user-agent'];\n  }\n  if (typeof ua !== 'string') {\n    return false;\n  }\n\n  return opts.tablet ? tabletRE.test(ua) : mobileRE.test(ua);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL3V0aWxzL2lzLW1vYmlsZS5qcz8zZDNjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc01vYmlsZSIsIm1vYmlsZVJFIiwidGFibGV0UkUiLCJvcHRzIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwidGFibGV0IiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQVAsR0FBaUJDLFFBQWpCO0FBQ0FGLE9BQU9DLE9BQVAsQ0FBZUMsUUFBZixHQUEwQkEsUUFBMUI7O0FBRUEsSUFBSUMsV0FBVyxpVUFBZjs7QUFFQSxJQUFJQyxXQUFXLDRWQUFmOztBQUVBLFNBQVNGLFFBQVQsQ0FBa0JHLElBQWxCLEVBQXdCO0FBQ3RCLE1BQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1RBLFdBQU8sRUFBUDtBQUNEO0FBQ0QsTUFBSUMsS0FBS0QsS0FBS0MsRUFBZDtBQUNBLE1BQUksQ0FBQ0EsRUFBRCxJQUFPLE9BQU9DLFNBQVAsS0FBcUIsV0FBaEMsRUFBNkM7QUFDM0NELFNBQUtDLFVBQVVDLFNBQWY7QUFDRDtBQUNELE1BQUlGLE1BQU1BLEdBQUdHLE9BQVQsSUFBb0IsT0FBT0gsR0FBR0csT0FBSCxDQUFXLFlBQVgsQ0FBUCxLQUFvQyxRQUE1RCxFQUFzRTtBQUNwRUgsU0FBS0EsR0FBR0csT0FBSCxDQUFXLFlBQVgsQ0FBTDtBQUNEO0FBQ0QsTUFBSSxPQUFPSCxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDMUIsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBT0QsS0FBS0ssTUFBTCxHQUFjTixTQUFTTyxJQUFULENBQWNMLEVBQWQsQ0FBZCxHQUFrQ0gsU0FBU1EsSUFBVCxDQUFjTCxFQUFkLENBQXpDO0FBQ0QiLCJmaWxlIjoiMTA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBpc01vYmlsZTtcclxubW9kdWxlLmV4cG9ydHMuaXNNb2JpbGUgPSBpc01vYmlsZTtcclxuXHJcbnZhciBtb2JpbGVSRSA9IC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllc1s0Nl0wfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vL2k7XHJcblxyXG52YXIgdGFibGV0UkUgPSAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXNbNDZdMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyAoY2V8cGhvbmUpfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pO1xyXG5cclxuZnVuY3Rpb24gaXNNb2JpbGUob3B0cykge1xyXG4gIGlmICghb3B0cykge1xyXG4gICAgb3B0cyA9IHt9O1xyXG4gIH1cclxuICB2YXIgdWEgPSBvcHRzLnVhO1xyXG4gIGlmICghdWEgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICB9XHJcbiAgaWYgKHVhICYmIHVhLmhlYWRlcnMgJiYgdHlwZW9mIHVhLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHVhID0gdWEuaGVhZGVyc1sndXNlci1hZ2VudCddO1xyXG4gIH1cclxuICBpZiAodHlwZW9mIHVhICE9PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9wdHMudGFibGV0ID8gdGFibGV0UkUudGVzdCh1YSkgOiBtb2JpbGVSRS50ZXN0KHVhKTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29saWJyaS1lZGl0b3IvY29tbW9uL3V0aWxzL2lzLW1vYmlsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/***/ (function(module, exports) {

eval("(function ($) {\n  function inCustomizer() {\n    return Colibri.isCustomizerPreview();\n  }\n\n  if (window.location.hash === '#page-top') {\n    changeUrlHash('', 5);\n  }\n\n  var __toCheckOnScroll = {\n    items: {},\n    eachCategory: function eachCategory(callback) {\n      for (var id in this.items) {\n        if (!this.items.hasOwnProperty(id)) {\n          continue;\n        }\n\n        callback(this.items[id]);\n      }\n    },\n    addItem: function addItem(id, item) {\n      if (!this.items[id]) {\n        this.items[id] = [];\n      }\n\n      this.items[id].push(item);\n    },\n    all: function all() {\n      var result = [];\n\n      for (var id in this.items) {\n        if (!this.items.hasOwnProperty(id)) {\n          continue;\n        }\n\n        result = result.concat(this.items[id]);\n      }\n\n      return result;\n    }\n  };\n  var __alreadyScrolling = false;\n\n  function getScrollToValue(elData) {\n    var offset = !isNaN(parseFloat(elData.options.offset)) ? elData.options.offset : elData.options.offset.call(elData.target);\n    var scrollToValue = elData.target.offset().top - offset - $('body').offset().top;\n\n    return scrollToValue;\n  }\n\n  function changeUrlHash(hash, timeout) {\n    if (hash === location.hash.replace('#', '') || hash === 'page-top' && '' === location.hash.replace('#', '')) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (hash) {\n        if (hash === 'page-top') {\n          hash = ' ';\n        } else {\n          hash = '#' + hash;\n        }\n      } else {\n        hash = ' ';\n      }\n      if (history && history.replaceState) {\n        history.replaceState({}, '', hash);\n      }\n    }, timeout || 100);\n    /* safari issue fixed by throtteling the event */\n  }\n\n  function scrollItem(elData) {\n    if (__alreadyScrolling) {\n      return;\n    }\n\n    __alreadyScrolling = true;\n    var scrollToValue = getScrollToValue(elData);\n\n    $('html, body').animate({ scrollTop: scrollToValue }, {\n      easing: 'linear',\n      complete: function complete() {\n        // check for any updates\n        var scrollToValue = getScrollToValue(elData);\n        $('html, body').animate({ scrollTop: scrollToValue }, {\n          easing: 'linear',\n          duration: 100,\n          complete: function complete() {\n            __alreadyScrolling = false;\n            changeUrlHash(elData.id, 5);\n          }\n        });\n      }\n    });\n  }\n\n  function getPageBaseUrl() {\n    return [location.protocol, '//', location.host, location.pathname].join('');\n  }\n\n  function fallbackUrlParse(url) {\n    return url.split('?')[0].split('#')[0];\n  }\n\n  function getABaseUrl(element) {\n    var href = jQuery(element)[0].href || '';\n    var url = '#';\n\n    try {\n      var _url = new window.URL(href);\n      url = [_url.protocol, '//', _url.host, _url.pathname].join('');\n    } catch (e) {\n      url = fallbackUrlParse(href);\n    }\n\n    return url;\n  }\n\n  function getTargetForEl(element) {\n    var targetId = (element.attr('href') || '').split('#').pop(),\n        hrefBase = getABaseUrl(element),\n        target = null,\n        pageURL = getPageBaseUrl();\n\n    if (hrefBase.length && hrefBase !== pageURL) {\n      return target;\n    }\n\n    if (targetId.trim().length) {\n      try {\n        target = $('[id=\"' + targetId + '\"]');\n      } catch (e) {\n        console.log('error scrollSpy', e);\n      }\n    }\n\n    if (target && target.length) {\n      return target;\n    }\n\n    return null;\n  }\n\n  $.fn.smoothScrollAnchor = function (options) {\n    if (inCustomizer()) {\n      return;\n    }\n\n    var elements = $(this);\n\n    options = jQuery.extend({\n      offset: 0\n    }, options);\n\n    elements.each(function () {\n      var element = $(this);\n\n      var target = options.target || getTargetForEl(element);\n      if (target && target.length) {\n        var elData = {\n          element: element,\n          options: options,\n          target: target,\n          targetSel: options.targetSel || '[id=\"' + target.attr('id').trim() + '\"]',\n          id: (target.attr('id') || '').trim()\n        };\n\n        element.off('click.smooth-scroll tap.smooth-scroll').on('click.smooth-scroll tap.smooth-scroll', function (event) {\n          if ($(this).data('skip-smooth-scroll') || $(event.target).data('skip-smooth-scroll')) {\n            return;\n          }\n\n          event.preventDefault();\n\n          if (!$(this).data('allow-propagation')) {\n            event.stopPropagation();\n          }\n\n          scrollItem(elData);\n\n          if (elData.options.clickCallback) {\n            elData.options.clickCallback.call(this, event);\n          }\n        });\n      }\n    });\n  };\n\n  $.fn.scrollSpy = function (options) {\n    if (inCustomizer()) {\n      return;\n    }\n\n    var elements = $(this);\n    var id = 'spy-' + parseInt(Date.now() * Math.random());\n\n    elements.each(function () {\n      var element = $(this);\n      var settings = jQuery.extend({\n        onChange: function onChange() {},\n        onLeave: function onLeave() {},\n        clickCallback: function clickCallback() {},\n\n        smoothScrollAnchor: false,\n        offset: 0\n      }, options);\n\n      if (element.is('a') && (element.attr('href') || '').indexOf('#') !== -1) {\n        var target = getTargetForEl(element);\n\n        if (target) {\n          var elData = {\n            element: element,\n            options: settings,\n            target: target,\n            targetSel: '[id=\"' + target.attr('id').trim() + '\"]',\n            id: target.attr('id').trim()\n          };\n          __toCheckOnScroll.addItem(id, elData);\n          element.data('scrollSpy', elData);\n\n          if (options.smoothScrollAnchor) {\n            element.smoothScrollAnchor(options);\n          }\n        }\n      }\n    });\n  };\n\n  function update() {\n    __toCheckOnScroll.eachCategory(function (items) {\n      var ordered = items.sort(function (itemA, itemB) {\n        return itemA.target.offset().top - itemB.target.offset().top;\n      });\n      var lastItem = ordered.filter(function (item) {\n        var scrollY = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        return item.target.offset().top <= scrollY + window.innerHeight * 0.25;\n      }).pop();\n      ordered.forEach(function (item) {\n        if (lastItem && item.element.is(lastItem.element)) {\n          changeUrlHash(item.id, 5);\n          item.options.onChange.call(item.element);\n        } else {\n          item.options.onLeave.call(item.element);\n        }\n      });\n    });\n  }\n\n  function goToCurrentHash() {\n    var hash = window.location.hash.replace('#', '');\n    var currentItem = __toCheckOnScroll.all().filter(function (item) {\n      return item.targetSel === '[id=\"' + decodeURIComponent(hash).trim() + '\"]';\n    });\n\n    $(window).on('load', function () {\n      if (currentItem.length) {\n        scrollItem(currentItem[0]);\n      }\n      update();\n    });\n  }\n\n  if (!inCustomizer()) {\n    $(window).scroll(update);\n\n    $(window).bind('smoothscroll.update', update);\n\n    $(window).bind('smoothscroll.update', goToCurrentHash);\n\n    $(goToCurrentHash);\n  }\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'dropdown-menu';\n\n  var arrowRightSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-right\" class=\"svg-inline--fa fa-angle-right fa-w-8\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\"><path fill=\"currentColor\" d=\"M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z\"></path></svg>';\n  var arrowDownSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-down\" class=\"svg-inline--fa fa-angle-down fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"></path></svg>';\n  var arrowUpSvg = '<svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"angle-up\" class=\"svg-inline--fa fa-angle-up fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z\"></path></svg>';\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      menuSelector: '.colibri-menu',\n      offCanvasWrapper: '.colibri-menu-container',\n      arrowSelector: 'svg.svg-inline--fa',\n      linkSelector: '.menu-item-has-children > a, .page_item_has_children > a',\n      menuLinkSelector: ' > .menu-item-has-children > a, > .page_item_has_children > a',\n      subMenuLinkSelector: ' ul .menu-item-has-children > a, ul .page_item_has_children > a',\n      $menu: null\n    };\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var _this = this;\n\n      var $menu = this.$element.find(this.opts.menuSelector).first();\n      this.opts.$menu = $menu;\n\n      this.stop();\n      this.addLiListener();\n      this.addSvgArrows();\n      this.addReverseMenuLogic();\n\n      /** TODO @catalin table menu logic needs work because it does not work*/\n      this.addTabletMenuLogic();\n\n      $(document).ready(function () {\n        _this.addMenuScrollSpy($menu);\n      });\n    },\n    stop: function stop() {\n      this.removeAllSvgArrows();\n      this.removeListeners();\n    },\n    copyLiEventTaA: function copyLiEventTaA(e) {\n      var tagName = '';\n      if (e.target && e.target.tagName) {\n        tagName = e.target.tagName;\n      }\n      if (tagName.toLowerCase() === 'a') {\n        return;\n      }\n      var a = $(e.target).find('> a');\n      a[0].click();\n    },\n    addLiListener: function addLiListener() {\n      this.opts.$menu.find('li').on('click', this.copyLiEventTaA);\n    },\n    addSvgArrows: function addSvgArrows() {\n      var menuType = this.opts.data ? this.opts.data.type ? this.opts.data.type : null : null;\n      switch (menuType) {\n        case 'horizontal':\n          this.addHorizontalMenuSvgArrows();\n          break;\n        case 'vertical':\n          this.addVerticalMenuSvgArrow();\n          break;\n      }\n    },\n    addHorizontalMenuSvgArrows: function addHorizontalMenuSvgArrows() {\n      var $menu = this.opts.$menu;\n      var arrowSelector = this.opts.arrowSelector;\n      var menuLinkSelector = this.opts.menuLinkSelector;\n      var subMenuLinkSelector = this.opts.subMenuLinkSelector;\n\n      $menu.find(menuLinkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowDownSvg);\n          $(this).append(arrowUpSvg);\n        }\n      });\n      $menu.find(subMenuLinkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowRightSvg);\n        }\n      });\n    },\n    addVerticalMenuSvgArrow: function addVerticalMenuSvgArrow() {\n      var $menu = this.opts.$menu;\n      var arrowSelector = this.opts.arrowSelector;\n      var linkSelector = this.opts.linkSelector;\n      $menu.find(linkSelector).each(function () {\n        if ($(this).children(arrowSelector).length === 0) {\n          $(this).append(arrowRightSvg);\n        }\n      });\n    },\n    removeAllSvgArrows: function removeAllSvgArrows() {\n      if (this.opts.$menu) {\n        this.opts.$menu.find(this.opts.arrowSelector).remove();\n      }\n    },\n    removeListeners: function removeListeners() {\n      var $menu = this.opts.$menu;\n      $menu.off('mouseover.navigation');\n      $menu.find('li').off('click', this.copyLiEventTaA);\n      this.removeTabletLogic();\n    },\n    removeTabletLogic: function removeTabletLogic() {\n      var $menu = this.opts.$menu;\n      $menu.off('tap.navigation');\n    },\n    addReverseMenuLogic: function addReverseMenuLogic() {\n      var $menu = this.opts.$menu;\n      var self = this;\n      $menu.on('mouseover.navigation', 'li', function () {\n        $menu.find('li.hover').removeClass('hover');\n        self.setOpenReverseClass($menu, $(this));\n      });\n    },\n    setOpenReverseClass: function setOpenReverseClass($menu, $item) {\n      // level 0 - not in dropdown\n      if (this.getItemLevel($menu, $item) > 0) {\n        var $submenu = $item.children('ul');\n        var subItemDoesNotFit = $submenu.length && $item.offset().left + $item.width() + 300 > window.innerWidth;\n        var parentsAreReversed = $submenu.length && $item.closest('.open-reverse').length;\n\n        if (subItemDoesNotFit || parentsAreReversed) {\n          $submenu.addClass('open-reverse');\n        } else {\n          if ($submenu.length) {\n            $submenu.removeClass('open-reverse');\n          }\n        }\n      }\n    },\n    getItemLevel: function getItemLevel($menu, $item) {\n      var menuSelector = this.opts.menuSelector;\n      var temp2 = $item.parentsUntil(menuSelector);\n      var temp = temp2.filter('li');\n      return temp.length;\n    },\n    addTabletMenuLogic: function addTabletMenuLogic() {\n      var self = this;\n      var $menu = this.opts.$menu;\n      if (!this.opts.clickOnLink) {\n        this.opts.clickOnLink = this.clickOnLink.bind(this);\n      }\n      if (!this.opts.clickOnArrow) {\n        this.opts.clickOnArrow = this.clickOnArrow.bind(this);\n      }\n\n      $menu.off('tap.navigation', this.opts.clickOnArrow);\n      $menu.on('tap.navigation', 'li.menu-item > a svg', this.opts.clickOnArrow);\n\n      $menu.off('tap.navigation', this.opts.clickOnLink);\n      $menu.on('tap.navigation', 'li.menu-item > a', this.opts.clickOnLink);\n    },\n    clickOnLink: function clickOnLink(event) {\n      var arrowWasClicked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var self = this;\n      var $this = $(event.target);\n      var $item = $this.closest('li');\n      var $link = $this.closest('a');\n      var $menu = this.opts.$menu;\n      var $submenu = $item.children('ul');\n\n      if ($submenu.length) {\n        if (self.isSelectedItem($item)) {\n          var href = $link.attr('href');\n\n          // do nothing if nothing\n          if (href.indexOf('#') === 0) {\n            var anchor = href.replace('#', '').trim();\n\n            if (!anchor || !$('#' + anchor).length) {\n              return;\n            }\n          }\n          event.stopPropagation();\n          if (arrowWasClicked) {\n            event.preventDefault();\n          }\n          self.deselectItems($menu, $item);\n        } else {\n          event.stopPropagation();\n          event.preventDefault();\n          self.selectItem($menu, $item);\n        }\n      } else {\n        event.stopPropagation();\n        if (arrowWasClicked || !arrowWasClicked && self.isSelectedItem($item)) {\n          event.preventDefault();\n        }\n        self.deselectItems($menu, $item);\n      }\n    },\n    clickOnArrow: function clickOnArrow(event) {\n      this.clickOnLink(event, true);\n    },\n    selectItem: function selectItem($menu, $item) {\n      this.deselectItems($menu, $item);\n      $item.attr('data-selected-item', true);\n      this.clearMenuHovers($menu, $item);\n      $item.addClass('hover');\n      this.setOpenReverseClass($menu, $item);\n      var self = this;\n      $('body').on('tap.navigation-clear-selection', '*', function () {\n        var $this = jQuery(this);\n        self.clearSelectionWhenTapOutside($this, $menu);\n      });\n\n      $(window).on('scroll.navigation-clear-selection', function () {\n        var $this = jQuery(this);\n        self.clearSelectionWhenTapOutside($this, $menu);\n      });\n    },\n    deselectItems: function deselectItems($menu, $item) {\n      $item.removeClass('hover');\n      $menu.find('[data-selected-item]').each(function () {\n        var $item = $(this);\n        $item.removeAttr('data-selected-item');\n        var $submenu = $menu.children('ul');\n\n        //TODO @catalin, check if this mobile menu code is needed\n        if ($menu.is('.mobile-menu')) {\n          $submenu.slideDown();\n        }\n      });\n    },\n    isSelectedItem: function isSelectedItem($item) {\n      return $item.is('[data-selected-item]');\n    },\n    clearMenuHovers: function clearMenuHovers($menu, except) {\n      var self = this;\n      $menu.find('li.hover').each(function () {\n        if (except && self.containsSelectedItem($(this))) {\n          return;\n        }\n        $(this).removeClass('hover');\n      });\n    },\n    containsSelectedItem: function containsSelectedItem($item) {\n      return $item.find('[data-selected-item]').length > 0 || $item.is('[data-selected-item]');\n    },\n    clearSelectionWhenTapOutside: function clearSelectionWhenTapOutside($this, $menu) {\n      $('body').off('tap.navigation-clear-selection');\n      $(window).off('scroll.navigation-clear-selection');\n      if ($this.is($menu) || $.contains($menu[0], this)) {\n        return;\n      }\n      this.clearMenuHovers($menu);\n    },\n    addMenuScrollSpy: function addMenuScrollSpy(startFrom) {\n      var $menu = startFrom;\n      var _offset = 20;\n      if ($.fn.scrollSpy) {\n        $menu.find('a').scrollSpy({\n          onChange: function onChange() {\n            $menu.find('.current-menu-item,.current_page_item').removeClass('current-menu-item current_page_item');\n            $(this).closest('li').addClass('current-menu-item current_page_item');\n          },\n          onLeave: function onLeave() {\n            $(this).closest('li').removeClass('current-menu-item current_page_item');\n          },\n\n          smoothScrollAnchor: true,\n          offset: function offset() {\n            var $fixed = $menu.closest('[data-colibri-component=\"navigation\"]');\n            if ($fixed.length) {\n              return $fixed[0].getBoundingClientRect().height + _offset;\n            }\n\n            return _offset;\n          }\n        });\n      }\n\n      $(window).trigger('smoothscroll.update');\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'navigation';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      data: {\n        sticky: {\n          className: 'h-navigation_sticky',\n          startAfterNode: {\n            enabled: false,\n            selector: ''\n          },\n          animations: {\n            enabled: false,\n            currentInAnimationClass: '',\n            currentOutAnimationClass: '',\n            allInAnimationsClasses: '',\n            allOutAnimationsClasses: '',\n            duration: 0\n          },\n          zIndex: 9999,\n          responsiveWidth: true,\n          center: true,\n          useShrink: true,\n          toBottom: false,\n          useNativeSticky: false,\n          always: false\n        },\n        overlap: false,\n        overlapIsActive: false\n      }\n    };\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    this.computeOverlapPaddingDelayed = jQuery.debounce(this.computeOverlapPadding.bind(this), 10);\n\n    //The script still is called two times but now both of the calls pass the check\n    // if (!this.scriptCallIsValid()) {\n    //   return;\n    // }\n\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var data = {};\n      if (this.opts.data) {\n        data = this.opts.data;\n      }\n      if (data.sticky) {\n        this.startSticky(data.sticky);\n      }\n\n      if (data.overlap) {\n        this.startOverlap();\n      }\n    },\n\n\n    //TODO @catalin this is a temporary workaround, until the issue: #0030376 is fixed\n    scriptCallIsValid: function scriptCallIsValid() {\n      var isInCustomizer = Colibri.isCustomizerPreview();\n      if (!isInCustomizer) {\n        return true;\n      }\n      var vueNavSelector = '.h-navigation_outer';\n      var vueNav = $(this.$element).closest(vueNavSelector).get(0);\n      if (!vueNav) {\n        return true;\n      }\n      if (vueNav.__vue__) {\n        return true;\n      }\n      return false;\n    },\n    startOverlap: function startOverlap() {\n      var self = this;\n      var $target = this.$element.closest('[data-colibri-navigation-overlap]');\n      //for backward compatibility reasons\n      if ($target.length === 0) {\n        $target = this.$element;\n      }\n      this.overlapTarget = $target.get(0);\n      this.overlapIsActive = true;\n      $(window).bind('resize.overlap orientationchange.overlap', this.computeOverlapPaddingDelayed);\n      window.addResizeListener(this.overlapTarget, this.computeOverlapPaddingDelayed);\n      self.computeOverlapPadding();\n    },\n    stopOverlap: function stopOverlap() {\n      this.overlapIsActive = false;\n      if (this.$sheet) {\n        document.head.removeChild(this.$sheet);\n        this.$sheet = null;\n      }\n      $(window).off('.overlap');\n      window.removeResizeListener(this.overlapTarget, this.computeOverlapPaddingDelayed);\n    },\n    computeOverlapPadding: function computeOverlapPadding() {\n      if (!this.overlapIsActive) {\n        return;\n      }\n      if (!this.$sheet) {\n        this.$sheet = document.createElement('style');\n        document.head.appendChild(this.$sheet);\n      }\n      var paddingTop = this.overlapTarget.offsetHeight + 'px !important;';\n      this.$sheet.innerHTML = '.h-navigation-padding{padding-top:' + paddingTop + '}';\n    },\n    startSticky: function startSticky(data) {\n      var self = this;\n\n      this.$element.data('stickData', data);\n      this.$element.fixTo('body', data);\n\n      if (!Colibri.isCustomizerPreview()) {\n        this.prepareSticky();\n      }\n\n      this.$element.bind('fixto-added.sticky', function () {\n        self.$element.attr('data-in-sticky-state', true);\n      });\n\n      this.$element.bind('fixto-removed.sticky', function () {\n        self.$element.removeAttr('data-in-sticky-state');\n      });\n\n      $(window).bind('resize.sticky orientationchange.sticky', function () {\n        setTimeout(self.resizeCallback.bind(self), 50);\n      });\n      $(window).trigger('resize.sticky');\n    },\n    stopSticky: function stopSticky() {\n      var instance = this.fixToInstance();\n      if (instance) {\n        instance.destroy();\n        $(window).off('.sticky');\n        this.$element.removeData('fixto-instance');\n      }\n    },\n    stop: function stop() {\n      this.stopSticky();\n      this.stopOverlap();\n    },\n    prepareSticky: function prepareSticky() {\n      var self = this;\n\n      this.normal = this.$element.find('[data-nav-normal]');\n      this.sticky = this.$element.find('[data-nav-sticky]');\n\n      this.sticky.find('span[data-placeholder]').each(function () {\n        $(this).parent().attr('data-placeholder', $(this).attr('data-placeholder'));\n        $(this).remove();\n      });\n\n      if (!this.sticky.length || !this.sticky.children().length) {\n        return;\n      }\n\n      this.$element.bind('fixto-added.sticky', function () {\n        self.moveElementsToSticky();\n      });\n\n      this.$element.bind('fixto-removed.sticky', function () {\n        self.moveElementsToNormal();\n      });\n    },\n    moveElementsToSticky: function moveElementsToSticky() {\n      var stickyEls = this.sticky.find('[data-placeholder]');\n      var self = this;\n      stickyEls.each(function (index, el) {\n        $this = $(this);\n\n        var type = $this.attr('data-placeholder');\n\n        var content = self.normal.find('[data-placeholder-provider=' + type + '] .h-column__content >');\n        var stickyEquiv = $this;\n\n        if (stickyEquiv && content.length) {\n          $(stickyEquiv).append(content);\n        }\n      });\n\n      this.normal.hide();\n      this.sticky.show();\n    },\n    moveElementsToNormal: function moveElementsToNormal() {\n      var stickyEls = this.sticky.find('[data-placeholder]');\n      var self = this;\n      stickyEls.each(function (index, el) {\n        $this = $(this);\n\n        var type = $this.attr('data-placeholder');\n\n        var content = self.sticky.find('[data-placeholder=' + type + '] >');\n        var equiv = self.normal.find('[data-placeholder-provider=' + type + '] .h-column__content');\n\n        if (equiv && content.length) {\n          $(equiv).append(content);\n        }\n      });\n\n      this.normal.show();\n      this.sticky.hide();\n    },\n    fixToInstance: function fixToInstance() {\n      var data = this.$element.data();\n      if (data && data.fixtoInstance) {\n        return data.fixtoInstance;\n      }\n      return false;\n    },\n    resizeCallback: function resizeCallback() {\n      if (window.innerWidth < 1024) {\n        var data = this.$element.data();\n        var stickData = data.stickData;\n\n        if (!stickData) {\n          return;\n        }\n\n        var fixToInstance = data.fixtoInstance;\n        if (!fixToInstance) {\n          return true;\n        }\n\n        if (window.innerWidth <= 767) {\n          if (!stickData.stickyOnMobile) {\n            fixToInstance.stop();\n          }\n        } else {\n          if (!stickData.stickyOnTablet) {\n            fixToInstance.stop();\n          }\n        }\n      } else {\n        var data = this.$element.data();\n        if (!data) {\n          return;\n        }\n\n        var fixToInstance = data.fixtoInstance;\n        if (!fixToInstance) {\n          return true;\n        }\n\n        fixToInstance.refresh();\n        fixToInstance.start();\n      }\n    }\n  };\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/***/ (function(module, exports) {

eval("(function ($, window, document) {\n  // Start Computed Style. Please do not modify this module here. Modify it from its own repo. See address below.\n\n  /*! Computed Style - v0.1.0 - 2012-07-19\n   * https://github.com/bbarakaci/computed-style\n   * Copyright (c) 2012 Burak Barakaci; Licensed MIT */\n  var computedStyle = function () {\n    var computedStyle = {\n      getAll: function getAll(element) {\n        return document.defaultView.getComputedStyle(element);\n      },\n      get: function get(element, name) {\n        return this.getAll(element)[name];\n      },\n      toFloat: function toFloat(value) {\n        return parseFloat(value, 10) || 0;\n      },\n      getFloat: function getFloat(element, name) {\n        return this.toFloat(this.get(element, name));\n      },\n      _getAllCurrentStyle: function _getAllCurrentStyle(element) {\n        return element.currentStyle;\n      }\n    };\n\n    if (document.documentElement.currentStyle) {\n      computedStyle.getAll = computedStyle._getAllCurrentStyle;\n    }\n\n    return computedStyle;\n  }();\n\n  // End Computed Style. Modify whatever you want to.\n\n  var mimicNode = function () {\n    /*\n    Class Mimic Node\n    Dependency : Computed Style\n    Tries to mimick a dom node taking his styles, dimensions. May go to his repo if gets mature.\n    */\n\n    function MimicNode(element) {\n      this.element = element;\n      this.replacer = document.createElement('div');\n      this.replacer.style.visibility = 'hidden';\n      this.hide();\n      element.parentNode.insertBefore(this.replacer, element);\n    }\n\n    MimicNode.prototype = {\n      replace: function replace() {\n        var rst = this.replacer.style;\n        var styles = computedStyle.getAll(this.element);\n\n        // rst.width = computedStyle.width(this.element) + 'px';\n        // rst.height = this.element.offsetHeight + 'px';\n\n        // Setting offsetWidth\n        rst.width = this._width();\n        rst.height = this._height();\n\n        // Adopt margins\n        rst.marginTop = styles.marginTop;\n        rst.marginBottom = styles.marginBottom;\n        rst.marginLeft = styles.marginLeft;\n        rst.marginRight = styles.marginRight;\n\n        // Adopt positioning\n        rst.cssFloat = styles.cssFloat;\n        rst.styleFloat = styles.styleFloat; //ie8;\n        rst.position = styles.position;\n        rst.top = styles.top;\n        rst.right = styles.right;\n        rst.bottom = styles.bottom;\n        rst.left = styles.left;\n        // rst.borderStyle = styles.borderStyle;\n\n        rst.display = styles.display;\n      },\n      hide: function hide() {\n        this.replacer.style.display = 'none';\n      },\n      _width: function _width() {\n        return this.element.getBoundingClientRect().width + 'px';\n      },\n      _widthOffset: function _widthOffset() {\n        return this.element.offsetWidth + 'px';\n      },\n      _height: function _height() {\n        return jQuery(this.element).outerHeight() + 'px';\n      },\n      _heightOffset: function _heightOffset() {\n        return this.element.offsetHeight + 'px';\n      },\n      destroy: function destroy() {\n        $(this.replacer).remove();\n\n        // set properties to null to break references\n        for (var prop in this) {\n          if (this.hasOwnProperty(prop)) {\n            this[prop] = null;\n          }\n        }\n      }\n    };\n\n    var bcr = document.documentElement.getBoundingClientRect();\n    if (!bcr.width) {\n      MimicNode.prototype._width = MimicNode.prototype._widthOffset;\n      MimicNode.prototype._height = MimicNode.prototype._heightOffset;\n    }\n\n    return {\n      MimicNode: MimicNode,\n      computedStyle: computedStyle\n    };\n  }();\n\n  // Class handles vendor prefixes\n  function Prefix() {\n    // Cached vendor will be stored when it is detected\n    this._vendor = null;\n\n    //this._dummy = document.createElement('div');\n  }\n\n  Prefix.prototype = {\n    _vendors: {\n      webkit: {\n        cssPrefix: '-webkit-',\n        jsPrefix: 'Webkit'\n      },\n      moz: {\n        cssPrefix: '-moz-',\n        jsPrefix: 'Moz'\n      },\n      ms: {\n        cssPrefix: '-ms-',\n        jsPrefix: 'ms'\n      },\n      opera: {\n        cssPrefix: '-o-',\n        jsPrefix: 'O'\n      }\n    },\n\n    _prefixJsProperty: function _prefixJsProperty(vendor, prop) {\n      return vendor.jsPrefix + prop[0].toUpperCase() + prop.substr(1);\n    },\n    _prefixValue: function _prefixValue(vendor, value) {\n      return vendor.cssPrefix + value;\n    },\n    _valueSupported: function _valueSupported(prop, value, dummy) {\n      // IE8 will throw Illegal Argument when you attempt to set a not supported value.\n      try {\n        dummy.style[prop] = value;\n        return dummy.style[prop] === value;\n      } catch (er) {\n        return false;\n      }\n    },\n\n\n    /**\n     * Returns true if the property is supported\n     * @param {string} prop Property name\n     * @returns {boolean}\n     */\n    propertySupported: function propertySupported(prop) {\n      // Supported property will return either inine style value or an empty string.\n      // Undefined means property is not supported.\n      return document.documentElement.style[prop] !== undefined;\n    },\n\n\n    /**\n     * Returns prefixed property name for js usage\n     * @param {string} prop Property name\n     * @returns {string|null}\n     */\n    getJsProperty: function getJsProperty(prop) {\n      // Try native property name first.\n      if (this.propertySupported(prop)) {\n        return prop;\n      }\n\n      // Prefix it if we know the vendor already\n      if (this._vendor) {\n        return this._prefixJsProperty(this._vendor, prop);\n      }\n\n      // We don't know the vendor, try all the possibilities\n      var prefixed;\n      for (var vendor in this._vendors) {\n        prefixed = this._prefixJsProperty(this._vendors[vendor], prop);\n        if (this.propertySupported(prefixed)) {\n          // Vendor detected. Cache it.\n          this._vendor = this._vendors[vendor];\n          return prefixed;\n        }\n      }\n\n      // Nothing worked\n      return null;\n    },\n\n\n    /**\n     * Returns supported css value for css property. Could be used to check support or get prefixed value string.\n     * @param {string} prop Property\n     * @param {string} value Value name\n     * @returns {string|null}\n     */\n    getCssValue: function getCssValue(prop, value) {\n      // Create dummy element to test value\n      var dummy = document.createElement('div');\n\n      // Get supported property name\n      var jsProperty = this.getJsProperty(prop);\n\n      // Try unprefixed value\n      if (this._valueSupported(jsProperty, value, dummy)) {\n        return value;\n      }\n\n      var prefixedValue;\n\n      // If we know the vendor already try prefixed value\n      if (this._vendor) {\n        prefixedValue = this._prefixValue(this._vendor, value);\n        if (this._valueSupported(jsProperty, prefixedValue, dummy)) {\n          return prefixedValue;\n        }\n      }\n\n      // Try all vendors\n      for (var vendor in this._vendors) {\n        prefixedValue = this._prefixValue(this._vendors[vendor], value);\n        if (this._valueSupported(jsProperty, prefixedValue, dummy)) {\n          // Vendor detected. Cache it.\n          this._vendor = this._vendors[vendor];\n          return prefixedValue;\n        }\n      }\n      // No support for value\n      return null;\n    }\n  };\n\n  var prefix = new Prefix();\n\n  // We will need this frequently. Lets have it as a global until we encapsulate properly.\n  var transformJsProperty = prefix.getJsProperty('transform');\n\n  // Will hold if browser creates a positioning context for fixed elements.\n  var fixedPositioningContext;\n\n  // Checks if browser creates a positioning context for fixed elements.\n  // Transform rule will create a positioning context on browsers who follow the spec.\n  // Ie for example will fix it according to documentElement\n  // TODO: Other css rules also effects. perspective creates at chrome but not in firefox. transform-style preserve3d effects.\n  function checkFixedPositioningContextSupport() {\n    var support = false;\n    var parent = document.createElement('div');\n    var child = document.createElement('div');\n    parent.appendChild(child);\n    parent.style[transformJsProperty] = 'translate(0)';\n    // Make sure there is space on top of parent\n    parent.style.marginTop = '10px';\n    parent.style.visibility = 'hidden';\n    child.style.position = 'fixed';\n    child.style.top = 0;\n    document.body.appendChild(parent);\n    var rect = child.getBoundingClientRect();\n    // If offset top is greater than 0 meand transformed element created a positioning context.\n    if (rect.top > 0) {\n      support = true;\n    }\n    // Remove dummy content\n    document.body.removeChild(parent);\n    return support;\n  }\n\n  // It will return null if position sticky is not supported\n  var nativeStickyValue = prefix.getCssValue('position', 'sticky');\n\n  // It will return null if position fixed is not supported\n  var fixedPositionValue = prefix.getCssValue('position', 'fixed');\n\n  // Dirty business\n  var ie = navigator.appName === 'Microsoft Internet Explorer';\n  var ieversion;\n\n  if (ie) {\n    ieversion = parseFloat(navigator.appVersion.split('MSIE')[1]);\n  }\n\n  function FixTo(child, parent, options) {\n    this.child = child;\n    this._$child = $(child);\n    this.parent = parent;\n    this.options = {\n      className: 'fixto-fixed',\n      startAfterNode: {\n        enabled: false,\n        selector: ''\n      },\n      animations: {\n        enabled: false,\n        currentInAnimationClass: '',\n        currentOutAnimationClass: '',\n        allInAnimationsClasses: '',\n        allOutAnimationsClasses: '',\n        duration: 0\n      },\n      top: 0,\n      zIndex: ''\n    };\n    this._setOptions(options);\n\n    this._initAnimations();\n  }\n\n  FixTo.prototype = {\n    // Returns the total outerHeight of the elements passed to mind option. Will return 0 if none.\n    _mindtop: function _mindtop() {\n      var top = 0;\n      if (this._$mind) {\n        var el;\n        var rect;\n        var height;\n        for (var i = 0, l = this._$mind.length; i < l; i++) {\n          el = this._$mind[i];\n          rect = el.getBoundingClientRect();\n          if (rect.height) {\n            top += rect.height;\n          } else {\n            var styles = computedStyle.getAll(el);\n            top += el.offsetHeight + computedStyle.toFloat(styles.marginTop) + computedStyle.toFloat(styles.marginBottom);\n          }\n        }\n      }\n      return top;\n    },\n    _updateOutAnimationDuration: function _updateOutAnimationDuration() {\n      var animationDuration = this.options.animations.duration;\n      if (isNaN(animationDuration)) {\n        animationDuration = 0;\n      }\n\n      this._animationDuration = animationDuration;\n    },\n    _initAnimations: function _initAnimations() {\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      this._$child.removeClass(animations.allOutAnimationsClasses);\n\n      var self = this;\n      this._updateOutAnimationDuration();\n\n      this._animationOutDebounce = $.debounce(function () {\n        self._$child.removeClass(self.options.animations.allOutAnimationsClasses);\n        self._inOutAnimation = false;\n        self._unfix();\n        self._removeTransitionFromOutAnimation();\n      }, this._animationDuration);\n\n      this._animationInDebounce = $.debounce(function () {\n        self._inInAnimation = false;\n        self._$child.removeClass(self.options.animations.allInAnimationsClasses);\n      }, this._animationDuration);\n    },\n    _removeTransitionFromOutAnimation: function _removeTransitionFromOutAnimation() {\n      var noTransitionClass = 'h-global-transition-disable';\n      this._$child.addClass(noTransitionClass);\n\n      var childTransitionDuration = this._$child.css('transition-duration');\n      var isNumberRegex = /\\d+/;\n      var transitionDurationInS = childTransitionDuration.match(isNumberRegex)[0];\n      if (!transitionDurationInS) {\n        transitionDurationInS = 0;\n      }\n\n      var transitionDurationInMs = transitionDurationInS * 1000;\n      var transitionBuffer = 500;\n      var transitionDuration = transitionDurationInMs + transitionBuffer;\n      var self = this;\n      setTimeout(function () {\n        if (!self._$child) {\n          return;\n        }\n        self._$child.removeClass(noTransitionClass);\n      }, transitionDuration);\n    },\n    _passedStartAfterNode: function _passedStartAfterNode() {\n      var $startAfterNode = this._$startAfterNode;\n      if ($startAfterNode && $startAfterNode.length > 0) {\n        var offsetTop = this._afterElementOffsetTop;\n        var height = $startAfterNode.outerHeight();\n        return this._scrollTop > offsetTop + height;\n      }\n      return true;\n    },\n\n    // Public method to stop the behaviour of this instance.\n    stop: function stop() {\n      this._stop();\n      this._running = false;\n    },\n\n\n    // Public method starts the behaviour of this instance.\n    start: function start() {\n      // Start only if it is not running not to attach event listeners multiple times.\n      if (!this._running) {\n        this._start();\n        this._running = true;\n      }\n    },\n\n\n    //Public method to destroy fixto behaviour\n    destroy: function destroy() {\n      this.stop();\n\n      this._destroy();\n\n      // Remove jquery data from the element\n      this._$child.removeData('fixto-instance');\n\n      // set properties to null to break references\n      for (var prop in this) {\n        if (this.hasOwnProperty(prop)) {\n          this[prop] = null;\n        }\n      }\n    },\n    _setOptions: function _setOptions(options) {\n      $.extend(true, this.options, options);\n      if (this.options.mind) {\n        this._$mind = $(this.options.mind);\n      }\n      if (this.options.startAfterNode.enabled && this.options.startAfterNode.selector) {\n        this._$startAfterNode = $(this.options.startAfterNode.selector);\n      }\n    },\n    setOptions: function setOptions(options) {\n      this._setOptions(options);\n      this.refresh();\n    },\n\n\n    // Methods could be implemented by subclasses\n\n    _stop: function _stop() {},\n    _start: function _start() {},\n    _destroy: function _destroy() {},\n    refresh: function refresh() {}\n  };\n\n  // Class FixToContainer\n  function FixToContainer(child, parent, options) {\n    /** FIXME If you have a saved navigation with sticky, when you enter the page, this class creates two objects\n     * and because of that there are two events listeners. There should be only one instance of this class for each\n     * navigation\n     */\n    //The script still is called two times but now both of the calls pass the check\n    // if (!child || !this._scriptCallIsValid(child)) {\n    //   return;\n    // }\n    FixTo.call(this, child, parent, options);\n    this._replacer = new mimicNode.MimicNode(child);\n    this._ghostNode = this._replacer.replacer;\n\n    this._saveStyles();\n\n    this._saveViewportHeight();\n\n    // Create anonymous functions and keep references to register and unregister events.\n    this._proxied_onscroll = this._bind(this._onscroll, this);\n    this._proxied_onresize = this._bind(this._onresize, this);\n\n    this.start();\n  }\n\n  FixToContainer.prototype = new FixTo();\n\n  $.extend(FixToContainer.prototype, {\n    // Returns an anonymous function that will call the given function in the given context\n    _bind: function _bind(fn, context) {\n      return function () {\n        return fn.call(context);\n      };\n    },\n\n\n    // at ie8 maybe only in vm window resize event fires everytime an element is resized.\n    _toresize: ieversion === 8 ? document.documentElement : window,\n\n    //TODO @catalin this is a temporary workaround, until the issue: #0030376 is fixed\n    _scriptCallIsValid: function _scriptCallIsValid(child) {\n      var isInCustomizer = Colibri.isCustomizerPreview();\n      if (!isInCustomizer) {\n        return true;\n      }\n      var vueNavSelector = '.h-navigation_outer';\n      var vueNav = $(child).closest(vueNavSelector).get(0);\n      if (!vueNav) {\n        return true;\n      }\n      if (vueNav.__vue__) {\n        return true;\n      }\n      return false;\n    },\n\n    _onscroll: function _onscroll() {\n      /**\n       * TODO @catalin, now sometimes the child height is 0, other times is correct that ruins the out animation logic,\n       * until that is fixed this is a workaround to that problem. When the child height will always be correct remove\n       * this condition.\n       */\n      if (this._$child.outerHeight() === 0) {\n        return;\n      }\n      this._scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      this._parentBottom = this.parent.offsetHeight + this._fullOffset('offsetTop', this.parent);\n      if (this.options.startAfterNode && !this._passedStartAfterNode()) {\n        if (this.fixed && !this._inOutAnimation) {\n          this._unfixFromScrollListener();\n        }\n        return;\n      }\n      // if (this.options.mindBottomPadding !== false) {\n      //     this._parentBottom -= computedStyle.getFloat(this.parent, 'paddingBottom');\n      // }\n\n      // if (this.options.toBottom) {\n      //     this._fix();\n      //     this._adjust();\n      //     return\n      // }\n\n      // if (this.options.toBottom) {\n      //     this.options.top = this._viewportHeight - computedStyle.toFloat(computedStyle.getAll(this.child).height) - this.options.topSpacing;\n      // }\n      if (!this.fixed) {\n        var childStyles = computedStyle.getAll(this.child);\n\n        if (this._scrollTop < this._parentBottom && this._scrollTop > this._fullOffset('offsetTop', this.child) - this.options.top - this._mindtop() && this._viewportHeight > this.child.offsetHeight + computedStyle.toFloat(childStyles.marginTop) + computedStyle.toFloat(childStyles.marginBottom) || this.options.toBottom) {\n          this._fix();\n          this._adjust();\n        }\n      } else {\n        if (this.options.toBottom) {\n          if (this._scrollTop >= this._fullOffset('offsetTop', this._ghostNode)) {\n            this._unfixFromScrollListener();\n            return;\n          }\n        } else {\n          if (this._scrollTop > this._parentBottom || this._scrollTop <= this._fullOffset('offsetTop', this._ghostNode) - this.options.top - this._mindtop()) {\n            this._unfixFromScrollListener();\n            return;\n          }\n        }\n        this._adjust();\n      }\n    },\n\n    _adjust: function _adjust() {\n      var top = 0;\n      var mindTop = this._mindtop();\n      var diff = 0;\n      var childStyles = computedStyle.getAll(this.child);\n      var context = null;\n\n      if (fixedPositioningContext) {\n        // Get positioning context.\n        context = this._getContext();\n        if (context) {\n          // There is a positioning context. Top should be according to the context.\n          top = Math.abs(context.getBoundingClientRect().top);\n        }\n      }\n\n      diff = this._parentBottom - this._scrollTop - (this.child.offsetHeight + computedStyle.toFloat(childStyles.marginBottom) + mindTop + this.options.top);\n\n      if (diff > 0) {\n        diff = 0;\n      }\n\n      if (this.options.toBottom) {\n        // this.child.style.top = (diff + mindTop + top + this.options.top) - computedStyle.toFloat(childStyles.marginTop) + 'px';\n      } else {\n        var _top = this.options.top;\n        if (_top === 0) {\n          _top = $('body').offset().top;\n        }\n\n        this.child.style.top = Math.round(diff + mindTop + top + _top - computedStyle.toFloat(childStyles.marginTop)) + 'px';\n      }\n    },\n\n    // Calculate cumulative offset of the element.\n    // Optionally according to context\n    _fullOffset: function _fullOffset(offsetName, elm, context) {\n      var offset = elm[offsetName];\n      var offsetParent = elm.offsetParent;\n\n      // Add offset of the ascendent tree until we reach to the document root or to the given context\n      while (offsetParent !== null && offsetParent !== context) {\n        offset = offset + offsetParent[offsetName];\n        offsetParent = offsetParent.offsetParent;\n      }\n\n      return offset;\n    },\n\n    // Get positioning context of the element.\n    // We know that the closest parent that a transform rule applied will create a positioning context.\n    _getContext: function _getContext() {\n      var parent;\n      var element = this.child;\n      var context = null;\n      var styles;\n\n      // Climb up the treee until reaching the context\n      while (!context) {\n        parent = element.parentNode;\n        if (parent === document.documentElement) {\n          return null;\n        }\n\n        styles = computedStyle.getAll(parent);\n        // Element has a transform rule\n        if (styles[transformJsProperty] !== 'none') {\n          context = parent;\n          break;\n        }\n        element = parent;\n      }\n      return context;\n    },\n\n\n    _fix: function _fix() {\n      var child = this.child;\n      var childStyle = child.style;\n      var childStyles = computedStyle.getAll(child);\n      var left = child.getBoundingClientRect().left;\n      var width = childStyles.width;\n\n      this._saveStyles();\n\n      if (document.documentElement.currentStyle) {\n        // Function for ie<9. When hasLayout is not triggered in ie7, he will report currentStyle as auto, clientWidth as 0. Thus using offsetWidth.\n        // Opera also falls here\n\n        width = child.offsetWidth;\n        if (childStyles.boxSizing !== 'border-box') {\n          width = width - (computedStyle.toFloat(childStyles.paddingLeft) + computedStyle.toFloat(childStyles.paddingRight) + computedStyle.toFloat(childStyles.borderLeftWidth) + computedStyle.toFloat(childStyles.borderRightWidth));\n        }\n\n        width += 'px';\n      }\n\n      // Ie still fixes the container according to the viewport.\n      if (fixedPositioningContext) {\n        var context = this._getContext();\n        // if(context) {\n        //     // There is a positioning context. Left should be according to the context.\n        //     left = child.getBoundingClientRect().left - context.getBoundingClientRect().left;\n        // } else {\n        left = this._$child.offset().left;\n        // }\n      }\n\n      this._replacer.replace();\n\n      childStyle.left =\n      /*left + \"px\"; */left - computedStyle.toFloat(childStyles.marginLeft) + 'px';\n      childStyle.width = width;\n\n      childStyle.position = 'fixed';\n      if (this.options.toBottom) {\n        childStyle.top = '';\n        childStyle.bottom = this.options.top + computedStyle.toFloat(childStyles.marginBottom) + 'px';\n      } else {\n        childStyle.bottom = '';\n        var _top = this.options.top;\n\n        if (_top === 0) {\n          _top = $('body').offset().top;\n        }\n        childStyle.top = this._mindtop() + _top - computedStyle.toFloat(childStyles.marginTop) + 'px';\n      }\n\n      if (this.options.zIndex) {\n        this.child.style.zIndex = this.options.zIndex;\n      }\n\n      this._$child.addClass(this.options.className);\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      if (animations.enabled) {\n        this._$child.addClass(animations.currentInAnimationClass);\n        if (!this._inInAnimation) {\n          this._inInAnimation = true;\n          this._animationInDebounce();\n        }\n      }\n      this.fixed = true;\n      this._$child.trigger('fixto-added');\n    },\n    _unfixFromScrollListener: function _unfixFromScrollListener() {\n      if (this.options.animations.enabled) {\n        this._unfixTriggerAnimation();\n      } else {\n        this._unfix();\n      }\n    },\n    _getAfterElementOffsetTop: function _getAfterElementOffsetTop() {\n      var $node = this._$startAfterNode;\n      var defaultValue = 0;\n      if ($node && $node.length > 0) {\n        var elem = $node.get(0);\n        var distance = 0;\n        do {\n          // Increase our distance counter\n          distance += elem.offsetTop;\n\n          // Set the element to it's parent\n          elem = elem.offsetParent;\n        } while (elem);\n        distance = distance < defaultValue ? defaultValue : distance;\n        return distance;\n      }\n      return defaultValue;\n    },\n\n    _unfix: function _unfix() {\n      this._replacer.hide();\n      var childStyle = this.child.style;\n      childStyle.position = this._childOriginalPosition;\n      childStyle.top = this._childOriginalTop;\n      childStyle.bottom = this._childOriginalBottom;\n      childStyle.width = this._childOriginalWidth;\n      childStyle.left = this._childOriginalLeft;\n      childStyle.zIndex = this._childOriginalZIndex;\n      if (!this.options.always) {\n        this._$child.removeClass(this.options.className);\n        this._$child.trigger('fixto-removed');\n      }\n      this.fixed = false;\n    },\n    _unfixTriggerAnimation: function _unfixTriggerAnimation() {\n      this._animationInDebounce.flush();\n      var animations = this.options.animations;\n      this._$child.removeClass(animations.allInAnimationsClasses);\n      this._$child.removeClass(animations.allOutAnimationsClasses);\n      if (animations.enabled) {\n        this._$child.addClass(animations.currentOutAnimationClass);\n      }\n      this._inOutAnimation = true;\n      this._animationOutDebounce();\n    },\n    _saveStyles: function _saveStyles() {\n      this._animationOutDebounce.flush();\n      var childStyle = this.child.style;\n      this._childOriginalPosition = childStyle.position;\n      if (this.options.toBottom) {\n        this._childOriginalTop = '';\n        this._childOriginalBottom = childStyle.bottom;\n      } else {\n        this._childOriginalTop = childStyle.top;\n        this._childOriginalBottom = '';\n      }\n      this._childOriginalWidth = childStyle.width;\n      this._childOriginalLeft = childStyle.left;\n      this._childOriginalZIndex = childStyle.zIndex;\n      this._afterElementOffsetTop = this._getAfterElementOffsetTop();\n    },\n    _onresize: function _onresize() {\n      this.refresh();\n    },\n    _saveViewportHeight: function _saveViewportHeight() {\n      // ie8 doesn't support innerHeight\n      this._viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n    },\n    _stop: function _stop() {\n      // Unfix the container immediately.\n      this._unfix();\n      // remove event listeners\n      $(window).unbind('scroll.fixto mousewheel', this._proxied_onscroll);\n      $(this._toresize).unbind('resize.fixto', this._proxied_onresize);\n    },\n    _start: function _start() {\n      // Trigger onscroll to have the effect immediately.\n      this._onscroll();\n\n      // Attach event listeners\n      $(window).bind('scroll.fixto mousewheel', this._proxied_onscroll);\n      $(this._toresize).bind('resize.fixto', this._proxied_onresize);\n    },\n    _destroy: function _destroy() {\n      // Destroy mimic node instance\n      this._replacer.destroy();\n    },\n    refresh: function refresh() {\n      this._saveViewportHeight();\n      this._unfix();\n      this._onscroll();\n    }\n  });\n\n  function NativeSticky(child, parent, options) {\n    FixTo.call(this, child, parent, options);\n    this.start();\n  }\n\n  NativeSticky.prototype = new FixTo();\n\n  $.extend(NativeSticky.prototype, {\n    _start: function _start() {\n      var childStyles = computedStyle.getAll(this.child);\n\n      this._childOriginalPosition = childStyles.position;\n      this._childOriginalTop = childStyles.top;\n\n      this.child.style.position = nativeStickyValue;\n      this.refresh();\n    },\n    _stop: function _stop() {\n      this.child.style.position = this._childOriginalPosition;\n      this.child.style.top = this._childOriginalTop;\n    },\n    refresh: function refresh() {\n      this.child.style.top = this._mindtop() + this.options.top + 'px';\n    }\n  });\n\n  var fixTo = function fixTo(childElement, parentElement, options) {\n    if (nativeStickyValue && !options || nativeStickyValue && options && options.useNativeSticky !== false) {\n      // Position sticky supported and user did not disabled the usage of it.\n      return new NativeSticky(childElement, parentElement, options);\n    } else if (fixedPositionValue) {\n      // Position fixed supported\n\n      if (fixedPositioningContext === undefined) {\n        // We don't know yet if browser creates fixed positioning contexts. Check it.\n        fixedPositioningContext = checkFixedPositioningContextSupport();\n      }\n\n      return new FixToContainer(childElement, parentElement, options);\n    } else {\n      return 'Neither fixed nor sticky positioning supported';\n    }\n  };\n\n  /*\n  No support for ie lt 8\n  */\n\n  if (ieversion < 8) {\n    fixTo = function fixTo() {\n      return 'not supported';\n    };\n  }\n\n  // Let it be a jQuery Plugin\n  $.fn.fixTo = function (targetSelector, options) {\n    var $targets = $(targetSelector);\n\n    var i = 0;\n    return this.each(function () {\n      // Check the data of the element.\n      var instance = $(this).data('fixto-instance');\n\n      // If the element is not bound to an instance, create the instance and save it to elements data.\n      if (!instance) {\n        $(this).data('fixto-instance', fixTo(this, $targets[i], options));\n      } else {\n        // If we already have the instance here, expect that targetSelector parameter will be a string\n        // equal to a public methods name. Run the method on the instance without checking if\n        // it exists or it is a public method or not. Cause nasty errors when necessary.\n        var method = targetSelector;\n        instance[method].call(instance, options);\n      }\n      i++;\n    });\n  };\n\n  /*\n      Expose\n  */\n\n  return {\n    FixToContainer: FixToContainer,\n    fixTo: fixTo,\n    computedStyle: computedStyle,\n    mimicNode: mimicNode\n  };\n})(window.jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'overlap';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      data: {}\n    };\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var self = this;\n      $(window).bind('resize.overlap orientationchange.overlap', function () {\n        setTimeout(self.resizeCallback.bind(self), 50);\n      });\n      self.resizeCallback();\n    },\n    stop: function stop() {\n      $(window).off('.overlap');\n      if (this.$sheet) {\n        document.head.removeChild(this.$sheet);\n        this.$sheet = null;\n      }\n    },\n    computePadding: function computePadding() {\n      if (!this.$sheet) {\n        this.$sheet = document.createElement('style');\n        document.head.appendChild(this.$sheet);\n      }\n      var paddingTop = this.$element[0].getBoundingClientRect().height + 'px !important;';\n      this.$sheet.innerHTML = '.h-navigation-padding{padding-top:' + paddingTop + '}';\n    },\n    resizeCallback: function resizeCallback() {\n      this.computePadding();\n    }\n  };\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL25hdmlnYXRpb24vc2NyaXB0cy9vdmVybGFwLmpzPzY5NDQiXSwibmFtZXMiOlsiJCIsIkNvbGlicmkiLCJjbGFzc05hbWUiLCJDb21wb25lbnQiLCJlbGVtZW50Iiwib3B0aW9ucyIsIm5hbWVzcGFjZSIsImRlZmF1bHRzIiwiZGF0YSIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJwcm90b3R5cGUiLCJzZWxmIiwid2luZG93IiwiYmluZCIsInNldFRpbWVvdXQiLCJyZXNpemVDYWxsYmFjayIsInN0b3AiLCJvZmYiLCIkc2hlZXQiLCJkb2N1bWVudCIsImhlYWQiLCJyZW1vdmVDaGlsZCIsImNvbXB1dGVQYWRkaW5nIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicGFkZGluZ1RvcCIsIiRlbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGVpZ2h0IiwiaW5uZXJIVE1MIiwiaW5oZXJpdHMiLCJQbHVnaW4iLCJjcmVhdGUiLCJhdXRvbG9hZCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxVQUFTQSxDQUFULEVBQVlDLE9BQVosRUFBcUI7QUFDcEIsTUFBSUMsWUFBWSxTQUFoQjs7QUFFQSxNQUFJQyxZQUFZLFNBQVpBLFNBQVksQ0FBU0MsT0FBVCxFQUFrQkMsT0FBbEIsRUFBMkI7QUFDekMsU0FBS0MsU0FBTCxHQUFpQkosU0FBakI7QUFDQSxTQUFLSyxRQUFMLEdBQWdCO0FBQ2RDLFlBQU07QUFEUSxLQUFoQjs7QUFJQTtBQUNBUCxZQUFRUSxLQUFSLENBQWMsSUFBZCxFQUFvQkMsU0FBcEI7O0FBRUE7QUFDQSxTQUFLQyxLQUFMO0FBQ0QsR0FYRDs7QUFhQVIsWUFBVVMsU0FBVixHQUFzQjtBQUNwQkQsU0FEb0IsbUJBQ1o7QUFDTixVQUFJRSxPQUFPLElBQVg7QUFDQWIsUUFBRWMsTUFBRixFQUFVQyxJQUFWLENBQWUsMENBQWYsRUFBMkQsWUFBVztBQUNwRUMsbUJBQVdILEtBQUtJLGNBQUwsQ0FBb0JGLElBQXBCLENBQXlCRixJQUF6QixDQUFYLEVBQTJDLEVBQTNDO0FBQ0QsT0FGRDtBQUdBQSxXQUFLSSxjQUFMO0FBQ0QsS0FQbUI7QUFTcEJDLFFBVG9CLGtCQVNiO0FBQ0xsQixRQUFFYyxNQUFGLEVBQVVLLEdBQVYsQ0FBYyxVQUFkO0FBQ0EsVUFBSSxLQUFLQyxNQUFULEVBQWlCO0FBQ2ZDLGlCQUFTQyxJQUFULENBQWNDLFdBQWQsQ0FBMEIsS0FBS0gsTUFBL0I7QUFDQSxhQUFLQSxNQUFMLEdBQWMsSUFBZDtBQUNEO0FBQ0YsS0FmbUI7QUFpQnBCSSxrQkFqQm9CLDRCQWlCSDtBQUNmLFVBQUksQ0FBQyxLQUFLSixNQUFWLEVBQWtCO0FBQ2hCLGFBQUtBLE1BQUwsR0FBY0MsU0FBU0ksYUFBVCxDQUF1QixPQUF2QixDQUFkO0FBQ0FKLGlCQUFTQyxJQUFULENBQWNJLFdBQWQsQ0FBMEIsS0FBS04sTUFBL0I7QUFDRDtBQUNELFVBQUlPLGFBQ0YsS0FBS0MsUUFBTCxDQUFjLENBQWQsRUFBaUJDLHFCQUFqQixHQUF5Q0MsTUFBekMsR0FBa0QsZ0JBRHBEO0FBRUEsV0FBS1YsTUFBTCxDQUFZVyxTQUFaLEdBQ0UsdUNBQXVDSixVQUF2QyxHQUFvRCxHQUR0RDtBQUVELEtBMUJtQjtBQTRCcEJWLGtCQTVCb0IsNEJBNEJIO0FBQ2YsV0FBS08sY0FBTDtBQUNEO0FBOUJtQixHQUF0QjtBQWdDQXJCLFlBQVU2QixRQUFWLENBQW1CL0IsT0FBbkI7QUFDQUEsVUFBUUMsU0FBUixJQUFxQkMsU0FBckI7O0FBRUFGLFVBQVFnQyxNQUFSLENBQWVDLE1BQWYsQ0FBc0JoQyxTQUF0QjtBQUNBRCxVQUFRZ0MsTUFBUixDQUFlRSxRQUFmLENBQXdCakMsU0FBeEI7QUFDRCxDQXJERCxFQXFER2tDLE1BckRILEVBcURXbkMsT0FyRFgiLCJmaWxlIjoiMTE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCQsIENvbGlicmkpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICdvdmVybGFwJztcblxuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMubmFtZXNwYWNlID0gY2xhc3NOYW1lO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBkYXRhOiB7fSxcbiAgICB9O1xuXG4gICAgLy8gUGFyZW50IENvbnN0cnVjdG9yXG4gICAgQ29saWJyaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gSW5pdGlhbGl6YXRpb25cbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH07XG5cbiAgQ29tcG9uZW50LnByb3RvdHlwZSA9IHtcbiAgICBzdGFydCgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICQod2luZG93KS5iaW5kKCdyZXNpemUub3ZlcmxhcCBvcmllbnRhdGlvbmNoYW5nZS5vdmVybGFwJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldFRpbWVvdXQoc2VsZi5yZXNpemVDYWxsYmFjay5iaW5kKHNlbGYpLCA1MCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGYucmVzaXplQ2FsbGJhY2soKTtcbiAgICB9LFxuXG4gICAgc3RvcCgpIHtcbiAgICAgICQod2luZG93KS5vZmYoJy5vdmVybGFwJyk7XG4gICAgICBpZiAodGhpcy4kc2hlZXQpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0aGlzLiRzaGVldCk7XG4gICAgICAgIHRoaXMuJHNoZWV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZVBhZGRpbmcoKSB7XG4gICAgICBpZiAoIXRoaXMuJHNoZWV0KSB7XG4gICAgICAgIHRoaXMuJHNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLiRzaGVldCk7XG4gICAgICB9XG4gICAgICB2YXIgcGFkZGluZ1RvcCA9XG4gICAgICAgIHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgJ3B4ICFpbXBvcnRhbnQ7JztcbiAgICAgIHRoaXMuJHNoZWV0LmlubmVySFRNTCA9XG4gICAgICAgICcuaC1uYXZpZ2F0aW9uLXBhZGRpbmd7cGFkZGluZy10b3A6JyArIHBhZGRpbmdUb3AgKyAnfSc7XG4gICAgfSxcblxuICAgIHJlc2l6ZUNhbGxiYWNrKCkge1xuICAgICAgdGhpcy5jb21wdXRlUGFkZGluZygpO1xuICAgIH0sXG4gIH07XG4gIENvbXBvbmVudC5pbmhlcml0cyhDb2xpYnJpKTtcbiAgQ29saWJyaVtjbGFzc05hbWVdID0gQ29tcG9uZW50O1xuXG4gIENvbGlicmkuUGx1Z2luLmNyZWF0ZShjbGFzc05hbWUpO1xuICBDb2xpYnJpLlBsdWdpbi5hdXRvbG9hZChjbGFzc05hbWUpO1xufSkoalF1ZXJ5LCBDb2xpYnJpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvbmF2aWdhdGlvbi9zY3JpcHRzL292ZXJsYXAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///114\n");

/***/ }),
/* 115 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'masonry';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {};\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    this.start();\n  };\n\n  function attributeExistsAndFalse($node, attrName) {\n    if ($node[0].hasAttribute(attrName) && $node.attr(attrName) != 'true') {\n      return true;\n    }\n  }\n  function showMasonry($node) {\n    // check for old version of masonry, atribute not used anymore//\n    if (attributeExistsAndFalse($node, 'data-show-masonry') || attributeExistsAndFalse($node, 'show-masonry')) {\n      return false;\n    }\n    return true;\n  }\n  Component.prototype = {\n    start: function start() {\n      var masonry = this.$element;\n      if (!showMasonry(masonry)) {\n        return;\n      }\n\n      masonry.masonry({\n        itemSelector: '.masonry-item',\n        columnWidth: '.masonry-item',\n        percentPosition: true\n      });\n\n      (function () {\n        var images = masonry.find('img');\n        var loadedImages = 0;\n        var completed = 0;\n\n        function imageLoaded() {\n          loadedImages++;\n          if (images.length === loadedImages) {\n            try {\n              masonry.data().masonry.layout();\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        }\n\n        images.each(function () {\n          if (this.complete) {\n            completed++;\n            imageLoaded();\n          } else {\n            $(this).on('load', imageLoaded);\n            $(this).on('error', imageLoaded);\n          }\n        });\n        if (images.length !== completed) {\n          if (document.readyState == 'complete') {\n            setTimeout(function () {\n              masonry.data().masonry.layout();\n            }, 10);\n          }\n        }\n\n        $(window).on('load', function () {\n          masonry.data().masonry.layout();\n        });\n      })();\n    },\n    stop: function stop() {\n      try {\n        var masonry = this.$element;\n        masonry.masonry('destroy');\n      } catch (e) {}\n    },\n    restart: function restart() {\n      this.stop();\n      this.start();\n    },\n    loadImages: function loadImages() {}\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2NvbW1vbi9zY3JpcHRzL21hc29ucnkuanM/YzIxMyJdLCJuYW1lcyI6WyIkIiwiQ29saWJyaSIsImNsYXNzTmFtZSIsIkNvbXBvbmVudCIsImVsZW1lbnQiLCJvcHRpb25zIiwibmFtZXNwYWNlIiwiZGVmYXVsdHMiLCJhcHBseSIsImFyZ3VtZW50cyIsInN0YXJ0IiwiYXR0cmlidXRlRXhpc3RzQW5kRmFsc2UiLCIkbm9kZSIsImF0dHJOYW1lIiwiaGFzQXR0cmlidXRlIiwiYXR0ciIsInNob3dNYXNvbnJ5IiwicHJvdG90eXBlIiwibWFzb25yeSIsIiRlbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwiY29sdW1uV2lkdGgiLCJwZXJjZW50UG9zaXRpb24iLCJpbWFnZXMiLCJmaW5kIiwibG9hZGVkSW1hZ2VzIiwiY29tcGxldGVkIiwiaW1hZ2VMb2FkZWQiLCJsZW5ndGgiLCJkYXRhIiwibGF5b3V0IiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImVhY2giLCJjb21wbGV0ZSIsIm9uIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwic2V0VGltZW91dCIsIndpbmRvdyIsInN0b3AiLCJyZXN0YXJ0IiwibG9hZEltYWdlcyIsImluaGVyaXRzIiwiUGx1Z2luIiwiY3JlYXRlIiwiYXV0b2xvYWQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZQyxPQUFaLEVBQXFCO0FBQ3BCLE1BQUlDLFlBQVksU0FBaEI7O0FBRUEsTUFBSUMsWUFBWSxTQUFaQSxTQUFZLENBQVNDLE9BQVQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3pDLFNBQUtDLFNBQUwsR0FBaUJKLFNBQWpCO0FBQ0EsU0FBS0ssUUFBTCxHQUFnQixFQUFoQjtBQUNBO0FBQ0FOLFlBQVFPLEtBQVIsQ0FBYyxJQUFkLEVBQW9CQyxTQUFwQjtBQUNBLFNBQUtDLEtBQUw7QUFDRCxHQU5EOztBQVFBLFdBQVNDLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3Q0MsUUFBeEMsRUFBa0Q7QUFDaEQsUUFBSUQsTUFBTSxDQUFOLEVBQVNFLFlBQVQsQ0FBc0JELFFBQXRCLEtBQW1DRCxNQUFNRyxJQUFOLENBQVdGLFFBQVgsS0FBd0IsTUFBL0QsRUFBdUU7QUFDckUsYUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNELFdBQVNHLFdBQVQsQ0FBcUJKLEtBQXJCLEVBQTRCO0FBQzFCO0FBQ0EsUUFDRUQsd0JBQXdCQyxLQUF4QixFQUErQixtQkFBL0IsS0FDQUQsd0JBQXdCQyxLQUF4QixFQUErQixjQUEvQixDQUZGLEVBR0U7QUFDQSxhQUFPLEtBQVA7QUFDRDtBQUNELFdBQU8sSUFBUDtBQUNEO0FBQ0RULFlBQVVjLFNBQVYsR0FBc0I7QUFDcEJQLFNBRG9CLG1CQUNaO0FBQ04sVUFBSVEsVUFBVSxLQUFLQyxRQUFuQjtBQUNBLFVBQUksQ0FBQ0gsWUFBWUUsT0FBWixDQUFMLEVBQTJCO0FBQ3pCO0FBQ0Q7O0FBRURBLGNBQVFBLE9BQVIsQ0FBZ0I7QUFDZEUsc0JBQWMsZUFEQTtBQUVkQyxxQkFBYSxlQUZDO0FBR2RDLHlCQUFpQjtBQUhILE9BQWhCOztBQU1BLE9BQUMsWUFBVztBQUNWLFlBQUlDLFNBQVNMLFFBQVFNLElBQVIsQ0FBYSxLQUFiLENBQWI7QUFDQSxZQUFJQyxlQUFlLENBQW5CO0FBQ0EsWUFBSUMsWUFBWSxDQUFoQjs7QUFFQSxpQkFBU0MsV0FBVCxHQUF1QjtBQUNyQkY7QUFDQSxjQUFJRixPQUFPSyxNQUFQLEtBQWtCSCxZQUF0QixFQUFvQztBQUNsQyxnQkFBSTtBQUNGUCxzQkFBUVcsSUFBUixHQUFlWCxPQUFmLENBQXVCWSxNQUF2QjtBQUNELGFBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkMsc0JBQVFDLEtBQVIsQ0FBY0YsQ0FBZDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRFIsZUFBT1csSUFBUCxDQUFZLFlBQVc7QUFDckIsY0FBSSxLQUFLQyxRQUFULEVBQW1CO0FBQ2pCVDtBQUNBQztBQUNELFdBSEQsTUFHTztBQUNMM0IsY0FBRSxJQUFGLEVBQVFvQyxFQUFSLENBQVcsTUFBWCxFQUFtQlQsV0FBbkI7QUFDQTNCLGNBQUUsSUFBRixFQUFRb0MsRUFBUixDQUFXLE9BQVgsRUFBb0JULFdBQXBCO0FBQ0Q7QUFDRixTQVJEO0FBU0EsWUFBSUosT0FBT0ssTUFBUCxLQUFrQkYsU0FBdEIsRUFBaUM7QUFDL0IsY0FBSVcsU0FBU0MsVUFBVCxJQUF1QixVQUEzQixFQUF1QztBQUNyQ0MsdUJBQVcsWUFBVztBQUNwQnJCLHNCQUFRVyxJQUFSLEdBQWVYLE9BQWYsQ0FBdUJZLE1BQXZCO0FBQ0QsYUFGRCxFQUVHLEVBRkg7QUFHRDtBQUNGOztBQUVEOUIsVUFBRXdDLE1BQUYsRUFBVUosRUFBVixDQUFhLE1BQWIsRUFBcUIsWUFBVztBQUM5QmxCLGtCQUFRVyxJQUFSLEdBQWVYLE9BQWYsQ0FBdUJZLE1BQXZCO0FBQ0QsU0FGRDtBQUdELE9BcENEO0FBcUNELEtBbERtQjtBQW1EcEJXLFFBbkRvQixrQkFtRGI7QUFDTCxVQUFJO0FBQ0YsWUFBSXZCLFVBQVUsS0FBS0MsUUFBbkI7QUFDQUQsZ0JBQVFBLE9BQVIsQ0FBZ0IsU0FBaEI7QUFDRCxPQUhELENBR0UsT0FBT2EsQ0FBUCxFQUFVLENBQUU7QUFDZixLQXhEbUI7QUF5RHBCVyxXQXpEb0IscUJBeURWO0FBQ1IsV0FBS0QsSUFBTDtBQUNBLFdBQUsvQixLQUFMO0FBQ0QsS0E1RG1CO0FBNkRwQmlDLGNBN0RvQix3QkE2RFAsQ0FBRTtBQTdESyxHQUF0Qjs7QUFnRUF4QyxZQUFVeUMsUUFBVixDQUFtQjNDLE9BQW5CO0FBQ0FBLFVBQVFDLFNBQVIsSUFBcUJDLFNBQXJCO0FBQ0FGLFVBQVE0QyxNQUFSLENBQWVDLE1BQWYsQ0FBc0I1QyxTQUF0QjtBQUNBRCxVQUFRNEMsTUFBUixDQUFlRSxRQUFmLENBQXdCN0MsU0FBeEI7QUFDRCxDQTlGRCxFQThGRzhDLE1BOUZILEVBOEZXL0MsT0E5RlgiLCJmaWxlIjoiMTE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCQsIENvbGlicmkpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICdtYXNvbnJ5JztcblxuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMubmFtZXNwYWNlID0gY2xhc3NOYW1lO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7fTtcbiAgICAvLyBQYXJlbnQgQ29uc3RydWN0b3JcbiAgICBDb2xpYnJpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZUV4aXN0c0FuZEZhbHNlKCRub2RlLCBhdHRyTmFtZSkge1xuICAgIGlmICgkbm9kZVswXS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpICYmICRub2RlLmF0dHIoYXR0ck5hbWUpICE9ICd0cnVlJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNob3dNYXNvbnJ5KCRub2RlKSB7XG4gICAgLy8gY2hlY2sgZm9yIG9sZCB2ZXJzaW9uIG9mIG1hc29ucnksIGF0cmlidXRlIG5vdCB1c2VkIGFueW1vcmUvL1xuICAgIGlmIChcbiAgICAgIGF0dHJpYnV0ZUV4aXN0c0FuZEZhbHNlKCRub2RlLCAnZGF0YS1zaG93LW1hc29ucnknKSB8fFxuICAgICAgYXR0cmlidXRlRXhpc3RzQW5kRmFsc2UoJG5vZGUsICdzaG93LW1hc29ucnknKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBDb21wb25lbnQucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0KCkge1xuICAgICAgdmFyIG1hc29ucnkgPSB0aGlzLiRlbGVtZW50O1xuICAgICAgaWYgKCFzaG93TWFzb25yeShtYXNvbnJ5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hc29ucnkubWFzb25yeSh7XG4gICAgICAgIGl0ZW1TZWxlY3RvcjogJy5tYXNvbnJ5LWl0ZW0nLFxuICAgICAgICBjb2x1bW5XaWR0aDogJy5tYXNvbnJ5LWl0ZW0nLFxuICAgICAgICBwZXJjZW50UG9zaXRpb246IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW1hZ2VzID0gbWFzb25yeS5maW5kKCdpbWcnKTtcbiAgICAgICAgdmFyIGxvYWRlZEltYWdlcyA9IDA7XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIGltYWdlTG9hZGVkKCkge1xuICAgICAgICAgIGxvYWRlZEltYWdlcysrO1xuICAgICAgICAgIGlmIChpbWFnZXMubGVuZ3RoID09PSBsb2FkZWRJbWFnZXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG1hc29ucnkuZGF0YSgpLm1hc29ucnkubGF5b3V0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW1hZ2VzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29tcGxldGUpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlZCsrO1xuICAgICAgICAgICAgaW1hZ2VMb2FkZWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCh0aGlzKS5vbignbG9hZCcsIGltYWdlTG9hZGVkKTtcbiAgICAgICAgICAgICQodGhpcykub24oJ2Vycm9yJywgaW1hZ2VMb2FkZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbWFnZXMubGVuZ3RoICE9PSBjb21wbGV0ZWQpIHtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBtYXNvbnJ5LmRhdGEoKS5tYXNvbnJ5LmxheW91dCgpO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG1hc29ucnkuZGF0YSgpLm1hc29ucnkubGF5b3V0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkoKTtcbiAgICB9LFxuICAgIHN0b3AoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWFzb25yeSA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgICAgIG1hc29ucnkubWFzb25yeSgnZGVzdHJveScpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIHJlc3RhcnQoKSB7XG4gICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9LFxuICAgIGxvYWRJbWFnZXMoKSB7fSxcbiAgfTtcblxuICBDb21wb25lbnQuaW5oZXJpdHMoQ29saWJyaSk7XG4gIENvbGlicmlbY2xhc3NOYW1lXSA9IENvbXBvbmVudDtcbiAgQ29saWJyaS5QbHVnaW4uY3JlYXRlKGNsYXNzTmFtZSk7XG4gIENvbGlicmkuUGx1Z2luLmF1dG9sb2FkKGNsYXNzTmFtZSk7XG59KShqUXVlcnksIENvbGlicmkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbGlicmktZWRpdG9yL3BhZ2UtY29tcG9uZW50cy9jb21tb24vc2NyaXB0cy9tYXNvbnJ5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///115\n");

/***/ }),
/* 116 */
/***/ (function(module, exports) {

eval("(function ($, Colibri) {\n  var className = 'footer-parallax';\n\n  var Component = function Component(element, options) {\n    this.namespace = className;\n    this.defaults = {\n      activeClasses: {\n        header: 'h-footer-parallax-header-class',\n        content: 'h-footer-parallax-content-class',\n        footer: 'h-footer-parallax',\n        container: 'new-stacking-context'\n      },\n      selectors: {\n        /**\n         * TODO @catalin, when the .header .content and .footer classes can be found in the customizer remove the\n         * classes inserted in the vue components\n         */\n\n        header: '.page-header, .header',\n        content: '.page-content, .content',\n        container: '#page-top'\n      }\n    };\n\n    this.bindedResizeListener = this.resizeListener.bind(this);\n\n    // Parent Constructor\n    Colibri.apply(this, arguments);\n    // Initialization\n    this.start();\n  };\n\n  Component.prototype = {\n    start: function start() {\n      var selectors = this.opts.selectors;\n      var activeClasses = this.opts.activeClasses;\n      this.$content = $(selectors.content).first();\n      this.$header = $(selectors.header).first();\n      this.$container = $(selectors.container);\n\n      //TODO this.opts.enabled does not work, it does not update. When it will work this line should be replaced with\n      //if (this.opts.enabled) {\n      // if (this.$element.attr('data-enabled') !== 'true') {\n      //   return;\n      // }\n      this.$container.addClass(activeClasses.container);\n      this.$header.addClass(activeClasses.header);\n      this.$content.addClass(activeClasses.content);\n      this.$element.addClass(activeClasses.footer);\n\n      window.addResizeListener(this.$element[0], this.bindedResizeListener);\n      this.updateSiblingStyle();\n    },\n    stop: function stop() {\n      var activeClasses = this.opts.activeClasses;\n      if (this.$element.hasClass(activeClasses.footer)) {\n        this.$container.removeClass(activeClasses.container);\n        this.$header.removeClass(activeClasses.header);\n        this.$content.removeClass(activeClasses.content);\n        this.$element.removeClass(activeClasses.footer);\n        window.removeResizeListener(this.$element[0], this.bindedResizeListener);\n        this.$content.css('margin-bottom', '');\n      }\n    },\n    restart: function restart() {\n      this.stop();\n      this.start();\n    },\n    resizeListener: function resizeListener() {\n      this.updateSiblingStyle();\n    },\n    updateSiblingStyle: function updateSiblingStyle() {\n      var footerHeight = this.$element.outerHeight();\n      this.$content.css('margin-bottom', footerHeight + 'px');\n    }\n  };\n\n  Component.inherits(Colibri);\n  Colibri[className] = Component;\n  Colibri.Plugin.create(className);\n  Colibri.Plugin.autoload(className);\n})(jQuery, Colibri);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29saWJyaS1lZGl0b3IvcGFnZS1jb21wb25lbnRzL2Zvb3Rlci9zY3JpcHRzL2Zvb3Rlci1wYXJhbGF4LmpzPzE0YTEiXSwibmFtZXMiOlsiJCIsIkNvbGlicmkiLCJjbGFzc05hbWUiLCJDb21wb25lbnQiLCJlbGVtZW50Iiwib3B0aW9ucyIsIm5hbWVzcGFjZSIsImRlZmF1bHRzIiwiYWN0aXZlQ2xhc3NlcyIsImhlYWRlciIsImNvbnRlbnQiLCJmb290ZXIiLCJjb250YWluZXIiLCJzZWxlY3RvcnMiLCJiaW5kZWRSZXNpemVMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwiYmluZCIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnQiLCJwcm90b3R5cGUiLCJvcHRzIiwiJGNvbnRlbnQiLCJmaXJzdCIsIiRoZWFkZXIiLCIkY29udGFpbmVyIiwiYWRkQ2xhc3MiLCIkZWxlbWVudCIsIndpbmRvdyIsImFkZFJlc2l6ZUxpc3RlbmVyIiwidXBkYXRlU2libGluZ1N0eWxlIiwic3RvcCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsImNzcyIsInJlc3RhcnQiLCJmb290ZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsImluaGVyaXRzIiwiUGx1Z2luIiwiY3JlYXRlIiwiYXV0b2xvYWQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZQyxPQUFaLEVBQXFCO0FBQ3BCLE1BQUlDLFlBQVksaUJBQWhCOztBQUVBLE1BQUlDLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxPQUFULEVBQWtCQyxPQUFsQixFQUEyQjtBQUN6QyxTQUFLQyxTQUFMLEdBQWlCSixTQUFqQjtBQUNBLFNBQUtLLFFBQUwsR0FBZ0I7QUFDZEMscUJBQWU7QUFDYkMsZ0JBQVEsZ0NBREs7QUFFYkMsaUJBQVMsaUNBRkk7QUFHYkMsZ0JBQVEsbUJBSEs7QUFJYkMsbUJBQVc7QUFKRSxPQUREO0FBT2RDLGlCQUFXO0FBQ1Q7Ozs7O0FBS0FKLGdCQUFRLHVCQU5DO0FBT1RDLGlCQUFTLHlCQVBBO0FBUVRFLG1CQUFXO0FBUkY7QUFQRyxLQUFoQjs7QUFtQkEsU0FBS0Usb0JBQUwsR0FBNEIsS0FBS0MsY0FBTCxDQUFvQkMsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBNUI7O0FBRUE7QUFDQWYsWUFBUWdCLEtBQVIsQ0FBYyxJQUFkLEVBQW9CQyxTQUFwQjtBQUNBO0FBQ0EsU0FBS0MsS0FBTDtBQUNELEdBM0JEOztBQTZCQWhCLFlBQVVpQixTQUFWLEdBQXNCO0FBQ3BCRCxTQURvQixtQkFDWjtBQUNOLFVBQU1OLFlBQVksS0FBS1EsSUFBTCxDQUFVUixTQUE1QjtBQUNBLFVBQU1MLGdCQUFnQixLQUFLYSxJQUFMLENBQVViLGFBQWhDO0FBQ0EsV0FBS2MsUUFBTCxHQUFnQnRCLEVBQUVhLFVBQVVILE9BQVosRUFBcUJhLEtBQXJCLEVBQWhCO0FBQ0EsV0FBS0MsT0FBTCxHQUFleEIsRUFBRWEsVUFBVUosTUFBWixFQUFvQmMsS0FBcEIsRUFBZjtBQUNBLFdBQUtFLFVBQUwsR0FBa0J6QixFQUFFYSxVQUFVRCxTQUFaLENBQWxCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFLYSxVQUFMLENBQWdCQyxRQUFoQixDQUF5QmxCLGNBQWNJLFNBQXZDO0FBQ0EsV0FBS1ksT0FBTCxDQUFhRSxRQUFiLENBQXNCbEIsY0FBY0MsTUFBcEM7QUFDQSxXQUFLYSxRQUFMLENBQWNJLFFBQWQsQ0FBdUJsQixjQUFjRSxPQUFyQztBQUNBLFdBQUtpQixRQUFMLENBQWNELFFBQWQsQ0FBdUJsQixjQUFjRyxNQUFyQzs7QUFFQWlCLGFBQU9DLGlCQUFQLENBQXlCLEtBQUtGLFFBQUwsQ0FBYyxDQUFkLENBQXpCLEVBQTJDLEtBQUtiLG9CQUFoRDtBQUNBLFdBQUtnQixrQkFBTDtBQUNELEtBcEJtQjtBQXFCcEJDLFFBckJvQixrQkFxQmI7QUFDTCxVQUFNdkIsZ0JBQWdCLEtBQUthLElBQUwsQ0FBVWIsYUFBaEM7QUFDQSxVQUFJLEtBQUttQixRQUFMLENBQWNLLFFBQWQsQ0FBdUJ4QixjQUFjRyxNQUFyQyxDQUFKLEVBQWtEO0FBQ2hELGFBQUtjLFVBQUwsQ0FBZ0JRLFdBQWhCLENBQTRCekIsY0FBY0ksU0FBMUM7QUFDQSxhQUFLWSxPQUFMLENBQWFTLFdBQWIsQ0FBeUJ6QixjQUFjQyxNQUF2QztBQUNBLGFBQUthLFFBQUwsQ0FBY1csV0FBZCxDQUEwQnpCLGNBQWNFLE9BQXhDO0FBQ0EsYUFBS2lCLFFBQUwsQ0FBY00sV0FBZCxDQUEwQnpCLGNBQWNHLE1BQXhDO0FBQ0FpQixlQUFPTSxvQkFBUCxDQUNFLEtBQUtQLFFBQUwsQ0FBYyxDQUFkLENBREYsRUFFRSxLQUFLYixvQkFGUDtBQUlBLGFBQUtRLFFBQUwsQ0FBY2EsR0FBZCxDQUFrQixlQUFsQixFQUFtQyxFQUFuQztBQUNEO0FBQ0YsS0FsQ21CO0FBbUNwQkMsV0FuQ29CLHFCQW1DVjtBQUNSLFdBQUtMLElBQUw7QUFDQSxXQUFLWixLQUFMO0FBQ0QsS0F0Q21CO0FBdUNwQkosa0JBdkNvQiw0QkF1Q0g7QUFDZixXQUFLZSxrQkFBTDtBQUNELEtBekNtQjtBQTBDcEJBLHNCQTFDb0IsZ0NBMENDO0FBQ25CLFVBQUlPLGVBQWUsS0FBS1YsUUFBTCxDQUFjVyxXQUFkLEVBQW5CO0FBQ0EsV0FBS2hCLFFBQUwsQ0FBY2EsR0FBZCxDQUFrQixlQUFsQixFQUFtQ0UsZUFBZSxJQUFsRDtBQUNEO0FBN0NtQixHQUF0Qjs7QUFnREFsQyxZQUFVb0MsUUFBVixDQUFtQnRDLE9BQW5CO0FBQ0FBLFVBQVFDLFNBQVIsSUFBcUJDLFNBQXJCO0FBQ0FGLFVBQVF1QyxNQUFSLENBQWVDLE1BQWYsQ0FBc0J2QyxTQUF0QjtBQUNBRCxVQUFRdUMsTUFBUixDQUFlRSxRQUFmLENBQXdCeEMsU0FBeEI7QUFDRCxDQXBGRCxFQW9GR3lDLE1BcEZILEVBb0ZXMUMsT0FwRlgiLCJmaWxlIjoiMTE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCQsIENvbGlicmkpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICdmb290ZXItcGFyYWxsYXgnO1xuXG4gIHZhciBDb21wb25lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBjbGFzc05hbWU7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIGFjdGl2ZUNsYXNzZXM6IHtcbiAgICAgICAgaGVhZGVyOiAnaC1mb290ZXItcGFyYWxsYXgtaGVhZGVyLWNsYXNzJyxcbiAgICAgICAgY29udGVudDogJ2gtZm9vdGVyLXBhcmFsbGF4LWNvbnRlbnQtY2xhc3MnLFxuICAgICAgICBmb290ZXI6ICdoLWZvb3Rlci1wYXJhbGxheCcsXG4gICAgICAgIGNvbnRhaW5lcjogJ25ldy1zdGFja2luZy1jb250ZXh0JyxcbiAgICAgIH0sXG4gICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE8gQGNhdGFsaW4sIHdoZW4gdGhlIC5oZWFkZXIgLmNvbnRlbnQgYW5kIC5mb290ZXIgY2xhc3NlcyBjYW4gYmUgZm91bmQgaW4gdGhlIGN1c3RvbWl6ZXIgcmVtb3ZlIHRoZVxuICAgICAgICAgKiBjbGFzc2VzIGluc2VydGVkIGluIHRoZSB2dWUgY29tcG9uZW50c1xuICAgICAgICAgKi9cblxuICAgICAgICBoZWFkZXI6ICcucGFnZS1oZWFkZXIsIC5oZWFkZXInLFxuICAgICAgICBjb250ZW50OiAnLnBhZ2UtY29udGVudCwgLmNvbnRlbnQnLFxuICAgICAgICBjb250YWluZXI6ICcjcGFnZS10b3AnLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5iaW5kZWRSZXNpemVMaXN0ZW5lciA9IHRoaXMucmVzaXplTGlzdGVuZXIuYmluZCh0aGlzKTtcblxuICAgIC8vIFBhcmVudCBDb25zdHJ1Y3RvclxuICAgIENvbGlicmkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBJbml0aWFsaXphdGlvblxuICAgIHRoaXMuc3RhcnQoKTtcbiAgfTtcblxuICBDb21wb25lbnQucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0KCkge1xuICAgICAgY29uc3Qgc2VsZWN0b3JzID0gdGhpcy5vcHRzLnNlbGVjdG9ycztcbiAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSB0aGlzLm9wdHMuYWN0aXZlQ2xhc3NlcztcbiAgICAgIHRoaXMuJGNvbnRlbnQgPSAkKHNlbGVjdG9ycy5jb250ZW50KS5maXJzdCgpO1xuICAgICAgdGhpcy4kaGVhZGVyID0gJChzZWxlY3RvcnMuaGVhZGVyKS5maXJzdCgpO1xuICAgICAgdGhpcy4kY29udGFpbmVyID0gJChzZWxlY3RvcnMuY29udGFpbmVyKTtcblxuICAgICAgLy9UT0RPIHRoaXMub3B0cy5lbmFibGVkIGRvZXMgbm90IHdvcmssIGl0IGRvZXMgbm90IHVwZGF0ZS4gV2hlbiBpdCB3aWxsIHdvcmsgdGhpcyBsaW5lIHNob3VsZCBiZSByZXBsYWNlZCB3aXRoXG4gICAgICAvL2lmICh0aGlzLm9wdHMuZW5hYmxlZCkge1xuICAgICAgLy8gaWYgKHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lbmFibGVkJykgIT09ICd0cnVlJykge1xuICAgICAgLy8gICByZXR1cm47XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250YWluZXIpO1xuICAgICAgdGhpcy4kaGVhZGVyLmFkZENsYXNzKGFjdGl2ZUNsYXNzZXMuaGVhZGVyKTtcbiAgICAgIHRoaXMuJGNvbnRlbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250ZW50KTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5mb290ZXIpO1xuXG4gICAgICB3aW5kb3cuYWRkUmVzaXplTGlzdGVuZXIodGhpcy4kZWxlbWVudFswXSwgdGhpcy5iaW5kZWRSZXNpemVMaXN0ZW5lcik7XG4gICAgICB0aGlzLnVwZGF0ZVNpYmxpbmdTdHlsZSgpO1xuICAgIH0sXG4gICAgc3RvcCgpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSB0aGlzLm9wdHMuYWN0aXZlQ2xhc3NlcztcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKGFjdGl2ZUNsYXNzZXMuZm9vdGVyKSkge1xuICAgICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5jb250YWluZXIpO1xuICAgICAgICB0aGlzLiRoZWFkZXIucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5oZWFkZXIpO1xuICAgICAgICB0aGlzLiRjb250ZW50LnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzZXMuY29udGVudCk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3Nlcy5mb290ZXIpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIoXG4gICAgICAgICAgdGhpcy4kZWxlbWVudFswXSxcbiAgICAgICAgICB0aGlzLmJpbmRlZFJlc2l6ZUxpc3RlbmVyLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLiRjb250ZW50LmNzcygnbWFyZ2luLWJvdHRvbScsICcnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc3RhcnQoKSB7XG4gICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9LFxuICAgIHJlc2l6ZUxpc3RlbmVyKCkge1xuICAgICAgdGhpcy51cGRhdGVTaWJsaW5nU3R5bGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZVNpYmxpbmdTdHlsZSgpIHtcbiAgICAgIGxldCBmb290ZXJIZWlnaHQgPSB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgICB0aGlzLiRjb250ZW50LmNzcygnbWFyZ2luLWJvdHRvbScsIGZvb3RlckhlaWdodCArICdweCcpO1xuICAgIH0sXG4gIH07XG5cbiAgQ29tcG9uZW50LmluaGVyaXRzKENvbGlicmkpO1xuICBDb2xpYnJpW2NsYXNzTmFtZV0gPSBDb21wb25lbnQ7XG4gIENvbGlicmkuUGx1Z2luLmNyZWF0ZShjbGFzc05hbWUpO1xuICBDb2xpYnJpLlBsdWdpbi5hdXRvbG9hZChjbGFzc05hbWUpO1xufSkoalF1ZXJ5LCBDb2xpYnJpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb2xpYnJpLWVkaXRvci9wYWdlLWNvbXBvbmVudHMvZm9vdGVyL3NjcmlwdHMvZm9vdGVyLXBhcmFsYXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///116\n");

/***/ }),
/* 117 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL3RoZW1lL2Nzcy90aGVtZS5zY3NzPzU1MGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Fzc2V0cy9zcmMvdGhlbWUvY3NzL3RoZW1lLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///117\n");

/***/ }),
/* 118 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL2N1c3RvbWl6ZXIuc2Nzcz9kNGQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjExOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL2N1c3RvbWl6ZXIuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///118\n");

/***/ }),
/* 119 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL3ByZXZpZXcuc2Nzcz9iMTZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjExOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvc3JjL2N1c3RvbWl6ZXIvY3NzL3ByZXZpZXcuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///119\n");

/***/ })
/******/ ]);
